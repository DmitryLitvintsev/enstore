--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: products
--

COMMENT ON SCHEMA public IS 'Standard public namespace';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: products
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: tr; Type: TYPE; Schema: public; Owner: enstore
--

CREATE TYPE tr AS (
	media_type character varying,
	recycled integer
);


ALTER TYPE public.tr OWNER TO enstore;

--
-- Name: trb; Type: TYPE; Schema: public; Owner: enstore
--

CREATE TYPE trb AS (
	storage_group character varying,
	recycled_bytes bigint
);


ALTER TYPE public.trb OWNER TO enstore;

--
-- Name: all_deleted(integer); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION all_deleted(integer) RETURNS integer
    AS $_$
begin
        if (select bfid from file where volume = $1 and deleted = 'n' limit 1) is null and
           (select bfid from file where volume = $1 and deleted = 'u' limit 1) is null and
           not (select bfid from file where volume = $1 and deleted = 'y' limit 1) is null
        then
                return 1;
        else
                return 0;
        end if;
end;
$_$
    LANGUAGE plpgsql;


ALTER FUNCTION public.all_deleted(integer) OWNER TO enstore;

--
-- Name: bytes_deleted(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION bytes_deleted(timestamp without time zone) RETURNS SETOF trb
    AS $_$
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'DELETED' and
        state.volume = volume.id and
        time >= $1::timestamp
group by storage_group
order by storage_group;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.bytes_deleted(timestamp without time zone) OWNER TO enstore;

--
-- Name: bytes_deleted(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION bytes_deleted(timestamp without time zone, timestamp without time zone) RETURNS SETOF trb
    AS $_$
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'DELETED' and
        state.volume = volume.id and
        time >= $1::timestamp and
        time < $2::timestamp
group by storage_group
order by storage_group;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.bytes_deleted(timestamp without time zone, timestamp without time zone) OWNER TO enstore;

--
-- Name: bytes_deleted_last_7days(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION bytes_deleted_last_7days() RETURNS SETOF trb
    AS $$
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'DELETED' and
        state.volume = volume.id and
        time >= current_date - 8 and
        time < current_date
group by storage_group
order by storage_group;
$$
    LANGUAGE sql;


ALTER FUNCTION public.bytes_deleted_last_7days() OWNER TO enstore;

--
-- Name: bytes_recycled(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION bytes_recycled(timestamp without time zone, timestamp without time zone) RETURNS SETOF trb
    AS $_$
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'RECYCLED' and
        state.volume = volume.id and
        time >= $1::timestamp and
        time < $2::timestamp
group by storage_group
order by storage_group;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.bytes_recycled(timestamp without time zone, timestamp without time zone) OWNER TO enstore;

--
-- Name: bytes_recycled(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION bytes_recycled(timestamp without time zone) RETURNS SETOF trb
    AS $_$
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'RECYCLED' and
        state.volume = volume.id and
        time >= $1::timestamp
group by storage_group
order by storage_group;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.bytes_recycled(timestamp without time zone) OWNER TO enstore;

--
-- Name: bytes_recycled_last_7days(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION bytes_recycled_last_7days() RETURNS SETOF trb
    AS $$
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'RECYCLED' and
        state.volume = volume.id and
        time >= current_date - 8 and
        time < current_date
group by storage_group
order by storage_group;
$$
    LANGUAGE sql;


ALTER FUNCTION public.bytes_recycled_last_7days() OWNER TO enstore;

--
-- Name: lookup_stype(character varying); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION lookup_stype(character varying) RETURNS integer
    AS $_$select id from state_type where name = $1;$_$
    LANGUAGE sql;


ALTER FUNCTION public.lookup_stype(character varying) OWNER TO enstore;

--
-- Name: lookup_vol(character varying); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION lookup_vol(character varying) RETURNS integer
    AS $_$select id from volume where label = $1;$_$
    LANGUAGE sql;


ALTER FUNCTION public.lookup_vol(character varying) OWNER TO enstore;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO enstore;

--
-- Name: plpgsql_validator(oid); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION plpgsql_validator(oid) RETURNS void
    AS '$libdir/plpgsql', 'plpgsql_validator'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_validator(oid) OWNER TO enstore;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: qa; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE qa (
    media_type character varying,
    library character varying,
    storage_group character varying,
    monthly numeric,
    weekly numeric,
    daily numeric,
    projected_daily numeric,
    quota integer,
    allocated integer,
    days_surviving numeric,
    alert character varying
);


ALTER TABLE public.qa OWNER TO enstore;

--
-- Name: quota_alert(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION quota_alert() RETURNS SETOF qa
    AS $$
select *,
	case
		when m1.days_surviving < 3 then 'less than 3 days'
		when m1.days_surviving < 7 then 'less than 1 week'
	end :: varchar as alert
	from
	(select *,
		trunc((m.quota - m.allocated)/(
			case
				when m.projected_daily = 0 then null
				else m.projected_daily
			end)) as days_surviving
	from
		(select
			u.media_type, u.library, u.storage_group, u.monthly,
			u.weekly, u.daily,
			case
				when u.weekly/7 > u.daily or u.daily is null
					then round(u.weekly/7, 5)
				else u.daily
			end as projected_daily,
			quota.quota, sg_count.count as allocated
		from quota, sg_count,
			(select monthly.media_type, monthly.library,
				monthly.storage_group, monthly.volumes as monthly,
				dw.weekly, dw.daily
			from
				tape_consumption('1 month', 'n') as monthly
				full outer join
				(select weekly.media_type, weekly.storage_group, daily.volumes as daily , weekly.volumes as weekly
				from
					tape_consumption('1 day', 'r') as daily
					full outer join
					tape_consumption('1 week', 'r') as weekly
					on (daily.media_type = weekly.media_type and daily.storage_group = weekly.storage_group)) as dw
				on (monthly.media_type = dw.media_type and monthly.storage_group = dw.storage_group)
			order by media_type, storage_group) as u
		where
			u.library = quota.library and
			u.storage_group = quota.storage_group and
			sg_count.library = u.library and
			sg_count.storage_group = u.storage_group) as m
	) as m1;
$$
    LANGUAGE sql;


ALTER FUNCTION public.quota_alert() OWNER TO enstore;

--
-- Name: set_update(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION set_update() RETURNS "trigger"
    AS $$
declare
begin
    new.update = now();
    return new;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.set_update() OWNER TO enstore;

--
-- Name: tc; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE tc (
    media_type character varying,
    library character varying,
    storage_group character varying,
    volumes numeric
);


ALTER TABLE public.tc OWNER TO enstore;

--
-- Name: tape_consumption(interval, character); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION tape_consumption(interval, character) RETURNS SETOF tc
    AS $_$
select media_type, library, storage_group, sum(volumes)
from
	(select media_type, library, storage_group, file_family,
		sum(size),
		case
			when $2 = 'r' then
				round(sum(size)/media_capacity.capacity, 5)
			else
				trunc((sum(size)-1)/media_capacity.capacity)+1
		end as volumes
	from file, volume, media_capacity
	where
		file.volume = volume.id and
		media_capacity.type = volume.media_type and
		volume.media_type != 'null' and
		bfid > 'CDMS' || to_char(trunc(date_part('epoch', now() - $1)), 'FM99999999999999') || '00000' and
		bfid < 'CDMS' || to_char(trunc(date_part('epoch', now() + interval '1 day')), 'FM99999999999999') || '00000'
		group by media_type, library, storage_group,
			file_family, capacity) as foo
group by media_type, library, storage_group;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.tape_consumption(interval, character) OWNER TO enstore;

--
-- Name: tapes_recycled(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION tapes_recycled(timestamp without time zone, timestamp without time zone) RETURNS SETOF tr
    AS $_$
select
        media_type,
        count(*)::int as recycled
from
        state,
        volume
where
        state.volume = volume.id and
        value = 'RECYCLED' and
        time >= $1::timestamp and
        time < $2::timestamp
group by media_type
order by media_type;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.tapes_recycled(timestamp without time zone, timestamp without time zone) OWNER TO enstore;

--
-- Name: tapes_recycled(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION tapes_recycled(timestamp without time zone) RETURNS SETOF tr
    AS $_$
select
        media_type,
        count(*)::int as recycled
from
        state,
        volume
where
        state.volume = volume.id and
        value = 'RECYCLED' and
        time >= $1::timestamp
group by media_type
order by media_type;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.tapes_recycled(timestamp without time zone) OWNER TO enstore;

--
-- Name: tapes_recycled_last_7days(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION tapes_recycled_last_7days() RETURNS SETOF tr
    AS $$
select
        media_type,
        count(*)::int as recycled
from
        state,
        volume
where
        state.volume = volume.id and
        value = 'RECYCLED' and
        time >= current_date - 8 and
        time < current_date
group by media_type
order by media_type;
$$
    LANGUAGE sql;


ALTER FUNCTION public.tapes_recycled_last_7days() OWNER TO enstore;

--
-- Name: write_protect_status(character varying); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION write_protect_status(character varying) RETURNS character
    AS $_$
select
    case value
        when 'ON' then 'y'
        when 'OFF' then 'n'
        else 'u'
    end
from state, state_type, volume
where
    state.type = state_type.id and
    state_type.name = 'write_protect' and
    state.volume = volume.id and
    volume.label = $1
order by time desc limit 1;
$_$
    LANGUAGE sql;


ALTER FUNCTION public.write_protect_status(character varying) OWNER TO enstore;

SET default_with_oids = false;

--
-- Name: active_file_copying; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE active_file_copying (
    bfid character varying NOT NULL,
    remaining integer,
    "time" timestamp with time zone DEFAULT now()
);


ALTER TABLE public.active_file_copying OWNER TO enstore;

SET default_with_oids = true;

--
-- Name: bad_file; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE bad_file (
    bfid character varying,
    path character varying
);


ALTER TABLE public.bad_file OWNER TO enstore;

--
-- Name: volume; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE volume (
    id integer DEFAULT nextval(('volume_seq'::text)::regclass) NOT NULL,
    label character varying,
    block_size integer DEFAULT 0,
    capacity_bytes bigint DEFAULT 0,
    declared timestamp without time zone,
    eod_cookie character varying,
    first_access timestamp without time zone,
    last_access timestamp without time zone,
    library character varying,
    media_type character varying,
    non_del_files integer DEFAULT 0,
    remaining_bytes bigint DEFAULT 0,
    sum_mounts integer DEFAULT 0,
    sum_rd_access integer DEFAULT 0,
    sum_rd_err integer DEFAULT 0,
    sum_wr_access integer DEFAULT 0,
    sum_wr_err integer DEFAULT 0,
    system_inhibit_0 character varying,
    system_inhibit_1 character varying,
    si_time_0 timestamp without time zone,
    si_time_1 timestamp without time zone,
    user_inhibit_0 character varying,
    user_inhibit_1 character varying,
    storage_group character varying,
    file_family character varying,
    wrapper character varying,
    "comment" character varying,
    write_protected character(1) DEFAULT 'u'::bpchar,
    CONSTRAINT volume_write_protected_check CHECK ((((write_protected = 'u'::bpchar) OR (write_protected = 'y'::bpchar)) OR (write_protected = 'n'::bpchar)))
);


ALTER TABLE public.volume OWNER TO enstore;

--
-- Name: cms_volume_with_only_deleted_files; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW cms_volume_with_only_deleted_files AS
    SELECT volume.label, volume.storage_group, volume.file_family, volume.system_inhibit_1 AS state, volume.media_type, volume.library FROM volume WHERE ((((volume.storage_group)::text = 'cms'::text) AND ((volume.system_inhibit_0)::text = 'none'::text)) AND (all_deleted(volume.id) = 1));


ALTER TABLE public.cms_volume_with_only_deleted_files OWNER TO enstore;

--
-- Name: file; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE file (
    bfid character varying NOT NULL,
    crc bigint DEFAULT -1,
    deleted character(1) DEFAULT 'u'::bpchar,
    drive character varying,
    volume integer,
    location_cookie character varying,
    pnfs_path character varying,
    pnfs_id character varying,
    sanity_size bigint DEFAULT -1,
    sanity_crc bigint DEFAULT -1,
    size bigint DEFAULT 0,
    uid integer DEFAULT -1,
    gid integer DEFAULT -1,
    "update" timestamp without time zone
);


ALTER TABLE public.file OWNER TO enstore;

--
-- Name: file_copies_map; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE file_copies_map (
    bfid character varying,
    alt_bfid character varying
);


ALTER TABLE public.file_copies_map OWNER TO enstore;

--
-- Name: duplicates; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW duplicates AS
    SELECT m.bfid AS "primary", m.alt_bfid AS "copy", f.deleted, f.pnfs_path FROM file_copies_map m, file f WHERE ((f.bfid)::text = (m.bfid)::text);


ALTER TABLE public.duplicates OWNER TO enstore;

--
-- Name: enstore_tables; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW enstore_tables AS
    SELECT n.nspname AS schemaname, c.relname AS tablename, pg_get_userbyid(c.relowner) AS tableowner, c.reltuples AS "rows", c.relpages AS pages, t.spcname AS "tablespace", c.relhaspkey AS haspkey, c.relhasindex AS hasindexes, c.relhasrules AS hasrules, (c.reltriggers > 0) AS hastriggers FROM ((pg_class c LEFT JOIN pg_namespace n ON ((n.oid = c.relnamespace))) LEFT JOIN pg_tablespace t ON ((t.oid = c.reltablespace))) WHERE ((c.relkind = 'r'::"char") AND (n.nspname = 'public'::name));


ALTER TABLE public.enstore_tables OWNER TO enstore;

--
-- Name: file2; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW file2 AS
    SELECT file.bfid, file.crc, file.deleted, file.drive, file.volume, file.location_cookie, file.pnfs_path, file.pnfs_id, file.sanity_size, file.sanity_crc, file.size, file.uid, file.gid, CASE WHEN (file.deleted = 'y'::bpchar) THEN 1 ELSE 0 END AS n_deleted, CASE WHEN (file.deleted = 'y'::bpchar) THEN file.size ELSE (0)::bigint END AS size_deleted, CASE WHEN (file.deleted = 'n'::bpchar) THEN 1 ELSE 0 END AS n_active, CASE WHEN (file.deleted = 'n'::bpchar) THEN file.size ELSE (0)::bigint END AS size_active, CASE WHEN ((file.deleted <> 'y'::bpchar) AND (file.deleted <> 'n'::bpchar)) THEN 1 ELSE 0 END AS n_unknown, CASE WHEN ((file.deleted <> 'y'::bpchar) AND (file.deleted <> 'n'::bpchar)) THEN file.size ELSE (0)::bigint END AS size_unknown FROM file;


ALTER TABLE public.file2 OWNER TO enstore;

--
-- Name: file_info; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW file_info AS
    SELECT f.bfid, f.crc AS complete_crc, CASE WHEN (f.deleted = 'y'::bpchar) THEN 'deleted'::text WHEN (f.deleted = 'n'::bpchar) THEN 'active'::text ELSE 'unknown'::text END AS deleted, v.label AS external_label, f.location_cookie, v.storage_group, v.file_family, v.library, v.media_type, f.size, f.gid, f.uid, f.pnfs_id AS pnfsid, f.pnfs_path AS pnfs_name0, f.sanity_size, f.sanity_crc, f.drive, f."update" FROM file f, volume v WHERE (f.volume = v.id);


ALTER TABLE public.file_info OWNER TO enstore;

--
-- Name: lock_status; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW lock_status AS
    SELECT (SELECT pg_class.relname FROM pg_class WHERE (pg_class.oid = pg_locks.relation)) AS "table", (SELECT pg_database.datname FROM pg_database WHERE (pg_database.oid = pg_locks."database")) AS "database", pg_locks."transaction", (SELECT pg_stat_activity.usename FROM pg_stat_activity WHERE (pg_stat_activity.procpid = pg_locks.pid)) AS "user", pg_locks."mode", pg_locks."granted" FROM pg_locks;


ALTER TABLE public.lock_status OWNER TO enstore;

--
-- Name: media_capacity; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE media_capacity (
    "type" character varying NOT NULL,
    capacity bigint
);


ALTER TABLE public.media_capacity OWNER TO enstore;

--
-- Name: migration; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE migration (
    src_bfid character varying,
    dst_bfid character varying,
    copied timestamp without time zone,
    swapped timestamp without time zone,
    checked timestamp without time zone,
    closed timestamp without time zone,
    remark character varying
);


ALTER TABLE public.migration OWNER TO enstore;

SET default_with_oids = false;

--
-- Name: migration_deleted; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE migration_deleted (
    src_bfid character varying,
    dst_bfid character varying,
    copied timestamp without time zone,
    swapped timestamp without time zone,
    checked timestamp without time zone,
    closed timestamp without time zone,
    remark character varying,
    "update" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.migration_deleted OWNER TO enstore;

SET default_with_oids = true;

--
-- Name: migration_history; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE migration_history (
    src character varying NOT NULL,
    dst character varying NOT NULL,
    "time" timestamp without time zone DEFAULT now()
);


ALTER TABLE public.migration_history OWNER TO enstore;

--
-- Name: no_flipping_file_family; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE no_flipping_file_family (
    storage_group character varying,
    file_family character varying
);


ALTER TABLE public.no_flipping_file_family OWNER TO enstore;

--
-- Name: no_flipping_storage_group; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE no_flipping_storage_group (
    storage_group character varying
);


ALTER TABLE public.no_flipping_storage_group OWNER TO enstore;

--
-- Name: option; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE "option" (
    "key" character varying,
    value character varying
);


ALTER TABLE public."option" OWNER TO enstore;

--
-- Name: quota; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE quota (
    library character varying NOT NULL,
    storage_group character varying NOT NULL,
    requested integer DEFAULT 0,
    authorized integer DEFAULT 0,
    quota integer DEFAULT 0,
    significance character(1) DEFAULT 'y'::bpchar
);


ALTER TABLE public.quota OWNER TO enstore;

--
-- Name: remaining_blanks; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW remaining_blanks AS
    SELECT volume.media_type, count(*) AS blanks FROM volume WHERE ((((volume.storage_group)::text = 'none'::text) AND ((volume.file_family)::text = 'none'::text)) AND ((volume.wrapper)::text = 'none'::text)) GROUP BY volume.media_type;


ALTER TABLE public.remaining_blanks OWNER TO enstore;

--
-- Name: sg_count; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE sg_count (
    library character varying NOT NULL,
    storage_group character varying NOT NULL,
    count integer
);


ALTER TABLE public.sg_count OWNER TO enstore;

--
-- Name: state; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE state (
    "time" timestamp without time zone DEFAULT now(),
    volume integer NOT NULL,
    "type" integer,
    value character varying
);


ALTER TABLE public.state OWNER TO enstore;

--
-- Name: state_type; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE state_type (
    id integer DEFAULT nextval(('state_type_seq'::text)::regclass) NOT NULL,
    name character varying NOT NULL
);


ALTER TABLE public.state_type OWNER TO enstore;

--
-- Name: state_type_seq; Type: SEQUENCE; Schema: public; Owner: enstore
--

CREATE SEQUENCE state_type_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.state_type_seq OWNER TO enstore;

--
-- Name: volume_seq; Type: SEQUENCE; Schema: public; Owner: enstore
--

CREATE SEQUENCE volume_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.volume_seq OWNER TO enstore;

--
-- Name: volume_summary; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW volume_summary AS
    SELECT volume.label, volume.capacity_bytes, sum(file2.size) AS used, sum(file2.n_active) AS n_active, sum(file2.size_active) AS active, sum(file2.n_deleted) AS n_deleted, sum(file2.size_deleted) AS deleted, sum(file2.n_unknown) AS n_unknown, sum(file2.size_unknown) AS "unknown", volume.remaining_bytes, (((volume.capacity_bytes - volume.remaining_bytes))::numeric - sum(file2.size)) AS unaccountable, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume."comment" FROM file2, volume WHERE (file2.volume = volume.id) GROUP BY volume.label, volume.capacity_bytes, volume.remaining_bytes, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume."comment";


ALTER TABLE public.volume_summary OWNER TO enstore;

--
-- Name: volume_summary2; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW volume_summary2 AS
    SELECT volume.label, volume.capacity_bytes, sum(CASE WHEN (file.size IS NULL) THEN (0)::bigint ELSE file.size END) AS used, count(CASE WHEN (file.deleted = 'n'::bpchar) THEN 1 ELSE NULL::integer END) AS n_active, sum(CASE WHEN ((file.deleted = 'n'::bpchar) AND (file.size IS NOT NULL)) THEN file.size ELSE (0)::bigint END) AS active, count(CASE WHEN (file.deleted = 'y'::bpchar) THEN 1 ELSE NULL::integer END) AS n_deleted, sum(CASE WHEN ((file.deleted = 'y'::bpchar) AND (file.size IS NOT NULL)) THEN file.size ELSE (0)::bigint END) AS deleted, count(CASE WHEN (file.deleted = 'u'::bpchar) THEN 1 ELSE NULL::integer END) AS n_unknown, sum(CASE WHEN ((file.deleted = 'u'::bpchar) AND (file.size IS NOT NULL)) THEN file.size ELSE (0)::bigint END) AS "unknown", volume.remaining_bytes, (((volume.capacity_bytes - volume.remaining_bytes))::numeric - sum(file.size)) AS unaccountable, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume."comment" FROM (volume LEFT JOIN file ON ((file.volume = volume.id))) GROUP BY volume.label, volume.capacity_bytes, volume.remaining_bytes, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume."comment";


ALTER TABLE public.volume_summary2 OWNER TO enstore;

--
-- Name: volume_with_only_deleted_files; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW volume_with_only_deleted_files AS
    SELECT foo.label, foo.storage_group, foo.file_family, foo.state, foo.media_type, foo.library, foo.n_active, foo.n_deleted, foo.n_unknown FROM (SELECT volume.label, volume.storage_group, volume.file_family, volume.system_inhibit_1 AS state, volume.media_type, volume.library, count(CASE WHEN (file.deleted = 'n'::bpchar) THEN 1 ELSE NULL::integer END) AS n_active, count(CASE WHEN (file.deleted = 'y'::bpchar) THEN 1 ELSE NULL::integer END) AS n_deleted, count(CASE WHEN (file.deleted = 'u'::bpchar) THEN 1 ELSE NULL::integer END) AS n_unknown FROM (volume LEFT JOIN file ON ((file.volume = volume.id))) WHERE (NOT ((volume.label)::text ~~ '%.deleted'::text)) GROUP BY volume.label, volume.storage_group, volume.file_family, volume.system_inhibit_1, volume.media_type, volume.library) foo WHERE ((foo.n_active = 0) AND (foo.n_deleted > 0));


ALTER TABLE public.volume_with_only_deleted_files OWNER TO enstore;

--
-- Name: write_protection_audit; Type: VIEW; Schema: public; Owner: enstore
--

CREATE VIEW write_protection_audit AS
    SELECT volume.id, volume.label, volume.block_size, volume.capacity_bytes, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.non_del_files, volume.remaining_bytes, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume."comment", volume.write_protected FROM volume WHERE ((NOT ((volume.label)::text ~~ '%.deleted'::text)) AND ((((volume.system_inhibit_1)::text <> 'none'::text) AND (volume.write_protected <> 'y'::bpchar)) OR (((volume.system_inhibit_1)::text = 'none'::text) AND (volume.write_protected <> 'n'::bpchar))));


ALTER TABLE public.write_protection_audit OWNER TO enstore;

--
-- Name: active_file_copying_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY active_file_copying
    ADD CONSTRAINT active_file_copying_pkey PRIMARY KEY (bfid);


--
-- Name: file_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pkey PRIMARY KEY (bfid);


--
-- Name: media_capacity_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY media_capacity
    ADD CONSTRAINT media_capacity_pkey PRIMARY KEY ("type");


--
-- Name: migration_dst_bfid_key; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY migration
    ADD CONSTRAINT migration_dst_bfid_key UNIQUE (dst_bfid);


--
-- Name: migration_history_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY migration_history
    ADD CONSTRAINT migration_history_pkey PRIMARY KEY (src, dst);


--
-- Name: migration_src_bfid_key; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY migration
    ADD CONSTRAINT migration_src_bfid_key UNIQUE (src_bfid);


--
-- Name: quota_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY quota
    ADD CONSTRAINT quota_pkey PRIMARY KEY (library, storage_group);


--
-- Name: sg_count_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY sg_count
    ADD CONSTRAINT sg_count_pkey PRIMARY KEY (library, storage_group);


--
-- Name: state_type_name_key; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY state_type
    ADD CONSTRAINT state_type_name_key UNIQUE (name);


--
-- Name: state_type_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY state_type
    ADD CONSTRAINT state_type_pkey PRIMARY KEY (id);


--
-- Name: volume_label_key; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY volume
    ADD CONSTRAINT volume_label_key UNIQUE (label);


--
-- Name: volume_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY volume
    ADD CONSTRAINT volume_pkey PRIMARY KEY (id);


--
-- Name: bad_file_bfid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX bad_file_bfid_idx ON bad_file USING btree (bfid);


--
-- Name: file_copies_map_alt_bfid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX file_copies_map_alt_bfid_idx ON file_copies_map USING btree (alt_bfid);


--
-- Name: file_copies_map_bfid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX file_copies_map_bfid_idx ON file_copies_map USING btree (bfid);


--
-- Name: file_deleted_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX file_deleted_idx ON file USING btree (deleted);


--
-- Name: file_location_cookie_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX file_location_cookie_idx ON file USING btree (location_cookie);


--
-- Name: file_pnfs_id_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX file_pnfs_id_idx ON file USING btree (pnfs_id);


--
-- Name: file_pnfs_path_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX file_pnfs_path_idx ON file USING btree (pnfs_path);


--
-- Name: file_volume_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX file_volume_idx ON file USING btree (volume);


--
-- Name: migration_history_dst_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX migration_history_dst_idx ON migration_history USING btree (dst);


--
-- Name: migration_history_src_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX migration_history_src_idx ON migration_history USING btree (src);


--
-- Name: quota_library_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX quota_library_idx ON quota USING btree (library);


--
-- Name: quota_storage_group_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX quota_storage_group_idx ON quota USING btree (storage_group);


--
-- Name: state_time_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX state_time_idx ON state USING btree ("time");


--
-- Name: state_type_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX state_type_idx ON state USING btree ("type");


--
-- Name: state_value_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX state_value_idx ON state USING btree (value);


--
-- Name: state_volume_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX state_volume_idx ON state USING btree (volume);


--
-- Name: volume_file_family_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_file_family_idx ON volume USING btree (file_family);


--
-- Name: volume_label_key_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_label_key_idx ON volume USING btree (label);


--
-- Name: volume_library_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_library_idx ON volume USING btree (library);


--
-- Name: volume_media_type_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_media_type_idx ON volume USING btree (media_type);


--
-- Name: volume_remaining_bytes_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_remaining_bytes_idx ON volume USING btree (remaining_bytes);


--
-- Name: volume_storage_group_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_storage_group_idx ON volume USING btree (storage_group);


--
-- Name: volume_system_inhibit_0_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_system_inhibit_0_idx ON volume USING btree (system_inhibit_0);


--
-- Name: volume_system_inhibit_1_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_system_inhibit_1_idx ON volume USING btree (system_inhibit_1);


--
-- Name: volume_wrapper_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_wrapper_idx ON volume USING btree (wrapper);


--
-- Name: volume_write_protected_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX volume_write_protected_idx ON volume USING btree (write_protected);


--
-- Name: set_update; Type: TRIGGER; Schema: public; Owner: enstore
--

CREATE TRIGGER set_update
    BEFORE INSERT OR UPDATE ON file
    FOR EACH ROW
    EXECUTE PROCEDURE set_update();


--
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY file
    ADD CONSTRAINT "$1" FOREIGN KEY (volume) REFERENCES volume(id);


--
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY state
    ADD CONSTRAINT "$1" FOREIGN KEY (volume) REFERENCES volume(id) ON DELETE CASCADE;


--
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY bad_file
    ADD CONSTRAINT "$1" FOREIGN KEY (bfid) REFERENCES file(bfid) ON DELETE CASCADE;


--
-- Name: $1; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY migration
    ADD CONSTRAINT "$1" FOREIGN KEY (src_bfid) REFERENCES file(bfid) ON DELETE CASCADE;


--
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY state
    ADD CONSTRAINT "$2" FOREIGN KEY ("type") REFERENCES state_type(id);


--
-- Name: $2; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY migration
    ADD CONSTRAINT "$2" FOREIGN KEY (dst_bfid) REFERENCES file(bfid) ON DELETE CASCADE;


--
-- Name: file_copies_map_alt_bfid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY file_copies_map
    ADD CONSTRAINT file_copies_map_alt_bfid_fkey FOREIGN KEY (alt_bfid) REFERENCES file(bfid) ON DELETE CASCADE;


--
-- Name: file_copies_map_bfid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY file_copies_map
    ADD CONSTRAINT file_copies_map_bfid_fkey FOREIGN KEY (bfid) REFERENCES file(bfid) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--


insert into state_type (name) values ('system_inhibit_0');
insert into state_type (name) values ('system_inhibit_1');
insert into state_type (name) values ('user_inhibit_0');
insert into state_type (name) values ('user_inhibit_1');
insert into state_type (name) values ('write_protect');
insert into state_type (name) values ('other');
insert into state_type (name) values ('modified');
insert into state_type (name) values ('set_comment');
insert into state_type (name) values ('new_library');

insert into option (key, value) values ('quota', 'disabled');

insert into media_capacity values('9840', 21474836480);
insert into media_capacity values('9940', 64424509440);
insert into media_capacity values('9940B', 214748364800);
insert into media_capacity values('DECDLT', 21474836480);
insert into media_capacity values('null', 214748364800);
