<?xml version="1.0" encoding="ISO-8859-1"?>
<schema generated="yes">
  <table name="qa">
    <column name="media_type" type="varchar"/>
    <column name="library" type="varchar"/>
    <column name="storage_group" type="varchar"/>
    <column name="monthly" type="numeric"/>
    <column name="weekly" type="numeric"/>
    <column name="daily" type="numeric"/>
    <column name="projected_daily" type="numeric"/>
    <column name="quota" type="integer"/>
    <column name="allocated" type="integer"/>
    <column name="days_surviving" type="numeric"/>
    <column name="alert" type="varchar"/>
  </table>
  <table name="tc">
    <column name="media_type" type="varchar"/>
    <column name="library" type="varchar"/>
    <column name="storage_group" type="varchar"/>
    <column name="volumes" type="numeric"/>
  </table>
  <table name="active_file_copying">
    <column name="bfid" type="varchar" null="no" key="1"/>
    <column name="remaining" type="integer"/>
    <column name="time" type="timestamptz" default="now()"/>
  </table>
  <table name="bad_file">
    <column name="bfid" type="varchar"/>
    <column name="path" type="varchar"/>
    <indexes>
        <index name="bad_file_bfid_idx" columns="bfid"/>
    </indexes>
    <relations>
        <relation name="$1" column="bfid" table="file" fk="bfid" ondelete="cascade"/>
    </relations>
  </table>
  <table name="file_copies_map">
    <column name="bfid" type="varchar"/>
    <column name="alt_bfid" type="varchar"/>
    <indexes>
        <index name="file_copies_map_alt_bfid_idx" columns="alt_bfid"/>
        <index name="file_copies_map_bfid_idx" columns="bfid"/>
    </indexes>
    <relations>
        <relation name="file_copies_map_alt_bfid_fkey" column="alt_bfid" table="file" fk="bfid" ondelete="cascade"/>
        <relation name="file_copies_map_bfid_fkey" column="bfid" table="file" fk="bfid" ondelete="cascade"/>
    </relations>
  </table>
  <table name="no_flipping_file_family">
    <column name="storage_group" type="varchar"/>
    <column name="file_family" type="varchar"/>
  </table>
  <table name="media_capacity">
    <column name="type" type="varchar" null="no" key="1"/>
    <column name="capacity" type="bigint"/>
  </table>
  <table name="state">
    <column name="time" type="timestamp" default="now()"/>
    <column name="volume" type="integer" null="no"/>
    <column name="type" type="integer"/>
    <column name="value" type="varchar"/>
    <indexes>
        <index name="state_time_idx" columns="time"/>
        <index name="state_type_idx" columns="type"/>
        <index name="state_value_idx" columns="value"/>
        <index name="state_volume_idx" columns="volume"/>
    </indexes>
    <relations>
        <relation name="$1" column="volume" table="volume" fk="id" ondelete="cascade"/>
        <relation name="$2" column="type" table="state_type" fk="id"/>
    </relations>
  </table>
  <table name="migration_history">
    <column name="src" type="varchar" null="no"/>
    <column name="dst" type="varchar" null="no"/>
    <column name="time" type="timestamp" default="now()"/>
    <column name="src_vol_id" type="integer" null="no" default="(-1)" key="1"/>
    <column name="dst_vol_id" type="integer" null="no" default="(-1)" key="2"/>
    <column name="closed_time" type="timestamp"/>
    <indexes>
        <index name="migration_history_dst_idx" columns="dst"/>
        <index name="migration_history_src_idx" columns="src"/>
    </indexes>
  </table>
  <table name="no_flipping_storage_group">
    <column name="storage_group" type="varchar"/>
  </table>
  <table name="option">
    <column name="key" type="varchar"/>
    <column name="value" type="varchar"/>
  </table>
  <table name="quotas">
    <column name="time" type="timestamptz" null="no" default="now()" key="1"/>
    <column name="library" type="varchar" null="no" key="2"/>
    <column name="storage_group" type="varchar" null="no" key="3"/>
    <column name="allocated" type="integer"/>
    <column name="blank" type="integer" null="no"/>
    <column name="written" type="integer" null="no"/>
    <column name="requested" type="integer"/>
    <column name="authorized" type="integer"/>
    <column name="quota" type="integer"/>
  </table>
  <table name="sg_count">
    <column name="library" type="varchar" null="no" key="1"/>
    <column name="storage_group" type="varchar" null="no" key="2"/>
    <column name="count" type="integer"/>
  </table>
  <table name="migration">
    <column name="src_bfid" type="varchar" null="no" key="1"/>
    <column name="dst_bfid" type="varchar" null="no" key="2"/>
    <column name="copied" type="timestamp"/>
    <column name="swapped" type="timestamp"/>
    <column name="checked" type="timestamp"/>
    <column name="closed" type="timestamp"/>
    <column name="remark" type="varchar"/>
    <indexes>
        <index name="migration_dst_bfid_idx" columns="dst_bfid"/>
        <index name="migration_src_bfid_idx" columns="src_bfid"/>
    </indexes>
    <relations>
        <relation name="$1" column="src_bfid" table="file" fk="bfid" ondelete="cascade"/>
        <relation name="$2" column="dst_bfid" table="file" fk="bfid" ondelete="cascade"/>
    </relations>
  </table>
  <table name="files_in_transition">
    <column name="bfid" type="varchar" size="32" null="no" key="1"/>
    <relations>
        <relation name="$1" column="bfid" table="file" fk="bfid" ondelete="cascade"/>
    </relations>
  </table>
  <table name="cache_statuses">
    <column name="status" type="varchar" size="32" null="no" key="1"/>
    <column name="explanation" type="varchar" size="256"/>
  </table>
  <table name="volume">
    <column name="id" type="integer" null="no" default="nextval(('volume_seq')::regclass)" key="1"/>
    <column name="label" type="varchar"/>
    <column name="block_size" type="integer" default="0"/>
    <column name="capacity_bytes" type="bigint" default="0"/>
    <column name="declared" type="timestamp"/>
    <column name="eod_cookie" type="varchar"/>
    <column name="first_access" type="timestamp"/>
    <column name="last_access" type="timestamp"/>
    <column name="library" type="varchar"/>
    <column name="media_type" type="varchar"/>
    <column name="non_del_files" type="integer" default="0"/>
    <column name="remaining_bytes" type="bigint" default="0"/>
    <column name="sum_mounts" type="integer" default="0"/>
    <column name="sum_rd_access" type="integer" default="0"/>
    <column name="sum_rd_err" type="integer" default="0"/>
    <column name="sum_wr_access" type="integer" default="0"/>
    <column name="sum_wr_err" type="integer" default="0"/>
    <column name="system_inhibit_0" type="varchar"/>
    <column name="system_inhibit_1" type="varchar"/>
    <column name="si_time_0" type="timestamp"/>
    <column name="si_time_1" type="timestamp"/>
    <column name="user_inhibit_0" type="varchar"/>
    <column name="user_inhibit_1" type="varchar"/>
    <column name="storage_group" type="varchar"/>
    <column name="file_family" type="varchar"/>
    <column name="wrapper" type="varchar"/>
    <column name="comment" type="varchar"/>
    <column name="write_protected" type="bpchar" default="'u'::bpchar"/>
    <column name="active_files" type="integer" default="0"/>
    <column name="deleted_files" type="integer" default="0"/>
    <column name="unknown_files" type="integer" default="0"/>
    <column name="active_bytes" type="bigint" default="0"/>
    <column name="deleted_bytes" type="bigint" default="0"/>
    <column name="unknown_bytes" type="bigint" default="0"/>
    <column name="modification_time" type="timestamp"/>
    <indexes>
        <index name="volume_label_key" columns="label"/>
        <index name="volume_declared_idx" columns="declared"/>
        <index name="volume_eod_cookie_idx" columns="eod_cookie"/>
        <index name="volume_file_family_idx" columns="file_family"/>
        <index name="volume_label_key_idx" columns="label"/>
        <index name="volume_last_access_idx" columns="last_access"/>
        <index name="volume_library_idx" columns="library"/>
        <index name="volume_media_type_idx" columns="media_type"/>
        <index name="volume_modification_time_idx" columns="modification_time"/>
        <index name="volume_remaining_bytes_idx" columns="remaining_bytes"/>
        <index name="volume_storage_group_idx" columns="storage_group"/>
        <index name="volume_system_inhibit_0_idx" columns="system_inhibit_0"/>
        <index name="volume_system_inhibit_1_idx" columns="system_inhibit_1"/>
        <index name="volume_user_inhibit_0_idx" columns="user_inhibit_0"/>
        <index name="volume_user_inhibit_1_idx" columns="user_inhibit_1"/>
        <index name="volume_wrapper_idx" columns="wrapper"/>
        <index name="volume_write_protected_idx" columns="write_protected"/>
    </indexes>
  </table>
  <table name="quota">
    <column name="library" type="varchar" null="no" key="1"/>
    <column name="storage_group" type="varchar" null="no" key="2"/>
    <column name="requested" type="integer" default="0"/>
    <column name="authorized" type="integer" default="0"/>
    <column name="quota" type="integer" default="0"/>
    <column name="significance" type="bpchar" default="'y'::bpchar"/>
    <indexes>
        <index name="quota_library_idx" columns="library"/>
        <index name="quota_storage_group_idx" columns="storage_group"/>
    </indexes>
  </table>
  <table name="archive_statuses">
    <column name="status" type="varchar" size="32" null="no" key="1"/>
    <column name="explanation" type="varchar" size="256"/>
  </table>
  <table name="state_type">
    <column name="id" type="integer" null="no" default="nextval(('state_type_seq')::regclass)" key="1"/>
    <column name="name" type="varchar" null="no"/>
    <indexes>
        <index name="state_type_name_key" columns="name"/>
    </indexes>
  </table>
  <table name="cached_files">
    <column name="bfid" type="varchar" size="32" null="no" key="1"/>
    <relations>
        <relation name="$1" column="bfid" table="file" fk="bfid" ondelete="cascade"/>
    </relations>
  </table>
  <table name="file">
    <column name="bfid" type="varchar" null="no" key="1"/>
    <column name="crc" type="bigint" default="(-1)"/>
    <column name="deleted" type="bpchar" default="'u'::bpchar"/>
    <column name="drive" type="varchar"/>
    <column name="volume" type="integer"/>
    <column name="location_cookie" type="varchar"/>
    <column name="pnfs_path" type="varchar"/>
    <column name="pnfs_id" type="varchar"/>
    <column name="sanity_size" type="bigint" default="(-1)"/>
    <column name="sanity_crc" type="bigint" default="(-1)"/>
    <column name="size" type="bigint" default="0"/>
    <column name="uid" type="integer" default="(-1)"/>
    <column name="gid" type="integer" default="(-1)"/>
    <column name="update" type="timestamp"/>
    <column name="package_id" type="varchar" size="32"/>
    <column name="active_package_files_count" type="integer"/>
    <column name="package_files_count" type="integer"/>
    <column name="cache_status" type="varchar" size="32"/>
    <column name="archive_status" type="varchar" size="32"/>
    <column name="cache_mod_time" type="timestamp"/>
    <column name="archive_mod_time" type="timestamp"/>
    <column name="cache_location" type="varchar"/>
    <column name="original_library" type="varchar"/>
    <column name="file_family_width" type="integer"/>
    <indexes>
        <index name="file_crc_idx" columns="crc"/>
        <index name="file_deleted_idx" columns="deleted"/>
        <index name="file_location_cookie_idx" columns="location_cookie"/>
        <index name="file_pnfs_id_idx" columns="pnfs_id"/>
        <index name="file_pnfs_path_idx" columns="pnfs_path"/>
        <index name="file_sanity_crc_idx" columns="sanity_crc"/>
        <index name="file_sanity_size_idx" columns="sanity_size"/>
        <index name="file_size_idx" columns="size"/>
        <index name="file_volume_idx" columns="volume"/>
        <index name="package_id_fk_idx" columns="package_id"/>
        <index name="cache_status_fk_idx" columns="cache_status"/>
        <index name="archive_status_fk_idx" columns="archive_status"/>
        <index name="cache_location_idx" columns="cache_location"/>
        <index name="original_library_idx" columns="original_library"/>
        <index name="file_family_width_idx" columns="file_family_width"/>
    </indexes>
    <relations>
        <relation name="$1" column="volume" table="volume" fk="id"/>
        <relation name="package_id_fk" column="package_id" table="file" fk="bfid" ondelete="cascade"/>
        <relation name="cache_status_fk" column="cache_status" table="cache_statuses" fk="status"/>
        <relation name="archive_status_fk" column="archive_status" table="archive_statuses" fk="status"/>
    </relations>
  </table>
  <view name="cms_volume_with_only_deleted_files">
    SELECT volume.label, volume.storage_group, volume.file_family, volume.system_inhibit_1 AS state, volume.media_type, volume.library FROM volume WHERE (((((volume.storage_group)::text = 'cms'::text) AND ((volume.system_inhibit_0)::text = 'none'::text)) AND ((volume.active_files + volume.unknown_files) = 0)) AND (volume.deleted_files &gt; 0));
  </view>
  <view name="duplicates">
    SELECT m.bfid AS "primary", m.alt_bfid AS copy, f.deleted, f.pnfs_path FROM file_copies_map m, file f WHERE ((f.bfid)::text = (m.bfid)::text);
  </view>
  <view name="file2">
    SELECT file.bfid, file.crc, file.deleted, file.drive, file.volume, file.location_cookie, file.pnfs_path, file.pnfs_id, file.sanity_size, file.sanity_crc, file.size, file.uid, file.gid, CASE WHEN (file.deleted = 'y'::bpchar) THEN 1 ELSE 0 END AS n_deleted, CASE WHEN (file.deleted = 'y'::bpchar) THEN file.size ELSE (0)::bigint END AS size_deleted, CASE WHEN (file.deleted = 'n'::bpchar) THEN 1 ELSE 0 END AS n_active, CASE WHEN (file.deleted = 'n'::bpchar) THEN file.size ELSE (0)::bigint END AS size_active, CASE WHEN ((file.deleted &lt;&gt; 'y'::bpchar) AND (file.deleted &lt;&gt; 'n'::bpchar)) THEN 1 ELSE 0 END AS n_unknown, CASE WHEN ((file.deleted &lt;&gt; 'y'::bpchar) AND (file.deleted &lt;&gt; 'n'::bpchar)) THEN file.size ELSE (0)::bigint END AS size_unknown FROM file;
  </view>
  <view name="file_info">
    SELECT f.bfid, f.crc AS complete_crc, CASE WHEN (f.deleted = 'y'::bpchar) THEN 'deleted'::text WHEN (f.deleted = 'n'::bpchar) THEN 'active'::text ELSE 'unknown'::text END AS deleted, v.label AS external_label, f.location_cookie, v.storage_group, v.file_family, v.library, v.media_type, f.size, f.gid, f.uid, f.pnfs_id AS pnfsid, f.pnfs_path AS pnfs_name0, f.sanity_size, f.sanity_crc, f.drive, f.update FROM file f, volume v WHERE (f.volume = v.id);
  </view>
  <view name="remaining_blanks">
    SELECT volume.media_type, count(*) AS blanks FROM volume WHERE ((((volume.storage_group)::text = 'none'::text) AND ((volume.file_family)::text = 'none'::text)) AND ((volume.wrapper)::text = 'none'::text)) GROUP BY volume.media_type;
  </view>
  <view name="volume_summary">
    SELECT volume.label, volume.capacity_bytes, sum(file2.size) AS used, sum(file2.n_active) AS n_active, sum(file2.size_active) AS active, sum(file2.n_deleted) AS n_deleted, sum(file2.size_deleted) AS deleted, sum(file2.n_unknown) AS n_unknown, sum(file2.size_unknown) AS unknown, volume.remaining_bytes, (((volume.capacity_bytes - volume.remaining_bytes))::numeric - sum(file2.size)) AS unaccountable, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume.comment FROM file2, volume WHERE (file2.volume = volume.id) GROUP BY volume.label, volume.capacity_bytes, volume.remaining_bytes, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume.comment;
  </view>
  <view name="volume_summary2">
    SELECT volume.label, volume.capacity_bytes, sum(CASE WHEN (file.size IS NULL) THEN (0)::bigint ELSE file.size END) AS used, count(CASE WHEN (file.deleted = 'n'::bpchar) THEN 1 ELSE NULL::integer END) AS n_active, sum(CASE WHEN ((file.deleted = 'n'::bpchar) AND (file.size IS NOT NULL)) THEN file.size ELSE (0)::bigint END) AS active, count(CASE WHEN (file.deleted = 'y'::bpchar) THEN 1 ELSE NULL::integer END) AS n_deleted, sum(CASE WHEN ((file.deleted = 'y'::bpchar) AND (file.size IS NOT NULL)) THEN file.size ELSE (0)::bigint END) AS deleted, count(CASE WHEN (file.deleted = 'u'::bpchar) THEN 1 ELSE NULL::integer END) AS n_unknown, sum(CASE WHEN ((file.deleted = 'u'::bpchar) AND (file.size IS NOT NULL)) THEN file.size ELSE (0)::bigint END) AS unknown, volume.remaining_bytes, (((volume.capacity_bytes - volume.remaining_bytes))::numeric - sum(file.size)) AS unaccountable, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume.comment FROM (volume LEFT JOIN file ON ((file.volume = volume.id))) GROUP BY volume.label, volume.capacity_bytes, volume.remaining_bytes, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume.comment;
  </view>
  <view name="write_protection_audit">
    SELECT volume.id, volume.label, volume.block_size, volume.capacity_bytes, volume.declared, volume.eod_cookie, volume.first_access, volume.last_access, volume.library, volume.media_type, volume.non_del_files, volume.remaining_bytes, volume.sum_mounts, volume.sum_rd_access, volume.sum_rd_err, volume.sum_wr_access, volume.sum_wr_err, volume.system_inhibit_0, volume.system_inhibit_1, volume.si_time_0, volume.si_time_1, volume.user_inhibit_0, volume.user_inhibit_1, volume.storage_group, volume.file_family, volume.wrapper, volume.comment, volume.write_protected FROM volume WHERE ((NOT ((volume.label)::text ~~ '%.deleted'::text)) AND ((((volume.system_inhibit_1)::text &lt;&gt; 'none'::text) AND (volume.write_protected &lt;&gt; 'y'::bpchar)) OR (((volume.system_inhibit_1)::text = 'none'::text) AND (volume.write_protected &lt;&gt; 'n'::bpchar))));
  </view>
  <view name="volume_with_only_deleted_files">
    SELECT foo.label, foo.storage_group, foo.file_family, foo.state, foo.media_type, foo.library, foo.n_active, foo.n_deleted, foo.n_unknown FROM (SELECT volume.label, volume.storage_group, volume.file_family, volume.system_inhibit_1 AS state, volume.media_type, volume.library, count(CASE WHEN (file.deleted = 'n'::bpchar) THEN 1 ELSE NULL::integer END) AS n_active, count(CASE WHEN (file.deleted = 'y'::bpchar) THEN 1 ELSE NULL::integer END) AS n_deleted, count(CASE WHEN (file.deleted = 'u'::bpchar) THEN 1 ELSE NULL::integer END) AS n_unknown FROM (volume LEFT JOIN file ON ((file.volume = volume.id))) WHERE (NOT ((volume.label)::text ~~ '%.deleted'::text)) GROUP BY volume.label, volume.storage_group, volume.file_family, volume.system_inhibit_1, volume.media_type, volume.library) foo WHERE ((foo.n_active = 0) AND (foo.n_deleted &gt; 0));
  </view>
  <function name="all_deleted" arguments="integer" returns="integer" language="plpgsql">
begin
        if (select bfid from file where volume = $1 and deleted = 'n' limit 1) is null and
           (select bfid from file where volume = $1 and deleted = 'u' limit 1) is null and
           not (select bfid from file where volume = $1 and deleted = 'y' limit 1) is null
        then
                return 1;
        else
                return 0;
        end if;
end;
  </function>
  <function name="write_protect_status" arguments="varchar" returns="bpchar" language="sql">
select
    case value
        when 'ON' then 'y'
        when 'OFF' then 'n'
        else 'u'
    end
from state, state_type, volume
where
    state.type = state_type.id and
    state_type.name = 'write_protect' and
    state.volume = volume.id and
    volume.label = $1
order by time desc limit 1;
  </function>
  <function name="lookup_vol" arguments="varchar" returns="integer" language="sql">
select id from volume where label = $1;
  </function>
  <function name="bytes_deleted_last_7days" arguments="" returns="trb" language="sql">
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'DELETED' and
        state.volume = volume.id and
        time &gt;= current_date - 8 and
        time &lt; current_date
group by storage_group
order by storage_group;
  </function>
  <function name="populate_files_in_transition_table" arguments="" returns="trigger" language="plpgsql">
BEGIN
IF(TG_OP='INSERT') THEN
        IF NEW.original_library IS NOT NULL THEN
   BEGIN
INSERT INTO files_in_transition values (NEW.bfid);
   END;
        END IF;
ELSEIF (TG_OP='UPDATE') THEN
IF (OLD.bfid&lt;&gt;NEW.bfid) THEN
BEGIN
UPDATE files_in_transition set bfid=NEW.bfid where bfid=OLD.bfid;
END;
END IF;
IF (NEW.archive_status = 'ARCHIVED' OR NEW.deleted = 'y' ) THEN
BEGIN
DELETE FROM files_in_transition WHERE bfid=NEW.bfid;
END;
END IF;
IF (OLD.cache_status&lt;&gt;NEW.cache_status) THEN
   IF (NEW.cache_status = 'CACHED') THEN
      BEGIN
INSERT INTO cached_files values (NEW.bfid);
END;
   ELSE
             BEGIN
            DELETE FROM cached_files WHERE bfid=NEW.bfid;
     END;
   END IF;
        END IF;

END IF;
RETURN NEW;
END;
  </function>
  <function name="swap_package" arguments="varchar old_bfid, varchar new_bfid" returns="void" language="plpgsql">
BEGIN
      IF ( new_bfid is NULL ) THEN
          RAISE EXCEPTION 'destination package bfid is not specified';
  RETURN;
      END IF;
      select into old_record * from file where bfid=old_bfid;
      select into new_record * from file where bfid=new_bfid;
      IF ( old_record is NULL ) THEN
          RAISE EXCEPTION 'source package % does not exist', old_bfid;
  RETURN;
      END IF;
      IF ( new_record is NULL ) THEN
          RAISE EXCEPTION 'destination package % does not exist', new_bfid;
  RETURN;
      END IF;
      IF ( old_record.package_id is NULL ) THEN
          RAISE EXCEPTION '% is not a package file',old_bfid;
  RETURN;
      END IF;
      update file set package_id=new_bfid where package_id=old_bfid and package_id &lt;&gt; bfid;
      update file set package_files_count=package_files_count+old_record.package_files_count, active_package_files_count=active_package_files_count+old_record.active_package_files_count,package_id=new_bfid where bfid=new_bfid;
      update file set package_files_count=0, active_package_files_count=0 where bfid=old_bfid;
END;
  </function>
  <function name="tapes_recycled_last_7days" arguments="" returns="tr" language="sql">
select
        media_type,
        count(*)::int as recycled
from
        state,
        volume
where
        state.volume = volume.id and
        value = 'RECYCLED' and
        time &gt;= current_date - 8 and
        time &lt; current_date
group by media_type
order by media_type;
  </function>
  <function name="update_volume_file_counters" arguments="" returns="trigger" language="plpgsql">
BEGIN
IF(TG_OP='INSERT') THEN
	IF(NEW.deleted='u') THEN
		update volume set unknown_files=unknown_files+1, unknown_bytes=unknown_bytes+NEW.size,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
	ELSEIF (NEW.deleted='y') THEN
		update volume set deleted_files=deleted_files+1, deleted_bytes=deleted_bytes+NEW.size,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
	ELSEIF (NEW.deleted='n') THEN
		update volume set active_files=active_files+1, active_bytes=active_bytes+NEW.size,modification_time=LOCALTIMESTAMP(0)  where volume.id=NEW.volume;
	END IF;
ELSEIF (TG_OP='UPDATE') THEN
	delta := NEW.size-OLD.size;
	IF(NEW.deleted&lt;&gt;OLD.deleted) THEN
		IF(OLD.deleted='y') THEN
			update volume set deleted_files=deleted_files-1, deleted_bytes=deleted_bytes-OLD.size,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		ELSEIF (OLD.deleted='n') THEN
			update volume set active_files= active_files-1, active_bytes=active_bytes-OLD.size,modification_time=LOCALTIMESTAMP(0)  where volume.id=NEW.volume;
		ELSEIF (OLD.deleted='u') THEN
			update volume set unknown_files= unknown_files-1, unknown_bytes=unknown_bytes-OLD.size,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		END IF;
		IF(NEW.deleted='u') THEN
			update volume set unknown_files= unknown_files+1, unknown_bytes=unknown_bytes+OLD.size+delta,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		ELSEIF (NEW.deleted='y') THEN
			update volume set deleted_files= deleted_files+1, deleted_bytes=deleted_bytes+OLD.size+delta,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		ELSEIF (NEW.deleted='n') THEN
			update volume set active_files= active_files+1, active_bytes=active_bytes+OLD.size+delta,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		END IF;
	ELSEIF (OLD.size&lt;&gt;NEW.size) THEN
		IF(OLD.deleted='y') THEN
			update volume set deleted_bytes=deleted_bytes+delta,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		ELSEIF (OLD.deleted='n') THEN
			update volume set active_bytes=active_bytes+delta,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		ELSEIF (OLD.deleted='u') THEN
			update volume set unknown_bytes=unknown_bytes+delta,modification_time=LOCALTIMESTAMP(0) where volume.id=NEW.volume;
		END IF;
	END IF;
ELSEIF (TG_OP='DELETE') THEN
	IF(OLD.deleted='y') THEN
		update volume set  deleted_files=deleted_files-1, deleted_bytes=deleted_bytes-OLD.size,modification_time=LOCALTIMESTAMP(0)  where volume.id=OLD.volume;
	ELSEIF (OLD.deleted='n') THEN
		update volume set active_files= active_files-1, active_bytes=active_bytes-OLD.size,modification_time=LOCALTIMESTAMP(0) where volume.id=OLD.volume;
	ELSEIF (OLD.deleted='u') THEN
		update volume set unknown_files= unknown_files-1, unknown_bytes=unknown_bytes-OLD.size,modification_time=LOCALTIMESTAMP(0) where volume.id=OLD.volume;
	END IF;
	RETURN OLD;
END IF;
RETURN NEW;
END;
  </function>
  <function name="get_media_type" arguments="varchar, bigint" returns="varchar" language="plpgsql">
BEGIN
         IF  $1 = '3480' and $2 = 107374182400 THEN
         MT = 'LTO1';
         ELSEIF  $1 = '3480' and $2 = 214748364800 THEN
         MT = 'LTO2';
         ELSEIF  $1 = '3480' and $2 &lt; 100 THEN
         MT = NULL;
         ELSE
         MT=$1;
 END IF;
 return MT;
END;
  </function>
  <function name="plpgsql_call_handler" arguments="" returns="language_handler" language="c">
plpgsql_call_handler
  </function>
  <function name="plpgsql_call_handler" arguments="" returns="language_handler" language="c">
plpgsql_call_handler
  </function>
  <function name="bytes_recycled" arguments="timestamp" returns="trb" language="sql">
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'RECYCLED' and
        state.volume = volume.id and
        time &gt;= $1::timestamp
group by storage_group
order by storage_group;
  </function>
  <function name="bytes_recycled" arguments="timestamp, timestamp" returns="trb" language="sql">
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'RECYCLED' and
        state.volume = volume.id and
        time &gt;= $1::timestamp and
        time &lt; $2::timestamp
group by storage_group
order by storage_group;
  </function>
  <function name="tape_consumption" arguments="interval, bpchar" returns="tc" language="sql">
select media_type, library, storage_group, sum(volumes)
from
	(select media_type, library, storage_group, file_family,
		sum(size),
		case
			when $2 = 'r' then
				round(sum(size)/media_capacity.capacity, 5)
			else
				trunc((sum(size)-1)/media_capacity.capacity)+1
		end as volumes
	from file, volume, media_capacity
	where
		file.volume = volume.id and
		media_capacity.type = volume.media_type and
		volume.media_type != 'null' and
		bfid &gt; 'CDMS' || to_char(trunc(date_part('epoch', now() - $1)), 'FM99999999999999') || '00000' and
		bfid &lt; 'CDMS' || to_char(trunc(date_part('epoch', now() + interval '1 day')), 'FM99999999999999') || '00000'
		group by media_type, library, storage_group,
			file_family, capacity) as foo
group by media_type, library, storage_group;
  </function>
  <function name="bytes_deleted" arguments="timestamp" returns="trb" language="sql">
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'DELETED' and
        state.volume = volume.id and
        time &gt;= $1::timestamp
group by storage_group
order by storage_group;
  </function>
  <function name="bytes_deleted" arguments="timestamp, timestamp" returns="trb" language="sql">
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'DELETED' and
        state.volume = volume.id and
        time &gt;= $1::timestamp and
        time &lt; $2::timestamp
group by storage_group
order by storage_group;
  </function>
  <function name="populate_file_table" arguments="" returns="trigger" language="plpgsql">
BEGIN
--      IF(TG_OP='INSERT') THEN
        -- NEW.cache_status='CREATED';
-- NEW.cache_mod_time=LOCALTIMESTAMP(0);
IF (TG_OP='UPDATE') THEN
        IF (OLD.cache_status&lt;&gt;NEW.cache_status) THEN
NEW.cache_mod_time=LOCALTIMESTAMP(0);
END IF;
        IF (OLD.archive_status&lt;&gt;NEW.archive_status) THEN
NEW.archive_mod_time=LOCALTIMESTAMP(0);
END IF;
IF (NEW.deleted&lt;&gt;OLD.deleted) THEN
   IF (OLD.deleted='n') THEN
      IF (NEW.deleted='y' OR NEW.deleted='u') THEN
      ---
      --- Updating package counters
      ---
      IF (OLD.bfid &lt;&gt; OLD.package_id and OLD.package_id IS NOT NULL) THEN
          BEGIN
                update file set active_package_files_count=active_package_files_count-1 where bfid=OLD.package_id;
  END;
      END IF;
      END IF;
           ELSE
      IF (NEW.deleted='n') THEN
      ---
      --- Updating package counters
      ---
      IF (OLD.bfid &lt;&gt; OLD.package_id and OLD.package_id IS NOT NULL) THEN
         BEGIN
          update file set active_package_files_count=active_package_files_count+1 where bfid=OLD.package_id;
         END;
                      END IF;
      END IF;
   END IF;
END IF;
END IF;
RETURN NEW;
END;
  </function>
  <function name="quota_alert" arguments="" returns="qa" language="sql">
select *,
	case
		when m1.days_surviving &lt; 3 then 'less than 3 days'
		when m1.days_surviving &lt; 7 then 'less than 1 week'
	end :: varchar as alert
	from
	(select *,
		trunc((m.quota - m.allocated)/(
			case
				when m.projected_daily = 0 then null
				else m.projected_daily
			end)) as days_surviving
	from
		(select
			u.media_type, u.library, u.storage_group, u.monthly,
			u.weekly, u.daily,
			case
				when u.weekly/7 &gt; u.daily or u.daily is null
					then round(u.weekly/7, 5)
				else u.daily
			end as projected_daily,
			quota.quota, sg_count.count as allocated
		from quota, sg_count,
			(select monthly.media_type, monthly.library,
				monthly.storage_group, monthly.volumes as monthly,
				dw.weekly, dw.daily
			from
				tape_consumption('1 month', 'n') as monthly
				full outer join
				(select weekly.media_type, weekly.storage_group, daily.volumes as daily , weekly.volumes as weekly
				from
					tape_consumption('1 day', 'r') as daily
					full outer join
					tape_consumption('1 week', 'r') as weekly
					on (daily.media_type = weekly.media_type and daily.storage_group = weekly.storage_group)) as dw
				on (monthly.media_type = dw.media_type and monthly.storage_group = dw.storage_group)
			order by media_type, storage_group) as u
		where
			u.library = quota.library and
			u.storage_group = quota.storage_group and
			sg_count.library = u.library and
			sg_count.storage_group = u.storage_group) as m
	) as m1;
  </function>
  <function name="plpgsql_validator" arguments="oid" returns="void" language="c">
plpgsql_validator
  </function>
  <function name="plpgsql_validator" arguments="oid" returns="void" language="c">
plpgsql_validator
  </function>
  <function name="lookup_stype" arguments="varchar" returns="integer" language="sql">
select id from state_type where name = $1;
  </function>
  <function name="set_update" arguments="" returns="trigger" language="plpgsql">
declare
begin
    new.update = now();
    return new;
end;
  </function>
  <function name="bytes_recycled_last_7days" arguments="" returns="trb" language="sql">
select
        storage_group,
        sum(size)::bigint as recycled_bytes
from
        volume,
        state left join file on (file.volume = state.volume)
where
        value = 'RECYCLED' and
        state.volume = volume.id and
        time &gt;= current_date - 8 and
        time &lt; current_date
group by storage_group
order by storage_group;
  </function>
  <function name="tapes_recycled" arguments="timestamp" returns="tr" language="sql">
select
        media_type,
        count(*)::int as recycled
from
        state,
        volume
where
        state.volume = volume.id and
        value = 'RECYCLED' and
        time &gt;= $1::timestamp
group by media_type
order by media_type;
  </function>
  <function name="tapes_recycled" arguments="timestamp, timestamp" returns="tr" language="sql">
select
        media_type,
        count(*)::int as recycled
from
        state,
        volume
where
        state.volume = volume.id and
        value = 'RECYCLED' and
        time &gt;= $1::timestamp and
        time &lt; $2::timestamp
group by media_type
order by media_type;
  </function>
</schema>
