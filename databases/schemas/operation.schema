--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: products
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: products
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_call_handler() OWNER TO enstore;

--
-- Name: plpgsql_validator(oid); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION plpgsql_validator(oid) RETURNS void
    AS '$libdir/plpgsql', 'plpgsql_validator'
    LANGUAGE c;


ALTER FUNCTION public.plpgsql_validator(oid) OWNER TO enstore;

--
-- Name: reset_job_tasks(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION reset_job_tasks() RETURNS "trigger"
    AS $$
begin
update job_definition set tasks = (select max(seq) from task where task.job_type = OLD.job_type) where job_definition.id = OLD.job_type;
return OLD;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.reset_job_tasks() OWNER TO enstore;

--
-- Name: set_job_finish(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION set_job_finish() RETURNS "trigger"
    AS $$
begin
update job set finish = (select progress.finish from progress, job, job_definition where job.id = NEW.job and progress.job = job.id and job.type = job_definition.id and job_definition.tasks = progress.task) where job.id = NEW.job;
return NEW;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.set_job_finish() OWNER TO enstore;

--
-- Name: set_job_tasks(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION set_job_tasks() RETURNS "trigger"
    AS $$
begin
update job_definition set tasks = (select max(seq) from task where task.job_type = NEW.job_type) where job_definition.id = NEW.job_type;
return NEW;
end;
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.set_job_tasks() OWNER TO enstore;

SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: job; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE job (
    id integer DEFAULT nextval(('job_id'::text)::regclass) NOT NULL,
    name character varying NOT NULL,
    "type" integer NOT NULL,
    "start" timestamp without time zone DEFAULT now(),
    finish timestamp without time zone,
    "comment" character varying
);


ALTER TABLE public.job OWNER TO enstore;

--
-- Name: job_definition; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE job_definition (
    id integer DEFAULT nextval(('job_definition_id'::text)::regclass) NOT NULL,
    name character varying NOT NULL,
    tasks integer DEFAULT 0,
    remarks character varying
);


ALTER TABLE public.job_definition OWNER TO enstore;

--
-- Name: job_definition_id; Type: SEQUENCE; Schema: public; Owner: enstore
--

CREATE SEQUENCE job_definition_id
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.job_definition_id OWNER TO enstore;

--
-- Name: job_id; Type: SEQUENCE; Schema: public; Owner: enstore
--

CREATE SEQUENCE job_id
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.job_id OWNER TO enstore;

--
-- Name: object; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE "object" (
    job integer NOT NULL,
    "object" character varying,
    association character varying
);


ALTER TABLE public."object" OWNER TO enstore;

--
-- Name: progress; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE progress (
    job integer NOT NULL,
    task integer NOT NULL,
    "start" timestamp without time zone DEFAULT now(),
    finish timestamp without time zone,
    "comment" character varying,
    args character varying,
    result character varying
);


ALTER TABLE public.progress OWNER TO enstore;

--
-- Name: task; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE task (
    id integer DEFAULT nextval(('task_id'::text)::regclass) NOT NULL,
    seq integer NOT NULL,
    job_type integer NOT NULL,
    dsc character varying,
    "action" character varying,
    "comment" character varying,
    auto_start character(1) DEFAULT 'm'::bpchar
);


ALTER TABLE public.task OWNER TO enstore;

--
-- Name: task_id; Type: SEQUENCE; Schema: public; Owner: enstore
--

CREATE SEQUENCE task_id
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.task_id OWNER TO enstore;

--
-- Name: job_definition_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY job_definition
    ADD CONSTRAINT job_definition_pkey PRIMARY KEY (id);


--
-- Name: job_name_key; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY job
    ADD CONSTRAINT job_name_key UNIQUE (name);


--
-- Name: job_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY job
    ADD CONSTRAINT job_pkey PRIMARY KEY (id);


--
-- Name: progress_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY progress
    ADD CONSTRAINT progress_pkey PRIMARY KEY (job, task);


--
-- Name: task_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY task
    ADD CONSTRAINT task_pkey PRIMARY KEY (seq, job_type);


--
-- Name: job_definition_name_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX job_definition_name_idx ON job_definition USING btree (name);


--
-- Name: job_finish_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX job_finish_idx ON job USING btree (finish);


--
-- Name: job_name_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX job_name_idx ON job USING btree (name);


--
-- Name: job_start_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX job_start_idx ON job USING btree ("start");


--
-- Name: job_type_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX job_type_idx ON job USING btree ("type");


--
-- Name: object_job_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX object_job_idx ON "object" USING btree (job);


--
-- Name: object_object_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX object_object_idx ON "object" USING btree ("object");


--
-- Name: progress_job_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX progress_job_idx ON progress USING btree (job);


--
-- Name: progress_start_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX progress_start_idx ON progress USING btree ("start");


--
-- Name: progress_set_job_finish_trigger; Type: TRIGGER; Schema: public; Owner: enstore
--

CREATE TRIGGER progress_set_job_finish_trigger
    AFTER UPDATE ON progress
    FOR EACH ROW
    EXECUTE PROCEDURE set_job_finish();


--
-- Name: reset_job_task_trigger; Type: TRIGGER; Schema: public; Owner: enstore
--

CREATE TRIGGER reset_job_task_trigger
    AFTER DELETE ON task
    FOR EACH ROW
    EXECUTE PROCEDURE reset_job_tasks();


--
-- Name: set_job_task_trigger; Type: TRIGGER; Schema: public; Owner: enstore
--

CREATE TRIGGER set_job_task_trigger
    AFTER INSERT ON task
    FOR EACH ROW
    EXECUTE PROCEDURE set_job_tasks();


--
-- Name: job_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY job
    ADD CONSTRAINT job_type_fkey FOREIGN KEY ("type") REFERENCES job_definition(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: object_job_fkey; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY "object"
    ADD CONSTRAINT object_job_fkey FOREIGN KEY (job) REFERENCES job(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: progress_job_fkey; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY progress
    ADD CONSTRAINT progress_job_fkey FOREIGN KEY (job) REFERENCES job(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: task_job_type_fkey; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY task
    ADD CONSTRAINT task_job_type_fkey FOREIGN KEY (job_type) REFERENCES job_definition(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

