#!/bin/sh

# This script creates an empty $1 from scratch:
# 1. rename current database area, if exists
# 2. create directory for database area
# 3. initialize database area
# 4. copy appropriate pg_hba.conf from $ENSTORE_DIR/databases/control_files
# 5. start up databse server
# 6. create users "enstore" and "enstore_reader"
# 7. create database owned by user $dbowner
# 8. create schema from $ENSTORE_DIR/databases/schemas/enstoredb.schema

# must be root
if [ "`whoami`" != "root" ]
then
	echo "must run as root"
fi

# find the host
host=`uname -n | cut -d. -f1`

# setup enstore
#. /usr/local/etc/setups.sh
#setup enstore

enstore_dir=${ENSTORE_DIR}
database_scripts=$enstore_dir/databases/scripts
extract_config=$enstore_dir/external_distr/extract_config_parameters.py

case $1 in
	enstoredb)
		database_area=`$extract_config database | grep dbarea | cut -d: -f 2`
		db_name=`$extract_config database | grep dbname | cut -d: -f 2`
		db_port=`$extract_config database | grep dbport | cut -d: -f 2`
		database_owner=`$extract_config database | grep dbserverowner | cut -d: -f 2`
		db_owner=`$extract_config database | grep dbuser | cut -d: -f 2`
		db_schema=$enstore_dir/databases/schemas/enstoredb.schema
		;;
	accounting)
		database_area=`$extract_config accounting_server | grep dbarea | cut -d: -f 2`
		db_name=`$extract_config accounting_server | grep dbname | cut -d: -f 2`
		db_port=`$extract_config accounting_server | grep dbport | cut -d: -f 2`
		database_owner=`$extract_config accounting_server | grep dbserverowner | cut -d: -f 2`
		db_owner=`$extract_config accounting_server | grep dbuser | cut -d: -f 2`
		db_schema=$enstore_dir/databases/schemas/accounting.schema
		;;
	drivestat)
		database_area=`$extract_config drivestat_server | grep dbarea | cut -d: -f 2`
		db_name=`$extract_config drivestat_server | grep dbname | cut -d: -f 2`
		db_port=`$extract_config drivestat_server | grep dbport | cut -d: -f 2`
		database_owner=`$extract_config drivestat_server | grep dbserverowner | cut -d: -f 2`
		db_owner=`$extract_config drivestat_server | grep dbuser | cut -d: -f 2`
		db_schema=$enstore_dir/databases/schemas/drivestat.schema
		;;
	*)
		echo usage: $0 "enstoredb|accounting|drivestat"
		exit 0
esac

# check parameters

echo enstore_dir = $enstore_dir
echo database_scripts = $database_scripts
echo extract_config = $extract_config
echo database_area = $database_area
echo db_name = $db_name
echo db_port = $db_port
echo database_owner = $database_owner
echo db_owner = $db_owner
echo db_schema = $db_schema

# check if $database_area exist. If so, rename it

if [ -d $database_area ]
then
	echo $database_area exists, rename it
	dest=$database_area.`date +%F.%T`
	echo mv $database_area $dest
	mv $database_area $dest
fi

# create initial database area
echo create database area $database_area
echo mkdir -p $database_area
mkdir -p $database_area
echo chown $database_owner.$database_owner $database_area
chown $database_owner.$database_owner $database_area
echo chmod go-rwx $database_area
chmod go-rwx $database_area
echo su $database_owner -c \"initdb -D $database_area\"
su $database_owner -c "initdb -D $database_area"

#  modify create pg_hba.conf

case $host in
	stkensrv0|cdfensrv0|d0ensrv0)
		hba_file=$enstore_dir/databases/control_files/pg_hba.conf-$host-$1
		echo su $database_owner cp \"$hba_file $database_area/pg_hba.conf\"
		su $database_owner -c "cp $hba_file $database_area/pg_hba.conf"
		;;
	*)
		# modify pg_hba.conf in place
		for i in `/sbin/ifconfig | grep "inet addr:" | grep -v 127.0.0.1 | awk '{print $2}' | cut -d":" -f 2`
		do
			echo "host $db_name enstore $i/24 trust" >> $database_area/pg_hba.conf
		done
		;;
esac

# bring up database server
echo su $database_owner -c \"postmaster -D $database_area -p $db_port -i \&\"
su $database_owner -c "postmaster -D $database_area -p $db_port -i &"

# wait for database server startup
echo waiting for database server to start up
sleep 10

# create user enstore
#
# This is a little bit different in batch mode
echo su $database_owner createuser -p $db_port -d -S -R -P enstore 
su $database_owner -c "psql template1 -p $db_port -c \"create user enstore password 'enstore_user' createdb;\""
echo su $database_owner createuser -p $db_port -d -S -R -P enstore_reader
su $database_owner -c "psql template1 -p $db_port -c \"create user enstore_reader password 'enstore_user';\""

# create database
echo su $db_owner createdb -p $db_port $db_name
su $db_owner -c "createdb -p $db_port $db_name"

# # create languages for enstoredb
# echo su $database_owner -c \"createlang -p $db_port plpgsql $db_name\"
# su $database_owner -c "createlang -p $db_port plpgsql $db_name"
# echo su $database_owner -c \"createlang -p $db_port c $db_name\"
# su $database_owner -c "createlang -p $db_port c $db_name"

# create schemas
echo su $database_owner psql -p $db_port $db_name -f $db_schema
su $database_owner -c "psql -p $db_port $db_name -f $db_schema"

# take care of aux directories for enstoredb
if [ "$1" == "enstoredb" ]
then
	jou_dir=`$extract_config database | grep jou_dir | cut -d: -f 2`
	db_dir=`$extract_config database | grep db_dir | cut -d: -f 2`
	if [ -d $jou_dir ]
	then
		echo $jou_dir exists
	else
		echo mkdir -p $jou_dir
		mkdir -p $jou_dir
		echo chown $db_owner $jou_dir
		chown $db_owner $jou_dir
	fi
	if [ -d $db_dir ]
	then
		echo $db_dir exists
	else
		echo mkdir -p $db_dir
		mkdir -p $db_dir
		echo chown $db_owner $db_dir
		chown $db_owner $db_dir
	fi
fi

