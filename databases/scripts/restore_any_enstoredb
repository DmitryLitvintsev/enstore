#!/bin/sh

# This script restores enstoredb from latest backup

enstore_dir=${ENSTORE_DIR}
database_area=/diskb/enstore-db
database_scripts=$enstore_dir/databases/scripts
database_owner=products
db_name=enstoredb
db_owner=enstore
db_port=8848
db_startup_script=$database_scripts/enstore-db
db_schema=$enstore_dir/databases/schemas/enstoredb.schema
tmp=/tmp
restore_tmp=/diskb/DBRESTORE
db_dump_file=enstoredb.dmp

# find the host
host=`uname -n | cut -d. -f1`

case $host in
        stkensrv0|cdfensrv0|d0ensrv0)
		echo "Can not run this on production system!"
		exit
esac

cluster=$1

# must have cluster name
if [ "$cluster" == "" ]
then
	echo "usage: $0 stken|d0en|cdfen"
	exit
fi

case $cluster in
	stken)
		backup_host=stkensrv3n.fnal.gov
		backup_dir=/srv3/enstore/backups/enstore-backup
		;;
	cdfen)
		backup_host=cdfensrv3n.fnal.gov
		backup_dir=/srv3/enstore/backups/enstore-backup
		;;
	d0en)
		backup_host=d0ensrv3n.fnal.gov
		backup_dir=/srv3/enstore/backups/enstore-backup
		;;
	*)
		backup_host=cdfensrv3n.fnal.gov
		backup_dir=/srv3/enstore/backups/enstore-backup
		;;
esac

# need to setup enstore first
if [ "$enstore_dir" == "" ]
then
	echo "need to set up enstore first"
	exit
fi

# must be root
if [ "`whoami`" != "root" ]
then
	echo "must run as root"
	exit 0
fi

# retriving backup

archive=`rsh $backup_host "ls -dt $backup_dir/dbase.* | head -1"`
echo archive=$backup_host:$archive

# check if $restore_tmp exist. If so, rename it

if [ -d $restore_tmp ]
then
	echo $restore_tmp exists, rename it
	dest=$restore_tmp.`date +%F.%T`
	echo mv $restore_tmp $dest
	mv $restore_tmp $dest
fi

# create restore_tmp
echo mkdir -p $restore_tmp
mkdir -p $restore_tmp

# retrieve backup
echo retrieving backup
echo rcp "$backup_host:$archive/*" $restore_tmp
rcp "$backup_host:$archive/*" $restore_tmp

# check if $database_area exist. If so, rename it

echo "creating new database area"

if [ -d $database_area ]
then
	echo $database_area exists
	echo "try shutting down existing database server, if any"
	echo kill \`head -1 $database_area/postmaster.pid\`
	kill `head -1 $database_area/postmaster.pid`
	echo renaming $database_area
	dest=$database_area.`date +%F.%T`
	echo mv $database_area $dest
	mv $database_area $dest
fi

# create initial database area
echo create database area $database_area
echo mkdir -p $database_area
mkdir -p $database_area
echo chown $database_owner.$database_owner $database_area
chown $database_owner.$database_owner $database_area
echo chmod go-rwx $database_area
chmod go-rwx $database_area
echo su $database_owner -c \"initdb -D $database_area\"
su $database_owner -c "initdb -D $database_area"

# bring up database server
echo su $database_owner -c \"postmaster -D $database_area -p $db_port \&\"
su $database_owner -c "postmaster -D $database_area -p $db_port &"
# echo su $database_owner -c "$db_startup_script start"
# su $database_owner -c "$db_startup_script start"

echo waiting for database server to start up
sleep 10

# create user enstore
#
# This is a little bit different in batch mode
echo su $database_owner createuser -p $db_port -d -S -R -P enstore 
su $database_owner -c "psql template1 -p $db_port -c \"create user enstore password 'enstore_user' createdb;\""

# create user enstore_reader
#
# This is a little bit different in batch mode
echo su $database_owner createuser -p $db_port -d -S -R -P enstore_reader
su $database_owner -c "psql template1 -p $db_port -c \"create user enstore_reader password 'enstore_user';\""

# create database enstoredb
echo su $db_owner createdb -p $db_port $db_name
su $db_owner -c "createdb -p $db_port $db_name"

# restore database from backup
echo "restoring database from backup ..."
echo su $database_owner -c \"pg_restore -p $db_port -d $db_name $restore_tmp/$db_dump_file\"
su $database_owner -c "pg_restore -p $db_port -d $db_name $restore_tmp/$db_dump_file"

echo "enstoredb is up and running ..."
echo "database area is " $database_area
echo "database port is " $db_port
