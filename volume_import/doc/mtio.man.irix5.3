


MMMMTTTTIIIIOOOO((((7777))))								       MMMMTTTTIIIIOOOO((((7777))))



NNNNAAAAMMMMEEEE
     mtio - magnetic tape interface

DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
     Mtio describes the	generic	interface provided for dealing with the
     various types of magnetic tape drives supported on	SGI machines.  1/4"
     (QIC) cartridge tapes, 1/2" nine-track tapes, 8 mm	video tapes, DLT, NTP,
     STK 9490, STK SD3 and DAT (digital	audio tapes) are supported. (Not all
     machines support all tapedrives.)

     Tape drives are accessed through special device files in the /_d_e_v/_m_t/*
     and /_d_e_v/_r_m_t/* directory.	The _m_t directory is a link to the _r_m_t
     directory for ease	of porting; the	block interface	sometimes associated
     with the devices in _m_t is not supported under IRIX.  Refer	to _i_n_t_r_o(7)
     for a general description of the naming conventions for device files in
     theses subdirectories. Naming conventions for the specific	devices	are
     listed under _t_p_s(7), _j_a_g_t_a_p_e(7), and _x_m_t(7).

     Normally the device specific name is linked to a user friendly synonym
     for ease of use. Many commands that manipulate magnetic tape refer	to
     these synonyms rather than	device specific	names.	There are up to	four
     user friendly device synonyms:

     ////ddddeeeevvvv////ttttaaaappppeeee		 This is the tape unit that is the default system tape
			 drive.	 It is linked to one of	the specific device
			 names in /_d_e_v/_r_m_t.  This device rewinds the tape when
			 closed.  For QIC tapes, the devices linked to
			 ////ddddeeeevvvv////ttttaaaappppeeee do software byte swapping to	be compatible
			 with the Iris 2000 and	3000 series machines; the
			 non-byte swapping device is also available, and
			 should	almost always be used for all tape types other
			 than QIC.

     ////ddddeeeevvvv////nnnnrrrrttttaaaappppeeee	 Same as ////ddddeeeevvvv////ttttaaaappppeeee, except the tape is not rewound
			 when closed.

     ////ddddeeeevvvv////ttttaaaappppeeeennnnssss	 Same as ////ddddeeeevvvv////ttttaaaappppeeee, except no byte swapping is done;
			 normally created only for QIC tapes.

     ////ddddeeeevvvv////nnnnrrrrttttaaaappppeeeennnnssss	 Same as ////ddddeeeevvvv////nnnnrrrrttttaaaappppeeee, except no	byte swapping is done;
			 normally created only for QIC tapes.

     See the (unfortunately somewhat confusing)	script ////ddddeeeevvvv////MMMMAAAAKKKKEEEEDDDDEEEEVVVV for
     details of	which devices are linked to /dev/tape for each tape type.  In
     particular, look at the _t_a_p_e_l_i_n_k_s target for the default links.  Also be
     aware that	if a /dev/tape exists as a link	to a valid tape	device,	it is
     left as is, in order to preserve local changes.

     Note that even the	norewind tape devices may be rewound by	the system, in
     some cases.  In particular, all tapes are rewound on first	use after a
     system boot, and when detected by the driver, are rewound after the tape
     has been changed.	DAT drives are also rewound when the drive is switched



									PPPPaaaaggggeeee 1111






MMMMTTTTIIIIOOOO((((7777))))								       MMMMTTTTIIIIOOOO((((7777))))



     between audio and data modes.  This means that if you wish	to append a
     new dataset to a tape that	already	contains datasets, you should always
     issue the 'mt feom' command AFTER loading the tape, just prior to using
     the program that will append to the tape.	One should not count on	a tape
     remaining at EOD, just because that is where it was before	it was
     removed.

     The system	makes it possible to treat the tape similar to any other file,
     with some restrictions on data alignment and request sizes.  Seeks	do not
     have their	usual meaning (i.e., they are ignored) and it is not possible
     to	read or	write other than a multiple of the fixed block size when using
     the fixed block device.  Writing in very small blocks (less than 4096
     bytes) is inadvisable because this	tends to consume more tape (create
     large record gaps verses data for 9 track,	and may	pad to a device
     specific boundary for others, such	as 8mm if the drive isn't kept
     streaming); it may	also cause the tape to stop its' streaming motion,
     increasing	wear on	the drive, and decreasing throughput.

     The standard QIC tape consists of a series	of 512 byte records terminated
     by	an end-of-file.	 Other tape devices (such as 9 track, 8	mm, and	DAT)
     typically support both fixed size block format, and variable size blocks
     format.  (Note: the _x_m_t(7M) driver	supports only the variable format.)

     When using	the variable format, there is an upper limit to	the size of a
     single read or write, typically the size of the RAM buffer	on the drive.
     At	this time, the upper limit is 64K bytes	on 9 track, and	240K bytes on
     the 8 mm drives.  This information	may be obtained	by use of the
     MMMMTTTTIIIIOOOOCCCCGGGGEEEETTTTBBBBLLLLKKKKIIIINNNNFFFFOOOO ioctl (for	SCSI tape drives only).	 The main use of this
     format is to allow	small header blocks at the beginning of	a tape file,
     while the rest are	typically the same (larger) size.

     When the fixed block size device is used, the size	of a single read or
     write request is limited only by physical memory.	Currently the default
     size is 1024 bytes	on 8 mm, and 512 bytes for all others.	 This size may
     be	reset with the MTSCSI_SETFIXED ioctl or	the 'mt	setblksz XXX' command;
     the value remains set until the next boot or reset	via ioctl.  If the
     variable blocksize	device is used,	the block size will revert to the
     default on	the next use of	the fixed blocksize device.  The default fixed
     blocksize for the _t_p_s and _j_a_g_t_a_p_e drivers is set from the table in	the
     /_v_a_r/_s_y_s_g_e_n/_m_a_s_t_e_r._d/_s_c_s_i file, as	are the	drive types, based on the
     inquiry data returned by the drive.

     A tape is normally	open for reading and/or	writing, but a tape cannot be
     read and written simultaneously.  After a rewind, a space,	an unload, or
     an	MTAFILE	ioctl, writes may follow reads and vice-versa, otherwise only
     reads, or only writes may be done unless the tape is first	closed;
     performing	an MTWEOF ioctl	is considered to be a write operation in this
     sense; after reading, an MTWEOF will not be allowed unless	one of the
     operations	above is first executed, or the	tapedrive is closed and
     reopened.





									PPPPaaaaggggeeee 2222






MMMMTTTTIIIIOOOO((((7777))))								       MMMMTTTTIIIIOOOO((((7777))))



     Whenever the tape is closed after being written to, a file-mark is
     written (2	on 9 track tapes) unless the tape has been unloaded or rewound
     just prior	to the close; if the last operation before the close is	an
     MTWEOF, no	additional filemarks will be written at	close.

     Some tape drives support more than	one speed; for SCSI 9 track tape
     drives, the default is 100	ips (streaming mode); this may be set to 50
     ips by using the MTSCSI_SPEED ioctl.  Some	tape drives such as the
     Kennedy 96XX models do auto density select	when reading; this can be
     disabled only by using the	drive's	front panel setup mode.

     The MMMMTTTTAAAANNNNSSSSIIII	ioctl allows writing of	ANSI 3.27 style	labels after the early
     warning point (naturally, drives that don't support variable sized	blocks
     won't support 80 byte labels).  It	is currently implemented only for SCSI
     tape drives.  It remains set until	the next close,	or reset with a	0
     argument.	If used, standard SGI EOT handling for tar, bru, and cpio
     won't work	correctly while	set.  An arg of	1 enables, 0 disables.	NOTE:
     when the EOT marker is encountered, the current i/o operation returns
     either a short count (if any i/o completed), or -1	(if no i/o completed);
     it	is the programmers responsibility to determine if EOT has been
     encountered by using MTIOCGET or logic internal to	the program.  This
     ioctl should be issued AFTER encountering EOT, if ANSI 3.27 EOT handling
     is	desired.  Subsequent i/o's will	then be	allowed, and will return the
     count actually transferred, or -1 if the drive was	unable to transfer any
     data.  The	standard calls for writing a FM	before the label.  If this is
     not done, the drive may return label info as data.

     Two flags,	returned in the	mt_dposn field of the mtset struct after a
     call to MMMMTTTTIIIIOOOOCCCCGGGGEEEETTTT,,,, are provided for	the purpose of determining whether a
     logical-end-of-tape (LEOT,	encountered at the early-warning point)	or a
     physical-end-of-tape (PEOT) has been encountered; MT_EW and MT_EOT. With
     MTANSI reset, writing is permitted	from BOT to LEOT at which point	both
     MT_EW and MT_EOT and set. If MTANSI is now	set, MT_EOT is reset (MT_EW
     remains set) and writing is permitted until PEOT is encountered, at which
     point MT_EOT is again set and remains set until the tape is repositioned
     backward.

IIIIOOOOCCCCTTTTLLLL OOOOPPPPEEEERRRRAAAATTTTIIIIOOOONNNNSSSS
     Different drivers and drives support different tape commands, in the form
     of	ioctl's.  These	operations and their structures	are defined in the
     file /_u_s_r/_i_n_c_l_u_d_e/_s_y_s/_m_t_i_o._h, which has fairly extensive comments.	 All
     drivers support some common definitions of	tape status via	the MMMMTTTTIIIIOOOOCCCCGGGGEEEETTTT
     ioctl; in particular, the bits defined for	the _m_t__d_p_o_s_n field of the
     _m_t_g_e_t structure are the same for all the IRIX devices. other fields are
     driver specific, and the appropriate header files should be consulted for
     the meaning of these fields.

     Those ioctls that are not supported for a particular drive	or driver will
     normally return EINVAL.  For example, the MMMMTTTTAAAAFFFFIIIILLLLEEEE ioctl will return
     EINVAL if the tape	drive is not a device that supports overwrite
     (currently	only 9 track and DAT), since QIC and 8mm drives	only allow
     appending at EOD, and, for	8mm, from the BOT side of a FM.



									PPPPaaaaggggeeee 3333






MMMMTTTTIIIIOOOO((((7777))))								       MMMMTTTTIIIIOOOO((((7777))))



NNNNOOOOTTTTEEEESSSS
     When a tape device	is opened, the tape is rewound if there	has been a
     media change, or the drive	has gone offline, or there has been a bus
     reset (normally only after	a reboot or powerup); otherwise	the tape
     remains at	the same position as at	the previous close.  See the specific
     driver manual pages for more details.

EEEEXXXXAAAAMMMMPPPPLLLLEEEE
     The following code	fragment will open the default no rewind tape device,
     position it to the	2nd filemark, and then rewind it.

	#include <sys/types.h>
	#include <sys/mtio.h>
	main()
	{
		struct mtop op;
		int fd;

		if((fd = open("/dev/nrtape", 0)) == -1)
			perror("can't open /dev/tape");

		op.mt_op = MTFSF;
		op.mt_count = 2;
		if(ioctl(fd, MTIOCTOP, &op) == -1)
			perror("ioctl to skip 2	FMs fails");

		op.mt_op = MTREW;
		if(ioctl(fd, MTIOCTOP, &op) == -1)
			perror("ioctl to rewind	fails");
	}


FFFFIIIILLLLEEEESSSS
     /dev/tape,	/dev/nrtape, /dev/tapens, /dev/nrtapens
     /dev/rmt/*

SSSSEEEEEEEE AAAALLLLSSSSOOOO
     bru(1), cpio(1), mt(1), tar(1), MAKEDEV(1m) rmtops(3), dataudio(3),
     datframe(4), tps(7M), xmt(7M), jagtape(7M),
















									PPPPaaaaggggeeee 4444



