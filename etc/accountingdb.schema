--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: products
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: 
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: bd; Type: TYPE; Schema: public; Owner: enstore
--

CREATE TYPE bd AS (
	media_type character varying,
	blanks_drawn integer
);


--
-- Name: daily_xfer_size; Type: TYPE; Schema: public; Owner: enstore
--

CREATE TYPE daily_xfer_size AS (
	date date,
	storage_group character varying,
	"read" bigint,
	"write" bigint
);


--
-- Name: ts; Type: TYPE; Schema: public; Owner: enstore
--

CREATE TYPE ts AS (
	storage_group character varying,
	total bigint,
	"read" bigint,
	"write" bigint
);


--
-- Name: blanks_drawn(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION blanks_drawn(date) RETURNS SETOF bd
    AS $_$
select
    a.media_type, a.blanks - b.blanks as blanks_drawn
from
    blanks_of_day($1::date) a,
    blanks_of_day(current_date) b
where
    a.media_type = b.media_type;
$_$
    LANGUAGE sql;


--
-- Name: blanks_drawn(date, date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION blanks_drawn(date, date) RETURNS SETOF bd
    AS $_$
select
    a.media_type, a.blanks - b.blanks as blanks_drawn
from
    blanks_of_day($1::date) a,
    blanks_of_day($2::date) b
 where
    a.media_type = b.media_type;
$_$
    LANGUAGE sql;


--
-- Name: blanks_drawn_last_7days(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION blanks_drawn_last_7days() RETURNS SETOF bd
    AS $$
select
    a.media_type, a.blanks - b.blanks as blanks_drawn
from
    blanks_of_day(current_date - 7) a,
    blanks_of_day(current_date) b
where
    a.media_type = b.media_type;
 $$
    LANGUAGE sql;


SET default_tablespace = '';

SET default_with_oids = true;

--
-- Name: blanks; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE blanks (
    date timestamp without time zone NOT NULL,
    media_type character varying NOT NULL,
    blanks integer
);


--
-- Name: blanks_of_day(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION blanks_of_day(date) RETURNS SETOF blanks
    AS $_$
select
    *
from
    blanks
where
    date = (select min(date) from blanks where date >= $1::date and date < $1::date + '1 day'::interval);
$_$
    LANGUAGE sql;


--
-- Name: xfer_count_by_day; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE xfer_count_by_day (
    date date,
    storage_group character varying,
    n_read bigint,
    n_write bigint
);


--
-- Name: daily_count(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION daily_count(date) RETURNS SETOF xfer_count_by_day
    AS $_$
select
    $1::date,
    storage_group,
    sum(case when rw='r' then 1 else 0 end)::bigint as n_read,
    sum(case when rw='w' then 1 else 0 end)::bigint as n_write
from
    encp_xfer
where
    date >= $1 and date < $1 + 1
group by storage_group;
$_$
    LANGUAGE sql;


--
-- Name: xfer_by_day; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE xfer_by_day (
    date date NOT NULL,
    storage_group character varying NOT NULL,
    "read" bigint,
    "write" bigint,
    n_read bigint,
    n_write bigint
);


--
-- Name: daily_size(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION daily_size(date) RETURNS SETOF xfer_by_day
    AS $_$
select
    $1::date,
    storage_group,
    sum(case when rw='r' then size else 0 end)::bigint as read,
    sum(case when rw='w' then size else 0 end)::bigint as write,
    sum(case when rw='r' then 1 else 0 end)::bigint as n_read,
    sum(case when rw='w' then 1 else 0 end)::bigint as n_write
from
    encp_xfer
where
    date >= $1 and date < $1 + 1
group by storage_group;
$_$
    LANGUAGE sql;


--
-- Name: xfer_by_day_by_mover; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE xfer_by_day_by_mover (
    date date NOT NULL,
    mover character varying NOT NULL,
    "read" bigint,
    "write" bigint
);


--
-- Name: daily_size_by_mover(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION daily_size_by_mover(date) RETURNS SETOF xfer_by_day_by_mover
    AS $_$
select
    $1::date,
    rtrim(mover, '.mover') as mover,
    sum(case when rw='r' then size else 0 end)::bigint as read,
    sum(case when rw='w' then size else 0 end)::bigint as write
from
    encp_xfer
where
    date >= $1 and date < $1 + 1
group by rtrim(mover, '.mover');
$_$
    LANGUAGE sql;


--
-- Name: data_transfer(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION data_transfer(timestamp without time zone) RETURNS SETOF ts
    AS $_$
select
        storage_group,
        sum(size)::bigint as total,
        sum(case
                when rw = 'r' then size
                else 0
        end)::bigint as read,
        sum(case
                when rw = 'w' then size
                else 0
        end)::bigint as write
from
        encp_xfer
where
        date >= $1::timestamp
group by storage_group
order by storage_group;
$_$
    LANGUAGE sql;


--
-- Name: data_transfer(timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION data_transfer(timestamp without time zone, timestamp without time zone) RETURNS SETOF ts
    AS $_$
select
        storage_group,
        sum(size)::bigint as total,
        sum(case
                when rw = 'r' then size
                else 0
        end)::bigint as read,
        sum(case
                when rw = 'w' then size
                else 0
        end)::bigint as write
from
        encp_xfer
where
        date >= $1::timestamp and date < $2::timestamp
group by storage_group
order by storage_group;
$_$
    LANGUAGE sql;


--
-- Name: data_transfer_last_7days(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION data_transfer_last_7days() RETURNS SETOF ts
    AS $$
select
        storage_group,
        sum(size)::bigint as total,
        sum(case
                when rw = 'r' then size
                else 0
        end)::bigint as read,
        sum(case
                when rw = 'w' then size
                else 0
        end)::bigint as write
from
        encp_xfer
where
        date >= current_date - 8 and
        date < current_date
group by storage_group
order by storage_group;
$$
    LANGUAGE sql;


--
-- Name: make_daily_xfer_count(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION make_daily_xfer_count() RETURNS date
    AS $$
declare
    day date;
begin
    day = (select max(date) from xfer_count_by_day) + 1;
    while day < current_date loop
        insert into xfer_count_by_day select * from daily_count(day);
        day = day + 1;
    end loop;
    return day;
end;
$$
    LANGUAGE plpgsql;


--
-- Name: make_daily_xfer_size(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION make_daily_xfer_size() RETURNS date
    AS $$
declare
    day date;
begin
    day = (select max(date) from xfer_by_day) + 1;
    while day < current_date loop
        insert into xfer_by_day select * from daily_size(day);
        day = day + 1;
    end loop;
    return day;
end;
$$
    LANGUAGE plpgsql;


--
-- Name: make_daily_xfer_size(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION make_daily_xfer_size(date) RETURNS date
    AS $_$
declare
    day date;
begin
    day = (select max(date) from xfer_by_day) + 1;
    while day < $1::date loop
        insert into xfer_by_day select * from daily_size(day);
        day = day + 1;
    end loop;
    return day;
end;
$_$
    LANGUAGE plpgsql;


--
-- Name: make_daily_xfer_size_by_mover(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION make_daily_xfer_size_by_mover(date) RETURNS date
    AS $_$
declare
    day date;
begin
    day = (select max(date) from xfer_by_day_by_mover) + 1;
    while day < $1::date loop
        insert into xfer_by_day_by_mover select * from daily_size_by_mover(day);
        day = day + 1;
    end loop;
    return day;
end;
$_$
    LANGUAGE plpgsql;


--
-- Name: make_daily_xfer_size_by_mover(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION make_daily_xfer_size_by_mover() RETURNS date
    AS $$
declare
    day date;
begin
    day = (select max(date) from xfer_by_day_by_mover) + 1;
    while day < current_date loop
        insert into xfer_by_day_by_mover select * from daily_size_by_mover(day);
        day = day + 1;
    end loop;
    return day;
end;
$$
    LANGUAGE plpgsql;


--
-- Name: make_monthly_xfer_size(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION make_monthly_xfer_size(date) RETURNS date
    AS $_$
declare
    month date;
begin
    month = (select max(date) from xfer_by_month) + '1 mons'::interval;
    while month < year_month($1::date) loop
        insert into xfer_by_month select * from monthly_size(month);
        month = month + '1 mons'::interval;
    end loop;
    return month;
end;
$_$
    LANGUAGE plpgsql;


--
-- Name: make_monthly_xfer_size(); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION make_monthly_xfer_size() RETURNS date
    AS $$
declare
    month date;
begin
    month = (select max(date) from xfer_by_month) + '1 mons'::interval;
    while month < year_month(current_date) loop
        insert into xfer_by_month select * from monthly_size(month);
        month = month + '1 mons'::interval;
    end loop;
    return month;
end;
$$
    LANGUAGE plpgsql;


--
-- Name: monthly_size(date); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION monthly_size(date) RETURNS SETOF daily_xfer_size
    AS $_$
select
    year_month(date) as date,
    storage_group,
    sum(case when rw='r' then size else 0 end)::bigint as read,
    sum(case when rw='w' then size else 0 end)::bigint as write
from
    encp_xfer
where
    date >= year_month($1) and date < year_month($1) + '1 mons'::interval
group by year_month(date), storage_group;
$_$
    LANGUAGE sql;


--
-- Name: plpgsql_call_handler(); Type: FUNCTION; Schema: public; Owner: products
--

CREATE FUNCTION plpgsql_call_handler() RETURNS language_handler
    AS '$libdir/plpgsql', 'plpgsql_call_handler'
    LANGUAGE c;


--
-- Name: plpgsql_validator(oid); Type: FUNCTION; Schema: public; Owner: products
--

CREATE FUNCTION plpgsql_validator(oid) RETURNS void
    AS '$libdir/plpgsql', 'plpgsql_validator'
    LANGUAGE c;


--
-- Name: year_month(timestamp without time zone); Type: FUNCTION; Schema: public; Owner: enstore
--

CREATE FUNCTION year_month(timestamp without time zone) RETURNS date
    AS $_$
select to_date(to_char($1, 'YYYY-MM-01'), 'YYYY-MM-DD');$_$
    LANGUAGE sql;


--
-- Name: encp_error; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE encp_error (
    date timestamp without time zone NOT NULL,
    node character varying NOT NULL,
    pid integer NOT NULL,
    username character varying NOT NULL,
    encp_id character varying,
    version character varying NOT NULL,
    "type" character varying NOT NULL,
    error character varying NOT NULL,
    src character varying,
    dst character varying,
    size bigint,
    storage_group character varying,
    file_family character varying,
    wrapper character varying,
    mover character varying,
    drive_id character varying,
    drive_sn character varying,
    rw character(1),
    volume character varying
);


--
-- Name: encp_xfer; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE encp_xfer (
    date timestamp without time zone NOT NULL,
    node character varying(32) NOT NULL,
    pid integer NOT NULL,
    username character varying(32) NOT NULL,
    src text NOT NULL,
    dst text NOT NULL,
    size bigint NOT NULL,
    rw character(1) NOT NULL,
    overall_rate bigint NOT NULL,
    network_rate bigint NOT NULL,
    drive_rate bigint NOT NULL,
    volume character varying(16) NOT NULL,
    mover character varying(32) NOT NULL,
    drive_id character varying(16) NOT NULL,
    drive_sn character varying(16) NOT NULL,
    elapsed double precision NOT NULL,
    media_changer character varying(32) NOT NULL,
    mover_interface character varying(32) NOT NULL,
    driver character varying(16) NOT NULL,
    storage_group character varying(16) NOT NULL,
    encp_ip character varying(16) NOT NULL,
    encp_id character varying(64) NOT NULL,
    disk_rate bigint,
    transfer_rate bigint,
    encp_version character varying(48),
    file_family character varying,
    wrapper character varying
);


--
-- Name: encp_xfer_average_by_storage_group; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE encp_xfer_average_by_storage_group (
    unix_time integer NOT NULL,
    date timestamp without time zone NOT NULL,
    from_date timestamp without time zone NOT NULL,
    to_date timestamp without time zone NOT NULL,
    storage_group character varying(16) NOT NULL,
    rw character(1) NOT NULL,
    avg_overall_rate double precision,
    avg_network_rate double precision,
    avg_disk_rate double precision,
    avg_transfer_rate double precision,
    avg_drive_rate double precision,
    avg_size double precision,
    stddev_overall_rate double precision,
    stddev_network_rate double precision,
    stddev_disk_rate double precision,
    stddev_transfer_rate double precision,
    stddev_drive_rate double precision,
    stddev_size double precision,
    counter integer
);


--
-- Name: encp_xfer_clone; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE encp_xfer_clone (
    date timestamp without time zone NOT NULL,
    overall_rate bigint NOT NULL,
    network_rate bigint NOT NULL,
    disk_rate bigint NOT NULL,
    transfer_rate bigint NOT NULL,
    drive_rate bigint NOT NULL,
    storage_group character varying(16) NOT NULL
);


--
-- Name: event; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE event (
    tag character varying(48) NOT NULL,
    name character varying(32) NOT NULL,
    node character varying(32) NOT NULL,
    username character varying(32) NOT NULL,
    "start" timestamp without time zone NOT NULL,
    finish timestamp without time zone,
    status integer,
    "comment" character varying(64)
);


--
-- Name: old_bytes_per_day; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE old_bytes_per_day (
    date date,
    "read" bigint,
    "write" bigint
);


--
-- Name: tape_mounts; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE tape_mounts (
    node character varying(32) NOT NULL,
    volume character varying(16) NOT NULL,
    "type" character varying(32) NOT NULL,
    logname character varying(16) NOT NULL,
    "start" timestamp without time zone NOT NULL,
    finish timestamp without time zone,
    state character(1) NOT NULL
);


--
-- Name: tape_mounts_tmp; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE tape_mounts_tmp (
    volume character varying(16) NOT NULL,
    state character varying(1) NOT NULL,
    id bigint
);


--
-- Name: tmp_xfer_by_day; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE tmp_xfer_by_day (
    date date NOT NULL,
    storage_group character varying NOT NULL,
    "read" bigint,
    "write" bigint
);


--
-- Name: write_protect_summary; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE write_protect_summary (
    date timestamp without time zone DEFAULT now() NOT NULL,
    total integer,
    should integer,
    not_yet integer,
    done integer
);


--
-- Name: write_protect_summary_by_library; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE write_protect_summary_by_library (
    date timestamp without time zone DEFAULT now() NOT NULL,
    library character varying NOT NULL,
    total integer,
    should integer,
    not_yet integer,
    done integer
);


--
-- Name: xfer_by_month; Type: TABLE; Schema: public; Owner: enstore; Tablespace: 
--

CREATE TABLE xfer_by_month (
    date date NOT NULL,
    storage_group character varying NOT NULL,
    "read" bigint,
    "write" bigint
);


--
-- Name: event_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY event
    ADD CONSTRAINT event_pkey PRIMARY KEY (tag);


--
-- Name: reamin_blanks_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY blanks
    ADD CONSTRAINT reamin_blanks_pkey PRIMARY KEY (date, media_type);


--
-- Name: tape_mounts_tmp_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY tape_mounts_tmp
    ADD CONSTRAINT tape_mounts_tmp_pkey PRIMARY KEY (volume, state);


--
-- Name: write_protect_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY write_protect_summary
    ADD CONSTRAINT write_protect_pkey PRIMARY KEY (date);


--
-- Name: xfer_by_date_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY xfer_by_day
    ADD CONSTRAINT xfer_by_date_pkey PRIMARY KEY (date, storage_group);


--
-- Name: xfer_by_day_by_mover_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY xfer_by_day_by_mover
    ADD CONSTRAINT xfer_by_day_by_mover_pkey PRIMARY KEY (date, mover);


--
-- Name: xfer_by_month_pkey; Type: CONSTRAINT; Schema: public; Owner: enstore; Tablespace: 
--

ALTER TABLE ONLY xfer_by_month
    ADD CONSTRAINT xfer_by_month_pkey PRIMARY KEY (date, storage_group);


--
-- Name: blanks_date_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX blanks_date_idx ON blanks USING btree (date);


--
-- Name: blanks_media_type_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX blanks_media_type_idx ON blanks USING btree (media_type);


--
-- Name: encp_xfer_average_by_storage_group_date_index; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX encp_xfer_average_by_storage_group_date_index ON encp_xfer_average_by_storage_group USING btree (date);


--
-- Name: encp_xfer_average_by_storage_group_from_date_index; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX encp_xfer_average_by_storage_group_from_date_index ON encp_xfer_average_by_storage_group USING btree (from_date);


--
-- Name: encp_xfer_average_by_storage_group_rw_index; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX encp_xfer_average_by_storage_group_rw_index ON encp_xfer_average_by_storage_group USING btree (rw);


--
-- Name: encp_xfer_average_by_storage_group_storage_group_index; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX encp_xfer_average_by_storage_group_storage_group_index ON encp_xfer_average_by_storage_group USING btree (storage_group);


--
-- Name: encp_xfer_average_by_storage_group_to_date_index; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX encp_xfer_average_by_storage_group_to_date_index ON encp_xfer_average_by_storage_group USING btree (to_date);


--
-- Name: encp_xfer_average_by_storage_group_unix_time_index; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX encp_xfer_average_by_storage_group_unix_time_index ON encp_xfer_average_by_storage_group USING btree (unix_time);


--
-- Name: error_date_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX error_date_idx ON encp_error USING btree (date);


--
-- Name: error_file_family_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX error_file_family_idx ON encp_error USING btree (file_family);


--
-- Name: error_oid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX error_oid_idx ON encp_error USING btree (oid);


--
-- Name: error_storage_group_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX error_storage_group_idx ON encp_error USING btree (storage_group);


--
-- Name: error_volume_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX error_volume_idx ON encp_error USING btree (volume);


--
-- Name: error_wrapper_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX error_wrapper_idx ON encp_error USING btree (wrapper);


--
-- Name: event_name_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX event_name_idx ON event USING btree (name);


--
-- Name: event_node_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX event_node_idx ON event USING btree (node);


--
-- Name: event_oid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX event_oid_idx ON event USING btree (oid);


--
-- Name: event_start_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX event_start_idx ON event USING btree ("start");


--
-- Name: tape_mnts_node_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX tape_mnts_node_idx ON tape_mounts USING btree (node);


--
-- Name: tape_mnts_oid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX tape_mnts_oid_idx ON tape_mounts USING btree (oid);


--
-- Name: tape_mnts_start_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX tape_mnts_start_idx ON tape_mounts USING btree ("start");


--
-- Name: tape_mnts_type_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX tape_mnts_type_idx ON tape_mounts USING btree ("type");


--
-- Name: tape_mnts_volume_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX tape_mnts_volume_idx ON tape_mounts USING btree (volume);


--
-- Name: tmt_oid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX tmt_oid_idx ON tape_mounts_tmp USING btree (oid);


--
-- Name: write_protect_summary_by_library_library_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX write_protect_summary_by_library_library_idx ON write_protect_summary_by_library USING btree (library);


--
-- Name: xfr_date_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_date_idx ON encp_xfer USING btree (date);


--
-- Name: xfr_file_family_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_file_family_idx ON encp_xfer USING btree (file_family);


--
-- Name: xfr_media_changer_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_media_changer_idx ON encp_xfer USING btree (media_changer);


--
-- Name: xfr_mover_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_mover_idx ON encp_xfer USING btree (mover);


--
-- Name: xfr_node_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_node_idx ON encp_xfer USING btree (node);


--
-- Name: xfr_oid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_oid_idx ON encp_xfer USING btree (oid);


--
-- Name: xfr_pid_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_pid_idx ON encp_xfer USING btree (pid);


--
-- Name: xfr_storage_group_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_storage_group_idx ON encp_xfer USING btree (storage_group);


--
-- Name: xfr_user_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_user_idx ON encp_xfer USING btree (username);


--
-- Name: xfr_volume_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_volume_idx ON encp_xfer USING btree (volume);


--
-- Name: xfr_wrapper_idx; Type: INDEX; Schema: public; Owner: enstore; Tablespace: 
--

CREATE INDEX xfr_wrapper_idx ON encp_xfer USING btree (wrapper);


--
-- Name: write_protect_summary_by_library_date_fkey; Type: FK CONSTRAINT; Schema: public; Owner: enstore
--

ALTER TABLE ONLY write_protect_summary_by_library
    ADD CONSTRAINT write_protect_summary_by_library_date_fkey FOREIGN KEY (date) REFERENCES write_protect_summary(date);


--
-- Name: public; Type: ACL; Schema: -; Owner: products
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM products;
GRANT ALL ON SCHEMA public TO products;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

