# Kickstart file automatically generated by anaconda.

install
lang en_US.UTF-8
langsupport --default en_US.UTF-8 en_US.UTF-8
keyboard us
mouse none
skipx
nfs --server linux.fnal.gov --dir /export/linux/lts305/i386
#network --device eth0 --bootproto static --ip 131.225.164.62 --netmask 255.255.255.0 --gateway 131.225.164.200 --nameserver 131.225.8.120 --hostname d0enload.fnal.gov
#network --device eth1 --bootproto dhcp --hostname stkenmvr12a.fnal.gov
rootpw --iscrypted $1$
firewall --disabled
authconfig --enableshadow --enablemd5 --enablekrb5 --krb5realm FNAL.GOV --krb5kdc krb-fnal-1.fnal.gov:88,krb-fnal-2.fnal.gov:88,krb-fnal-3.fnal.gov:88,krb-fnal-4.fnal.gov:88,krb-fnal-5.fnal.gov:88 --krb5adminserver krb-fnal-admin.fnal.gov
timezone America/Chicago
bootloader --location=mbr
# The following is the partition information you requested
# Note that any partitions you deleted are not expressed
# here so unless you clear all partitions first, this is
# not guaranteed to work
#clearpart --all
#part /dos --fstype vfat --start=1 --end=17 --ondisk=hda --onpart=hda1
#part swap --size=512 --start=18 --end=148  --ondisk=hda --onpart=hda2
#part / --fstype ext3 --start=149 --end=671 --ondisk=hda --onpart=hda3
#part /scratch --fstype ext3 --ondisk=hda --size=1 --grow
#part /dos --ondisk=hda --onpart=hda1
#part swap --size=1024 --ondisk=hda --onpart=hda2
#part / --ondisk=hda --onpart=hda3
#part /scratch --ondisk=hda --size=1 --grow
part /dos --onpart=hda1 --noformat
part swap --onpart=hda2
part /  --onpart=hda3
part /scratch --onpart=hda5

%packages
Fermi-release
GenericFarm-tag
GenericFarm-tree
MAKEDEV
SL_inittab_change
SysVinit
XFree86-Mesa-libGL
XFree86-libs
XFree86-libs-data
Xaw3d
acl
amanda
amanda-client
anacron
apmd
ash
at
atk
attr
authconfig
basesystem
bash
bc
beecrypt
bind-libs
bind-utils
binutils
byacc
bzip2
bzip2-libs
chkconfig
compat-db
compat-libstdc++
compat-slang
coreutils
cpio
cpp
cracklib
cracklib-dicts
crontabs
cvs
cyrus-sasl
cyrus-sasl-gssapi
cyrus-sasl-md5
cyrus-sasl-plain
db4
db4-devel
db4-utils
dev
devlabel
dhclient
diffutils
dos2unix
dosfstools
dump
e2fsprogs
e2fsprogs-devel
ed
eject
elfutils
elfutils-libelf
emacs
ethtool
expat
fbset
file
filesystem
findutils
finger
flpr
fontconfig
freetype
ftp
gawk
gcc
gcc-c++
gcc-java
gd
gdb
gdbm
gdbm-devel
gettext
glib
glib-devel
glib2
glib2-devel
glibc
glibc-common
glibc-debug
glibc-devel
glibc-headers
glibc-kernheaders
glibc-profile
glibc-utils
gmp
gnupg
gpm
grep
groff
grub
gtk2
gzip
hdparm
hesiod
hotplug
htmlview
hwdata
info
initscripts
iproute
ipsec-tools
iptables
iptables-ipv6
iputils
irda-utils
isdn4k-utils
jfsutils
jwhois
kbd
kernel
kernel-doc
kernel-pcmcia-cs
kernel-smp
kernel-utils
krb5-fermi-config
krb5-libs
krb5-libs-fermi
krb5-workstation
krb5-workstation-fermi
krbafs
kudzu
laus-libs
less
lftp
lha
libacl
libattr
libcap
libdbi
libdbi-devel
libgcc
libgcj
libgcj-devel
libjpeg
libpng
libstdc++
libstdc++-devel
libtermcap
libtermcap-devel
libtiff
libtool-libs
libungif
libuser
libwvstreams
libxml2
libxml2-python
lilo
lockdev
logrotate
logwatch
losetup
lslk
lsof
lvm
m4
mailcap
mailx
make
man
man-pages
mdadm
mgetty
mingetty
minicom
mkbootdisk
mkinitrd
mktemp
modutils
mount
mt-st
mtools
mtr
nano
nc
ncompress
ncurses
ncurses-devel
ncurses4
net-tools
netconfig
netdump
newt
nfs-utils
nscd
nss_ldap
ntp
ntsysv
openldap
openssh
openssh-clients
openssl
pam
pam_krb5
pam_smb
pango
parted
passwd
patch
pax
pciutils
pcre
pdksh
perl
perl-Filter
perl-HTML-Parser
perl-HTML-Tagset
perl-URI
perl-libwww-perl
pinfo
pkgconfig
popt
portmap
ppp
prelink
procps
psacct
psmisc
pyOpenSSL
pygtk2
python
python-optik
pyxf86config
quota
raidtools
rdate
rdist
readline
readline-devel
redhat-config-language
redhat-config-mouse
redhat-config-network-tui
redhat-config-securitylevel-tui
redhat-logos
redhat-lsb
redhat-menus
rhnlib
rhpl
rmt
rootfiles
rp-pppoe
rpm
rpm-libs
rpm-python
rsh
rsync
schedutils
sed
sendmail
sendmail-cf
sendmail-devel
sendmail-doc
setarch
setserial
setup
setuptool
shadow-utils
sharutils
slang
slang-devel
slocate
specspo
star
stunnel
sudo
symlinks
sysklogd
syslinux
sysreport
sysstat
talk
tar
tcl
tcp_wrappers
tcpdump
tcsh
telnet
termcap
tftp
time
tmpwatch
traceroute
tzdata
unix2dos
unzip
up2date
upsupdbootstrap
upsupdbootstrap-generic
usbutils
usermode
utempter
util-linux
vconfig
vim-common
vim-minimal
vixie-cron
wget
which
wireless-tools
words
wvdial
xinetd
yp-tools
ypbind
yum
yum-conf
zip
zlib
zlib-devel
zz_cups_nobrowse
zz_dhcp_resolv
zz_fermi-logos
zz_firstboot_fix
zz_lang_collate
zz_logwatch_df
zz_ntp_configure
zz_pine_user_domain
zz_sendmail_fermi_gateway
zz_tcp_wrappers_change

%pre
mkdir /tmp/save
mkdir /mnt/tmp
mount /dev/hda3 /mnt/tmp

%pre
#This is a function that will retry the copy.  We are seeing strange copy
# failures (I'm wondering if they are related to the -p option).  Hopefully
# brute force will get us past this.
copy_it ( )
{
        for i in 1 2 3 4 5 6 7 8 9 10; do
                ( cp -pr $1 $2 2>&1 ) | tee -a /tmp/save/test.log
                if [ $? -ne 0 ]; then sleep 1; continue; fi  #error
                return 0; #success
        done
        return 1;
}
#cp -pr /mnt/tmp/etc/fstab /tmp/save
#cp -pr /mnt/tmp/etc/passwd /tmp/save
#cp -pr /mnt/tmp/etc/shadow /tmp/save
#cp -pr /mtn/tmp/etc/group /tmp/save
#cp -pr /mnt/tmp/etc/sysconfig/network /tmp/save
#cp -pr /mnt/tmp/etc/sysconfig/network-scripts/ifcfg-eth0 /tmp/save
#cp -pr /mnt/tmp/etc/krb5.keytab /tmp/save
#cp -pr /mnt/tmp/root/.k5login /tmp/save/root.k5login
#cp -pr /mnt/tmp/home/enstore/.k5login /tmp/save/enstore.k5login
#cp -pr /mnt/tmp/local/ups/kt/enstorekt /tmp/save/enstorekt
#cp -pr /mnt/tmp/etc/krb5.keytab /tmp/save
copy_it /mnt/tmp/etc/fstab /tmp/save
copy_it /mnt/tmp/etc/passwd /tmp/save
copy_it /mnt/tmp/etc/shadow /tmp/save
copy_it /mnt/tmp/etc/group /tmp/save
copy_it /mnt/tmp/etc/sysconfig/network /tmp/save
copy_it /mnt/tmp/etc/sysconfig/network-scripts/ifcfg-eth0 /tmp/save
copy_it /mnt/tmp/etc/krb5.keytab /tmp/save
copy_it /mnt/tmp/root/.k5login /tmp/save/root.k5login
copy_it /mnt/tmp/home/enstore/.k5login /tmp/save/enstore.k5login
copy_it /mnt/tmp/fnal/ups/kt/enstorekt /tmp/save
copy_it /mnt/tmp/etc/rc.d/rc.local /tmp/save
cd /mnt/tmp/var/spool; tar cz cron > /tmp/save/cron.tar.gz
cd /mnt/tmp; tar cz root > /tmp/save/root.tar.gz
cd /



%pre
#
# parse the host name
#
hostname=`awk -F. '/HOSTNAME/ {print $1}' /tmp/save/network | cut -c 10-`
if [ -n $hostname ]; then
	case $hostname in
		stken*)
			system=stken
			rest=`echo $hostname | cut -c 6-`
			;;
		cdfen*)
			system=cdfen
			rest=`echo $hostname | cut -c 6-`
			;;
		d0en*)
			system=d0en
			rest=`echo $hostname | cut -c 5-`
			;;
		*)
			system=""
			rest=""
			;;
	esac

	case $rest in
		mvr*)
			type=mvr
			number=`echo $rest | cut -c 4-`
			;;
		srv*)
			type=srv
			number=`echo $rest | cut -c 4-`
			;;
		*)
			type=""
			number=""
			;;
	esac

	echo "This is the type $type and the instance $number of the $system mover."
else
	echo "Hostname not set."
	sleep 5
	exit 1
fi
sleep 5
#
# Mounting 'srv3' backup disk
#
if [ $system = "stken" ]; then
        srv3_ip=131.225.13.3
elif [ $system = "d0en" ]; then
        srv3_ip=131.225.164.23
elif [ $system = "cdfen" ]; then
        srv3_ip=131.225.215.5
else
        echo "Hostname not set."
fi
echo "  Mounting ${system}srv3 backup disk for backup."
echo "  Mounting ${system}srv3 backup disk for backup." >> /tmp/save/test.log
mkdir /mnt/backup
service portmap start
mount $srv3_ip:/diskc /mnt/backup
if [ $? -eq 0 ]; then
	echo "Done mounting backup disk."
fi
service portmap stop
df -h
#
# Backing up personality.
#
echo "Backing up personality."
mkdir -p /mnt/backup/backup/$system/$type/$number/
if [ ! -f /mnt/backup/backup/$system/$type/$number/fstab ];
	copy_it /mnt/tmp/etc/fstab /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/hostname ];
	copy_it /mnt/tmp/etc/hostname /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/passwd ];
	copy_it /mnt/tmp/etc/passwd /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/shadow ];
	copy_it /mnt/tmp/etc/shadow /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/group ];
	copy_it /mnt/tmp/etc/group /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/network ];
	copy_it /mnt/tmp/etc/sysconfig/network /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/ifcfg-eth0 ];
	copy_it /mnt/tmp/etc/sysconfig/network-scripts/ifcfg-eth0 /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/krb5.keytab ];
	copy_it /mnt/tmp/etc/krb5.keytab /mnt/backup/backup/$system/$type/$number
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/root.k5login ];
	copy_it /mnt/tmp/root/.k5login /mnt/backup/backup/$system/$type/$number/root.k5login
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/enstore.k5login ];
	copy_it /mnt/tmp/home/enstore/.k5login /mnt/backup/backup/$system/$type/$number/enstore.k5login
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/enstorekt ];
	copy_it /mnt/tmp/local/ups/kt/enstorekt /mnt/backup/backup/$system/$type/$number/
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/rc.local ];
	copy_it /mnt/tmp/etc/rc.d/rc.local /mnt/backup/backup/$system/$type/$number/
fi
echo "just before cron.tar.gz move to srv3"
if [ ! -f /mnt/backup/backup/$system/$type/$number/cron.tar.gz ];
	echo "Storing cron tarfile."
	copy_it /tmp/save/cron.tar.gz /mnt/backup/backup/$system/$type/$number/
	ls -lh /mnt/backup/backup/$system/$type/$number/cron.tar.gz
fi
if [ ! -f /mnt/backup/backup/$system/$type/$number/root.tar.gz ];
	echo "Storing root tarfile."
	copy_it /tmp/save/root.tar.gz /mnt/backup/backup/$system/$type/$number/
fi
cd /
sync
umount /mnt/backup
/bin/rm -r /mnt/backup

%pre
cd /
sync
umount /mnt/tmp


%pre
dd if=/dev/zero of=/dev/hda bs=512 count=1
fdisk /dev/hda <<EOF
n
p
1

+128M

n
p
2

+4104M

t
1
6

t
2
82

n
p
3

+10240M

a
3

n
e



n



n




w
q
EOF

echo "`date +%H:%M:%S`    -[ new partition table on /dev/hda: ]-"
fdisk -l /dev/hda | grep "^/dev/" | sed -e "s/^/       /"

mkdosfs /dev/hda1
mkswap /dev/hda2
#mke2fs /dev/hda3
#mke2fs /dev/hda5

%post --nochroot
mkdir /mnt/sysimage/tmp/save
cp /tmp/save/* /mnt/sysimage/tmp/save
cp /tmp/netinfo /mnt/sysimage/tmp    #If the old image was lost.
cat /mnt/sysimage/tmp/save/network

%post
#
# parse the host name
#
hostname=`awk -F. '/HOSTNAME/ {print $1}' /tmp/save/network | cut -c 10-`
if [ -z $hostname ]; then
	hostname=`awk -F. '/HOSTNAME/ {print $1}' /tmp/netinfo | cut -c 10-`
fi
if [ -n $hostname ]; then
	case $hostname in
		stken*)
			system=stken
			rest=`echo $hostname | cut -c 6-`
			;;
		cdfen*)
			system=cdfen
			rest=`echo $hostname | cut -c 6-`
			;;
		d0en*)
			system=d0en
			rest=`echo $hostname | cut -c 5-`
			;;
		*)
			system=""
			rest=""
			;;
	esac

	case $rest in
		mvr*)
			type=mvr
			number=`echo $rest | cut -c 4-`
			;;
		srv*)
			type=srv
			number=`echo $rest | cut -c 4-`
			;;
		dca*)
			type=srv
			number=`echo $rest | cut -c 4-`
			;;
		load*)
			type=""
			number=""
			;;
		*)
			type=""
			number=""
			;;
	esac

	echo "This is the type $type and the instance $number of the $system mover."
else
	echo "Hostname not set."
fi
#
# Mounting 'srv3' backup disk
#
if [ $system = "stken" ]; then
	srv3_ip=131.225.13.3
elif [ $system = "d0en" ]; then
	srv3_ip=131.225.164.23
elif [ $system = "cdfen" ]; then
	srv3_ip=131.225.215.5
else
	echo "Hostname not set."
fi
echo "  Mounting ${system}srv3 backup disk for restoring."
echo "  Mounting ${system}srv3 backup disk for restoring." >> /tmp/save/test.log
mkdir /mnt/backup
service portmap start
mount $srv3_ip:/diskc /mnt/backup >>/tmp/save/test.log
if [ $? -eq 0 ]; then
	echo "Done mounting backup disk."
fi
service portmap stop
df -h
#
# Unwinding tar files 
#
#if [ -n $system -a -n $type -a -n $number ]; then
#
echo "  Unwinding personality tar files."
echo "  Unwinding personality tar files." >> /tmp/save/test.log
cd /
if [ -f /mnt/backup/backup/$system/home.tar.gz ] ; then
	#This is for CDFen only?
	tar zxf /mnt/backup/backup/home.tar.gz
elif [ -f /mnt/backup/backup/home.tar.gz ] ; then
	tar zxf /mnt/backup/backup/home.tar.gz
else
	tar zxf /mnt/backup/backup/$system/$type/home.tar.gz
fi
#	if [ -f /mnt/backup/backup/$system/$type/$number/python.tar.gz ] ; then
#		cd /fnal/ups/prd/
#		tar zxf /mnt/backup/backup/$system/$type/$number/python.tar.gz
#		cd ../db
#		tar zxf /mnt/backup/backup/$system/$type/$number/python_db.tar.gz
#	elif [ -f /mnt/backup/backup/$system/$type/python.tar.gz ] ; then
#		cd /fnal/ups/prd/
#		tar zxf /mnt/backup/backup/$system/$type/python.tar.gz
#		cd ../db
#		tar zxf /mnt/backup/backup/$system/$type/python_db.tar.gz
#	fi
#else
#	echo "  Failed to unwind personality tar files."
#	echo "  Failed to unwind personality tar files." >> /tmp/save/test.log
#fi
cd /home
tar zxf /mnt/backup/backup/enstore.tar.gz
cd /fnal/ups/db
tar zxf /mnt/backup/backup/enstore_db.tar.gz
tar zxf /mnt/backup/backup/ipmi_db.tar.gz
tar zxf /mnt/backup/backup/python_db.tar.gz
# add ups/db/ngop tar zxf /mnt/backup/backup/ngop_db.tar.gz
# add ups/db/.upsfiles.startup tar zxf /mnt/backup/backup/ups_startup_db.tar.gz
mkdir -p /usr/local/etc /usr/local/etc/farmlets
cd /usr/local/etc/farmlets
tar zxf /mnt/backup/backup/farmlets.tar.gz
cd /fnal/ups/prd/
tar zxf /mnt/backup/backup/python.tar.gz	
#
# Restoring personality files.
#
echo "  Restoring personality files."
#This is a function that will retry the copy.  We are seeing strange copy
# failures (I'm wondering if they are related to the -p option).  Hopefully
# brute force will get us past this.
copy_it ( )
{
	echo "copying $1 to $2" | tee -a /tmp/save/test.log
        for i in 1 2 3 4 5 6 7 8 9 10; do
                ( cp -pr $1 $2 2>&1 ) | tee -a /tmp/save/test.log
                if [ $? -ne 0 ]; then sleep 1; continue; fi  #error
                return 0; #success
        done
        return 1;
}
#copy_it /tmp/save/passwd /etc
#if [ $? -eq 1 ] ;then
	#copy_it /mnt/backup/backup/$system/$type/$number/passwd /etc
#fi
#copy_it /tmp/save/shadow /etc
#if [ $? -eq 1 ] ;then
	#copy_it /mnt/backup/backup/$system/$type/$number/shadow /etc
#fi
#copy_it /tmp/save/group /etc
#if [ $? -eq 1 ] ;then
	#copy_it /mnt/backup/backup/$system/$type/$number/group /etc
#fi

echo "  Installing passwd, shadow and group files."
copy_it /mnt/backup/backup/passwd /etc
copy_it /mnt/backup/backup/shadow /etc
copy_it /mnt/backup/backup/group /etc

copy_it /tmp/save/fstab /etc
if [ $? -eq 1 ] ;then
	copy_it /mnt/backup/backup/$system/$type/$number/fstab /etc
fi
copy_it /tmp/save/krb5.keytab /etc
if [ ! -f /etc/krb5.keytab ] ;then
	copy_it /mnt/backup/backup/$system/$type/$number/krb5.keytab /etc
fi
copy_it /tmp/save/root.k5login /root/.k5login
if [ ! -f /root/.k5login ] ;then
	copy_it /mnt/backup/backup/$system/$type/$number/root.k5login /root/.k5login
fi
copy_it /tmp/save/enstore.k5login /home/enstore/.k5login
if [ ! -f /home/enstore/.k5login ] ;then
	copy_it /mnt/backup/backup/$system/$type/$number/enstore.k5login /home/enstore/.k5login
fi
mkdir /fnal /fnal/ups /fnal/ups/kt
copy_it /tmp/save/enstorekt /fnal/ups/kt/enstorekt
if [ ! -f /fnal/ups/kt/enstorekt ] ;then
	copy_it /mnt/backup/backup/$system/$type/$number/enstorekt /fnal/ups/kt/enstorekt
	#chown -R 5744.6209 /fnal/ups/kt/
	chown 5744.6209 /fnal/ups/kt/enstorekt
fi
#cp -pr /mnt/backup/backup/stken/mvr/rc.local /etc/rc.d
#copy_it /tmp/save/rc.local /etc/rc.d
copy_it /mnt/backup/backup/rc.local /etc/rc.d
if [ $? -eq 1 ] ;then
#	#cp -pr /mnt/backup/backup/stken/mvr/rc.local /etc/rc.d/rc.local
	copy_it /mnt/backup/backup/$system/$type/rc.local /etc/rc.d/rc.local
fi


copy_it /tmp/save/network /etc/sysconfig/network
if [ $? -eq 1 ] ;then
#	#cp -pr /mnt/backup/backup/stken/mvr/network /etc/sysconfig/network
	copy_it /mnt/backup/backup/$system/$type/network /etc/sysconfig/network
fi

copy_it /tmp/save/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0
if [ $? -eq 1 ] ;then
#	#cp -pr /mnt/backup/backup/stken/mvr/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0
	copy_it /mnt/backup/backup/$system/$type/ifcfg-eth0 /etc/sysconfig/network-scripts/ifcfg-eth0
fi

mkdir -p /home/enstore
copy_it /tmp/save/enstore.k5login /home/enstore/.k5login
if [ $? -eq 1 ] ;then
	copy_it /mnt/backup/backup/$system/$type/$number/enstore.k5login /home/enstore/.k5login
fi
chown 5744.6209 /home/enstore/.k5login

copy_it /mnt/backup/backup/$system.hosts.allow /etc/hosts.allow
copy_it /mnt/backup/backup/hosts /etc/hosts >>/tmp/save/test.log
chown 0.0 /etc/hosts.allow
chown 0.0 /etc/hosts 
cd /var/spool; tar xzf /tmp/save/cron.tar.gz
cd /; tar xzf /tmp/save/root.tar.gz
cp -p /local/ups/prd/ups/v4_7_2/Linux-2/init.d/ups /etc/rc.d/init.d/
cd /etc/rc.d/rc6.d/
ln -s ../init.d/ups K01ups
cd /etc/rc.d/rc3.d
ln -s ../init.d/ups S99ups
echo "ups stop ngop" >> /fnal/ups/db/.upsfiles/shutdown/$hostname.products
echo "ups stop ngop" >> /fnal/ups/db/.upsfiles/startup/$hostname.products
echo "ups start ngop" >> /fnal/ups/db/.upsfiles/startup/$hostname.products
chmod 0755 /fnal/ups/db/.upsfiles/shutdown/$hostname.products
chmod 0755 /fnal/ups/db/.upsfiles/startup/$hostname.products
chown 1342.4525 /fnal/ups/db/.upsfiles/shutdown/$hostname.products
chown 1342.4525 /fnal/ups/db/.upsfiles/startup/$hostname.products
umount /mnt/backup
/bin/rm -r /mnt/backup

%post
#This is a function that will retry the copy.  We are seeing strange copy
# failures (I'm wondering if they are related to the -p option).  Hopefully
# brute force will get us past this.
copy_it ( )
{
        for i in 1 2 3 4 5 6 7 8 9 10; do
                ( cp -pr $1 $2 2>&1 ) | tee -a /tmp/save/test.log
                if [ $? -ne 0 ]; then sleep 1; continue; fi  #error
                return 0; #success
        done
        return 1;
}
#
# Turning services on and off.
#
echo "  Turning services on and off."
/sbin/chkconfig autofs off
/sbin/chkconfig netfs off
/sbin/chkconfig netlock off
/sbin/chkconfig sendmail on
/sbin/chkconfig xfs off
/sbin/chkconfig ftp on
/sbin/chkconfig eklogin on
/sbin/chkconfig klogin on
/sbin/chkconfig kshell on
/sbin/chkconfig telnet on
/sbin/chkconfig netperf on
#
# Begginning ups install and cvs checkout.
#
#mkdir -p /local
#ln -s /local/ups /fnal/ups
cd /
if [ -d /local ]; then
	ln -s local fnal
elif [ -d /fnal ]; then
	ln -s fnal local
fi
mkdir -p /root
mkdir -p /home/enstore
chown 5744.6209 /home/enstore
echo "  Beginning ups install."
. /fnal/ups/etc/setups.sh
setup upd
upd install -G "-c" swig 
upd install ftt -G "-c" v2_22 
upd install ftt v2_18
#upd install ftt v2_22
upd install -O "-c" -c -q "agent" ngop 
upd install -O "-c" -c ngop 
chown -R 1342.4525 /fnal/ups 
echo "Beginning cvs checkout."
export CVSROOT=hppccvs@cdcvs.fnal.gov:/cvs/hppc
grep "enstore" /etc/passwd  #does user enstore exist?
if [ $? -eq 0 -a -d /home/enstore ] ; then
	#checkout and build enstore and ipmi
	mkdir -p /home/enstore
	cd /home/enstore
	/usr/krb5/bin/kinit -k -t /fnal/ups/kt/enstorekt enstore/cd/$hostname@FNAL.GOV
	cvs update -r production enstore
	cvs co ipmi
	cd /home/enstore/enstore/modules
	make clean
	setup enstore
	make 
	# place enstore-boot and monitor_server-boot
	copy_it /home/enstore/enstore/bin/enstore-boot /etc/rc.d/init.d/
	ln -s /etc/rc.d/init.d/enstore-boot /etc/rc.d/rc3.d/S99zzzenstore-boot
	ln -s /etc/rc.d/init.d/enstore-boot /etc/rc.d/rc6.d/K01aaaenstore-boot
	copy_it /home/enstore/enstore/bin/monitor_server-boot /etc/rc.d/init.d
	ln -s /etc/rc.d/init.d/monitor_server-boot /etc/rc.d/rc3.d/S99zzzmonitor_server-boot
	ln -s /etc/rc.d/init.d/monitor_server-boot /etc/rc.d/rc6.d/K01aaamonitor_server-boot
	copy_it /home/enstore/enstore/etc/enstore.bashrc /home/enstore/.bashrc
	copy_it /home/enstore/enstore/etc/enstore.bash_profile /home/enstore/.bash_profile
	#Where do the root/.bashrc and root/.bash_profile files come from?
	copy_it /home/enstore/enstore/etc/enstore.bashrc /root/.bashrc
	copy_it /home/enstore/enstore/etc/enstore.bash_profile /root/.bash_profile
	copy_it /home/enstore/enstore/etc/sudoers /etc/
	chmod 0440 /etc/sudoers
	chown 0.0 /etc/sudoers
	copy_it /home/enstore/enstore/sbin/routes /root/
	chown 0.0 /root/routes
	copy_it /home/enstore/enstore/etc/root.k5login.m4 /root/.k5login
	chown 0.0 /root/.k5login
	copy_it /home/enstore/enstore/etc/products.k5login /local/ups/.k5login
	chown 1342.4525 /local/ups/.k5login
	#This is an m4 meta file, not what we really want.
	#copy_it /home/enstore/enstore/etc/stken.enstore.k5login.m4 /home/enstore/.k5login
	#chown 5744.6209 /home/enstore/.k5login
	copy_it /home/enstore/enstore/etc/stken.hosts.allow /etc/hosts.allow
	chown 0.0 /etc/hosts.allow
	copy_it /home/enstore/enstore/etc/ups /etc/rc.d/init.d/ups
	chown 0.0 /etc/rc.d/init.d/ups
	copy_it /home/enstore/enstore/etc/stken.step-tickers /etc/ntp/step-tickers
	chown 0.0 /etc/ntp/step-tickers
	copy_it /home/enstore/enstore/etc/ntp.conf /etc/ntp.conf
	chown 0.0 /etc/ntp.conf
	copy_it /home/enstore/enstore/etc/services /etc/services
	chown 0.0 /etc/services
	mkdir /var/ngop /var/ngop/include /var/ngop/cron_agent /var/ngop/plugins_agent
	copy_it "/home/enstore/enstore/ngop/*.py" /var/ngop/include
	copy_it /home/enstore/enstore/ngop/raise_enstore_alarm /var/ngop/include
	copy_it /home/enstore/enstore/ngop/local_cronjob.xml /var/ngop/cron_agent
	copy_it /home/enstore/enstore/ngop/start_cron /var/ngop/cron_agent/.start
	copy_it /home/enstore/enstore/ngop/linuxHealth.xml /var/ngop/plugins_agent
	farmlets -f
	chown -R 0.0 /var/ngop
	rm /home/enstore/enstore/tmp/enstore/*
	echo ""
	echo "end of enstore home stuff"
fi
echo ""
echo " Last Few Things "
echo "enstore-admin@fnal.gov" > /root/.forward
echo "enstore-admin@fnal.gov" > /home/enstore/.forward
yum -y -c /etc/yum.conf.contrib install xfsprogs xfsprogs-devel
rm /home/enstore/*.fnal.gov.startup
touch /home/enstore/$hostname.fnal.gov.startup
chmod +x /local/ups/prd/ftt/v2_22/Linux-2-4-2-3-2/etc/*
chown -R 5744.6209 /home/enstore
chown 5744.6209 /local/ups/kt/enstorekt
