create sequence volume_seq;
create table volume (
	id		int primary key default nextval('volume_seq'),
	label		varchar unique,
	block_size	int default 0,
	capacity_bytes	bigint default 0,
	declared	timestamp without time zone,
	eod_cookie	varchar,
	first_access	timestamp without time zone,
	last_access	timestamp without time zone,
	library		varchar,
	media_type	varchar,
	non_del_files	int default 0,
	remaining_bytes	bigint default 0,
	sum_mounts	int default 0,
	sum_rd_access	int default 0,
	sum_rd_err	int default 0,
	sum_wr_access	int default 0,
	sum_wr_err	int default 0,
	system_inhibit_0	varchar,
	system_inhibit_1	varchar,
	si_time_0	timestamp without time zone,
	si_time_1	timestamp without time zone,
	user_inhibit_0	varchar,
	user_inhibit_1	varchar,
	storage_group	varchar,
	file_family	varchar,
	wrapper		varchar,
	comment		varchar,
	last_update	timestamp without time zone default now()
);
create index volume_library_idx on volume(library);
create index volume_media_type_idx on volume(media_type);
create index volume_system_inhibit_0_idx on volume(system_inhibit_0);
create index volume_system_inhibit_1_idx on volume(system_inhibit_1);
create index volume_storage_group_idx on volume(storage_group);
create index volume_file_family_idx on volume(file_family);
create index volume_wrapper_idx on volume(wrapper);
create index volume_remaining_bytes_idx on volume(remaining_bytes);

create function last_update () returns trigger as '
	begin
		if new.system_inhibit_0 != old.system_inhibit_0 then
			new.si_time_0 = now();
		end if;
		if new.system_inhibit_1 != old.system_inhibit_1 then
			new.si_time_1 = now();
		end if;
		new.last_update = now();
		return new;
	end;
' language 'plpgsql';

create trigger volume_last_update before update on volume for each row execute procedure last_update();

create table file (
	bfid		varchar primary key,
	crc		bigint default -1,
	deleted		char(1) default 'u',
	drive		varchar,
	volume	 	int references volume (id),
	location_cookie	varchar,
	pnfs_path	varchar,
	pnfs_id		varchar,
	sanity_size	bigint default -1,
	sanity_crc	bigint default -1,
	size		bigint default 0,
	uid		int default -1,
	gid		int default -1
);
create index file_volume_idx on file(volume);
create index file_pnfs_path_idx on file(pnfs_path);
create index file_pnfs_id_idx on file(pnfs_id);
create index file_deleted_idx on file(deleted);
create index file_location_cookie_idx on file(location_cookie);

create table sg_count (
	library		varchar,
	storage_group	varchar,
	count		int,
	primary key	(library, storage_group)
);

create function lookup_vol(varchar) returns integer
as 'select id from volume where label = $1;'
language sql;

create sequence state_type_seq;
create table state_type (
	id		int primary key default nextval('state_type_seq'::text),
	name		varchar not null unique
);

create table state (
	time		timestamp without time zone default now(),
	volume		int not null references volume(id) on delete cascade,
	type		int references state_type(id),
	value		varchar
);
create index state_time_idx on state(time);
create index state_volume_idx on state(volume);
create index state_type_idx on state(type);
create index state_value_idx on state(value);

insert into state_type (name) values ('system_inhibit_0');
insert into state_type (name) values ('system_inhibit_1');
insert into state_type (name) values ('user_inhibit_0');
insert into state_type (name) values ('user_inhibit_1');
insert into state_type (name) values ('write_protect');
insert into state_type (name) values ('other');
insert into state_type (name) values ('modified');

create function lookup_stype(varchar) returns integer
as 'select id from state_type where name = $1;'
language sql;

create table bad_file (
	bfid		varchar references file(bfid) on delete cascade,
	path		varchar
);

create index bad_file_bfid_idx on bad_file(bfid);

create table quota (
	library		varchar,         
	storage_group	varchar,
	requested	int default 0,
	authorized	int default 0,
	quota		int default 0,
	significance	character(1) default 'y',
	primary key	(library, storage_group)
);

create index quota_library_idx on quota(library);
create index quota_storage_group_idx on quota(storage_group);

create table option (
	key		varchar,
	value		varchar
);

insert into option (key, value) values ('quota', 'disabled');

create table migration (
	src_bfid varchar unique references file(bfid) on delete cascade,
	dst_bfid varchar unique references file(bfid) on delete cascade,
	copied timestamp without time zone,
	swapped timestamp without time zone,
	checked timestamp without time zone,
	closed timestamp without time zone,
	remark varchar
);

create table migration_history (
	src	varchar not null,
	dst	varchar not null,
	time	timestamp without time zone default now(),
	primary key (src, dst)
);
create index migration_history_src_idx on migration_history(src);
create index migration_history_dst_idx on migration_history(dst);

create table media_capacity (
	type		varchar,
	capacity	bigint,
	primary key (type)
);

insert into media_capacity values('9840', 21474836480);
insert into media_capacity values('9940', 64424509440);
insert into media_capacity values('9940B', 214748364800);
insert into media_capacity values('DECDLT', 21474836480);
insert into media_capacity values('null', 214748364800);

create table tc (
media_type varchar,
library varchar,
storage_group varchar,
volumes numeric);

create function tape_consumption(interval, char) returns setof tc as '
select media_type, library, storage_group, sum(volumes)
from
	(select media_type, library, storage_group, file_family,
		sum(size),
		case
			when $2 = \'r\' then
				round(sum(size)/media_capacity.capacity, 5)
			else
				trunc((sum(size)-1)/media_capacity.capacity)+1
		end as volumes
	from file, volume, media_capacity
	where
		file.volume = volume.id and
		media_capacity.type = volume.media_type and
		volume.media_type != \'null\' and
		bfid > \'CDMS\' || to_char(trunc(date_part(\'epoch\', now() - $1)), \'FM99999999999999\') || \'00000\' and
		bfid < \'CDMS\' || to_char(trunc(date_part(\'epoch\', now() + interval \'1 day\')), \'FM99999999999999\') || \'00000\'
		group by media_type, library, storage_group,
			file_family, capacity) as foo
group by media_type, library, storage_group;
' language sql;

create table qa (
	media_type	varchar,
	library		varchar,
	storage_group	varchar,
	monthly		numeric,
	weekly		numeric,
	daily		numeric,
	projected_daily	numeric,
	quota		int,
	allocated	int,
	days_surviving	numeric,
	alert		varchar
);

create function quota_alert () returns setof qa as '
select *,
	case
		when m1.days_surviving < 3 then \'less than 3 days\'
		when m1.days_surviving < 7 then \'less than 1 week\'
	end :: varchar as alert
	from
	(select *,
		trunc((m.quota - m.allocated)/(
			case
				when m.projected_daily = 0 then null
				else m.projected_daily
			end)) as days_surviving
	from
		(select
			u.media_type, u.library, u.storage_group, u.monthly,
			u.weekly, u.daily,
			case
				when u.weekly/7 > u.daily or u.daily is null
					then round(u.weekly/7, 5)
				else u.daily
			end as projected_daily,
			quota.quota, sg_count.count as allocated
		from quota, sg_count,
			(select monthly.media_type, monthly.library,
				monthly.storage_group, monthly.volumes as monthly,
				dw.weekly, dw.daily
			from
				tape_consumption(\'1 month\', \'n\') as monthly
				full outer join
				(select weekly.media_type, weekly.storage_group, daily.volumes as daily , weekly.volumes as weekly
				from
					tape_consumption(\'1 day\', \'r\') as daily
					full outer join
					tape_consumption(\'1 week\', \'y\') as weekly
					on (daily.media_type = weekly.media_type and daily.storage_group = weekly.storage_group)) as dw
				on (monthly.media_type = dw.media_type and monthly.storage_group = dw.storage_group)
			order by media_type, storage_group) as u
		where
			u.library = quota.library and
			u.storage_group = quota.storage_group and
			sg_count.library = u.library and
			sg_count.storage_group = u.storage_group) as m
	) as m1;
' language sql;
