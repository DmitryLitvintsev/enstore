#!/usr/bin/env python
#####################################################################
#                                                                   #
# This config file is for an installation of enstore that runs on a #
# single host.                                                      #
#                                                                   #
#####################################################################

### Constants (which I borrowed from stk.conf)

# Common sizes
KB=1024L
MB=KB*KB
GB=KB*MB

# Rates of different tape types
ait1_rate =    2.7 * MB
mam1_rate =    2.8 * MB
dlt_rate =     5.1 * MB
s9840_rate =  10.5 * MB
s9940_rate =  10.5 * MB
s9940b_rate = 27.0 * MB
lto_rate =    15.0 * MB
lto2_rate =   27.0 * MB
lto3_rate =   27.0 * MB
ait2_rate =    9.5 * MB
mam2_rate =   11.5 * MB
null_rate =   11.5 * MB

legal_encp_version = 'v3_6c'

# Constants, some of which are not used here.
mvr_max_consecutive_failures=3
mvr_max_failures=5
mvr_check_f = 40
b_mvr_check_f = 100 
vol_max_noaccess_cnt=4

# pattern to look in syslog file when FTT_EIO occurs
low_level_diag_pattern = 'st[0-9]' 

crc_seed = 1

# The hostname of the machine on which the servers are running.
## A production ready configuration file will not import socket, or use
## socket.gethostname().
import socket
hostname = socket.gethostname()

monitoring_and_web=hostname
enstore_DB=hostname
enstore_backup=hostname
enstore_library=hostname
enstore_pnfs=hostname
enstore_DB_host=enstore_DB
backup_host=enstore_backup
verify_host=enstore_backup
monitoring_host=monitoring_and_web
web_server_host=monitoring_and_web
log_server_host=monitoring_and_web
alarm_server_host=monitoring_and_web
ratekeeper_host=monitoring_and_web
event_relay_host=monitoring_and_web
inquisitor_host=monitoring_and_web
DB_host=enstore_DB_host
file_clerk_host=enstore_DB_host
volume_clerk_host=enstore_DB_host
info_server_host=enstore_DB_host
accounting_server_host=enstore_DB_host
drivestat_server_host=enstore_DB_host
media_changer_host=enstore_library
library_manager_host=enstore_library

#/srv comes from the Filesystem Hierarchy Standard.
html_dir = "/srv/enstore/www"
log_dir = "/srv/enstore/enstore-log"
backup_dir = "/srv/enstore/backups"
inventory_dir =	"/srv/enstore/db-inventory"
httpd_dir = "/srv/enstore/www/saen"
httpd_dir2 = httpd_dir
ratekeeper_dir = "/srv/enstore/ratekeeper/"
db_basedir = "/srv/enstore/databases"
#www_alias = "www-saen"   #optional
#conf_alias = "conf-saen" #optional
#pnfs_alias = "pnfs-saen" #optional


### My configuration dictionary.
configdict = {}

### The only known configuration server is the SAmple ENstore.
configdict['known_config_servers'] = {
    'saen' : (hostname, 7500),
    }

configdict['encp'] = {'crc_seed' : crc_seed,
                      #'legal_encp_version':legal_encp_version, #Not used (yet)
                      }

### Blocksizes when reading/writing tapes.
configdict['blocksizes'] = { '8MM'       : 131072,
			     'DECDLT'    : 131072,
			     '9840'      : 131072,
			     '9940'      : 131072,
			     '9940B'     : 131072,
			     '3480'      : 131072,
			     'LTO'       : 131072,
			     'LTO2'      : 131072,
			     'LTO3'      : 131072,
			     'null'      : 131072,
                             }

# Tape mount limits according to media type.
# When mounts exceed the first number, an alarm should be generated
# when it exceeds the second number, enstore ball should be turned red.
#
# Ignore any media type that is not mentioned.
configdict['tape_mount_limit'] = {
	'8MM':    (2000, 5000),
	'DECDLT': (2000, 5000),
	'9840':   (2000, 5000),
	'9940':   (2000, 5000),
	'9940B':  (2000, 5000),
	'LTO':    (2000, 5000),
	'LTO2':   (2000, 5000),
	'LTO3':   (5000, 10000),
        }

### Wrapper sizes.
configdict['wrappersizes'] = { 'null' : (100L*GB) - 1,
			       'cern' : long("9"*20),
			       'cpio_odc' : (8L*GB) - 1,
                               }

### This our our database
configdict['database']     = {
    'dbname': 'enstoredb',
    'dbhost': DB_host,
    'dbport': 8888,
    'dbuser': 'enstore',
    'dbserverowner': 'products',
    'dbarea':'%s/enstore-db' % (db_basedir,),
    }

### Information for the set of inventory web page cron jobs.
configdict['inventory']    = {
    'inventory_dir'		: inventory_dir,
    'inventory_tmp_dir'		: "%s/tmp" % (inventory_dir,),
    'inventory_cache_dir'	: "%s_cache" % (inventory_dir,),
    'inventory_extract_dir'	: "%s/extract" % (inventory_dir,),
    'inventory_rcp_dir'		: '%s:%s/tape_inventory' % (monitoring_and_web, html_dir,),
    #'wpa_states'		: ["full", "readonly"],
    #'wpa_media_types'		: ["9940", "9940B", "3480"],
    #'wpa_excluded_libraries'	: ["samnull", "testlto", "testlto2"],
    #'authorized_file'		: '/opt/enstore/etc/auth.conf'
    }

#For limiting the number of simultaneous transfers for a node.  Nodes
# containing the string saen will be limited to 2 simultaneous transfers
# for the null library for the storage groups null_group1 and null_group2.
configdict['discipline'] = {
    'null.library_manager':{'null_group1':{1:{'keys':{'host':"saen"},
                                              'function':'restrict_host_access',
                                              'args':['null_group1','saen',2],
                                              'action':'ignore'},
                                           },
                            'null_group2':{1:{'keys':{'host':"saen"},
                                              'function':'restrict_host_access',
                                              'args':['null_group2','saen',2],
                                              'action':'ignore'},
                                           },
                            },
    }

#Override the default priority based on various values.
configdict['priority'] = {
    'null.library_manager':{'adminpri':{2:
					{'host': verify_host,
                                         'uname':'enstore',
					 #'storage_group':'null_group1',
					 #'work' : 'write_to_hsm',
                                         #'work' : 'read_from_hsm',
					 },
					},
			    },
    }

### Quota information
configdict['quotas'] = {'enabled': 'yes',
                        'libraries':{'null' :{'null_group1': 2,
					      'null_group2': 2},
                                     #'mtx'  :{'mtx_group1' : 2,
                                     #         'mtx_group2' : 2}
                                     },
                        }
### Information used by various Enstore Cron Jobs.
configdict['crons'] = {
    #'www_alias'       : www_alias, #optional
    #'conf_alias'      : conf_alias, #optional
    #'pnfs_alias'      : pnfs_alias, #optional
    'web_node'        : monitoring_and_web,
    'html_dir'        : html_dir,
    'log_dir'         : log_dir,
    'tmp_dir'         : "/tmp",
    'email'           : "enstore-auto@fnal.gov",
    'developer_email' : "moibenko@fnal.gov,zalokar@fnal.gov,huangch@fnal.gov,litvinse@fnal.gov",
    'backup_node'     : enstore_backup,
    'backup_dir'      : backup_dir,
    #'farmlets_dir'    : "/usr/local/etc/farmlets",
    }

#The mapping of enstore cron jobs to hosts.
configdict['crontabs'] = {
    'log_server'        : {'cronfiles' : ["log_server",
                                          "log_html",
                                          ]},
    'web_server'        : {'cronfiles' : ["enstore_plots",
                                          "enstore_html",
                                          "inventory",
                                          "chkcrons",
                                          #"tab_flipping",
                                          ],
                           'host'      : monitoring_and_web},
    'verifying'         : {'cronfiles' : ["checkPNFS",
                                          "copy_ran_file",
                                          ],
                           'host'      : verify_host},
    'pnfs'              : {'cronfiles' : ["delfile",
                                          "pnfs_misc",
                                          ],
                           'host'      : enstore_pnfs},
    'accounting_server' : {'cronfiles' : ["accounting_db"]},
    'drivestat_server'  : {'cronfiles' : ["drivestat_db"]},
    'file_clerk'        : {'cronfiles' : ["enstore_db"]},
    'databases'         : {'cronfiles' : ["backup",
                                          #"backup.operation",
                                          #"backup2Tape",
                                          ],
                           'host'      : enstore_backup},
    }

###
### The following items describe Enstore Servers.
###

### event relay server
configdict['event_relay'] = {
    'host':event_relay_host,
    'port':55510,
    }

### file clerk
configdict['file_clerk'] = {
    'host':file_clerk_host,
    'port':7501,
    'logname':'FILSRV',
    'norestart':'INQ',
    'brand':'SAMS', # SAMS = SAmple Mass Storage
    }

### volume clerk
configdict['volume_clerk'] = {
    'host':volume_clerk_host,
    'port':7502,
    'logname':'VOLSRV',
    'norestart':'INQ',
    'max_noaccess_cnt' : vol_max_noaccess_cnt,
    }

### alarm server
configdict['alarm_server'] = {
    'host':alarm_server_host,
    'port':7503,
    'logname':'ALMSRV',
    'norestart':'INQ',
    }

### log server
configdict['log_server'] = {
    'host':log_server_host,
    'port':7504,
    'norestart':'INQ',
    'msg_type_logs': {'MSG_TYPE=MC_LOAD_REQ' : 'MOUNTS-',
                      'MSG_TYPE=MC_LOAD_DONE' : 'MOUNTS-',
                      'MSG_TYPE=ENCP_XFER' : 'ENCPS-',
                      'MSG_TYPE=EVENT_RELAY' : 'EVRLY-',
                      'MSG_TYPE=ADD_TO_LMQ' : 'LMQADDS-',
                      },
    'log_file_path' : log_dir,
    }

### The monitor server
configdict['monitor_server'] = {
    'html_dir'		: html_dir,
    'html_gen_host'	: web_server_host,
    'norestart'		:'INQ',
    'refresh'		: 3600,
    'block_size'	: 65536,
    'block_count'	: 160,
    'default_timeout'	: 3,
    }

### The inquisitor
configdict['inquisitor']   = {
    'host':inquisitor_host,
    'port':7505,
    'logname':'INQSRV',
    'alive_rcv_timeout': 5,
    'alive_retries':1,
    'refresh' : 3600,
    'html_file':html_dir,
    'http_log_file_path':'/enstore/log',
    'www_host':'http://' + web_server_host,
    'max_encp_lines': 250,
    'user_log_dirs' :
    {
# Disable these until we get them working.
#
#    'Enstore Node Information'	     : '/enstore/nodeinfo.html',
#    'Active Monitor Log'            : '/enstore/active_monitor.html',
#    'Network-At-A-Glance'	     : '/enstore/enstore_saag_network.html',
#    'FAILED Transfers'		     : '/enstore/log/transfer_failed.txt',
#    'Recent STK log messages'	     : '/enstore/log/STK-log.html',
#    'PNFS Export List'		     : '/enstore/pnfsExports.html',
#    'Tape Drives'                   : '/enstore/firmware_stat_report.html',
    },
    'default_alive_interval': 30,
    'default_hung_interval' : 120,
    }

### An info server. 
configdict['info_server'] = {
    'host': info_server_host,
    'port': 7777,
    'logname': 'INFSRV',
    'dbhost': DB_host,
    'dbport': 8888,
    'dbname': 'enstoredb',
    }


### The accounting server
configdict['accounting_server'] = {
    'host': accounting_server_host,
    'port': 7580,
    'norestart':'INQ',
    'logname': 'ACCSRV',
    'dbhost': DB_host,
    'dbname': 'accountdb',
    }

### the drive statistics server
configdict['drivestat_server'] = {
    'host': drivestat_server_host,
    'port': 7590,
    'norestart':'INQ',
    'logname': 'DRSSRV',
    'dbhost': DB_host,
    'dbport': 9999,
    'dbname': 'drivestat',
    }

### The ratekeeper server
configdict['ratekeeper'] = {
    'host' : ratekeeper_host,	#node ratekeeper is running on
    'port' : 55511,		#port ratekeeper is running on
    'norestart'	: 'INQ',
    'noupdown' : 'efb',
    'logname' : 'RATSRV',	#logname
    #The following should all be old.
    #'dir' : ratekeeper_dir,	#directory to write rates to
    #'tmp' : "%s/tmp/" % (ratekeeper_dir,), #temp directory used
    #'ps' : '%s/*rates.ps' % (html_dir,),
    #'jpg' : '%s/*rates.jpg' % (html_dir,),
    #'stamp' : '%s/*rates_stamp.jpg' % (html_dir,),
    }

### null library manager
configdict['null.library_manager'] = {
    'host':library_manager_host,
    'port':7511,
    'logname':'NULLBM',
    'norestart':'INQ',
    'noupdown':'jon',
    'inq_ignore':'jon',
    'max_encp_retries':3,
    'max_file_size':(8L*GB) - 1,
    'suspect_volume_expiration_time':2,
    'legal_encp_version':legal_encp_version,
    }

### null media changer
configdict['null.media_changer'] = {
    'host':media_changer_host,
    'port':7520,
    'logname':'NUL1MC',
    'type':'RDD_MediaLoader',
    'norestart':'INQ',
    'noupdown':'jon',
    'inq_ignore':'jon',
    }

### null mover
configdict['null.mover'] = {
    'host':hostname,
    'data_ip':hostname,
    'port':7538,
    'logname':'NUL12MV',
    'norestart':'INQ',
    'noupdown':'efb',
    'inq_ignore' : 'jon',
    'max_buffer':350*MB,
    'library':'null.library_manager',
    'device':'/dev/null',
    'driver':'NullDriver',
    'mc_device':'-1',
    'media_changer':'null.media_changer',
    }


#### mtx library manager
#configdict['mtx.library_manager'] = {
#    'host':library_manager_host,
#    'port':7512,
#    'logname':'MTXBM',
#    'norestart':'INQ',
#    'max_encp_retries':3,
#    'max_file_size':(8L*GB) - 1,
#    'suspect_volume_expiration_time':2,
#    'legal_encp_version':legal_encp_version,
#    }
##### mtx media changer
#configdict['mtx.media_changer'] = {
#    'host':media_changer_host,
#    'port':7521,
#    'norestart':'INQ',
#    'logname':'MTXMC',
#    'type':'MTX_MediaLoader',
#    'device_name':'/dev/sgb', 
#    'status_timeout':10,
#    'mount_timeout':180,
#    }
#### mtx mover
#configdict['mtx.mover'] = {
#    'host':hostname,
#    'data_ip':hostname,
#    'port':7539,
#    'logname':'MTXMV',
#    'norestart':'INQ',
#    'statistics_path': homedir + '/enstore_log/MTXMV.stat',
#    'max_buffer':150*MB,
#    'library':'mtx.library_manager',
#    'device':'/dev/nst0',
#    'driver':'FTTDriver',
#    'mc_device':'0',
#    'media_changer':'mtx.media_changer',
#    }
#


