#!/bin/sh
##############################################################################
#
# $Id$
#
# This script performs copy of pnfs postgres backup files to backup host
# backup location and backup host are extracted from  /usr/etc/pnfsSetup
#
##############################################################################

if ! hash enrcp 2>/dev/null ; then  alias enrcp=rcp; fi
if ! hash enrsh 2>/dev/null ; then  alias enrsh=rsh; fi
if ! hash enrsync 2>/dev/null ; then  alias enrsync=rsync; fi

setup=/usr/etc/pnfsSetup
#
if [ ! -f ${setup} ] ; then
  echo " Can't locate $setup "
  exit 1
fi
. ${setup}

if [ -z "$database" ] ; then echo " database not found in $setup " ; exit 1 ; fi
if [ -z "$database_postgres" ] ; then echo " database_postgres not found in $setup " ; exit 1 ; fi
if [ -z "$remotebackup" ] ; then echo " remotebackup not found in $setup " ; exit 1 ; fi

#
db=$database
db_psql=$database_postgres
backdir=$database/../backup
genFile=$backdir/backupGeneration

#
if [ ! -d $backdir ] ; then
  echo " Can't locate $backdir "
  exit 1
fi

save_loop() {

    if [ ! -f $genFile ] ; then
	echo 1 >$genFile
    fi

    generation=`cat $genFile 2>/dev/null `
    generation=`expr $generation + 0`
    newGen=`expr $generation + 1`
    if [ $newGen -gt 72 ] ; then newGen=1 ; fi
    echo $newGen >$genFile
    for c in $db_psql ; do
	mode=save
	name=`basename $c`
	fullpath=$c
	save_low
	if [ $? -ne 0 ] ; then return 1 ; fi
    done
}

checkSpaceLeft() {
    filename=$1
    destDev=$2
    destDevice=`echo $destDev | awk -F: '{ print $2 }'`
    destHost=`echo $destDev | awk -F: '{ print $1 }'`

    if [ -z "$destDevice" ] ; then
	destDevice=$destHost
	spaceLeft=`df -m $destDevice | grep -v "Filesystem" | tr -d "\n" | awk '{ print $4}' 2>/dev/null`
    else
	spaceLeft=`enrsh $destHost "df -m $destDevice" | \
            grep -v "Filesystem" | tr -d "\n" | awk '{ print $4}' 2>/dev/null`
    fi
    if [ -z "$spaceLeft" ] ; then echo "df -m Command failed " ; exit 5 ; fi
    spaceNeeded=`ls -l $filename | awk '{ print $5 }' 2>/dev/null `
    spaceNeeded=`expr $spaceNeeded / 1024 / 1024 + 1`
    spaceNeeded=`expr 2 \* $spaceNeeded `
    if [ $spaceNeeded -gt $spaceLeft ] ; then return 1 ; fi
    return 0
}

save_low() {
    if [ ! -e $fullpath ]; then
        echo " $fullpath doesn't exist, not backing up"
	return 1
    fi
    if [ ! -s $fullpath ]; then
        echo " $fullpath has file size = 0, not backing up"
	return 0
    fi

    dest=$backdir/`basename $fullpath`.$generation
    echo " `date` Copying $fullpath $dest "
    echo temporarily disabled: checkSpaceLeft $fullpath $backdir
    if [ $? -ne 0 ] ; then
        echo " Not enough space left on $backdir"
        return 1
    fi
    psql -U enstore template1 -c "checkpoint; select pg_start_backup('${dest}.tar.Z')" > /dev/null
    (cd ${fullpath}/..; GZIP=-1 nice -n 20 tar cfz ${dest}.tar.Z --exclude ./`basename ${fullpath}`/pg_xlog .)
    if [ "$?" != "0" ] ; then
	echo " Tar cfz ${dest}.tar.Z returned error code. Some files might be modified during backup. Ignored. "
    fi
    psql -U enstore template1 -c "select pg_stop_backup()" > /dev/null
    dest=$dest.tar.Z
    xstat=$?
    if [ $xstat -ne 0 ] ; then
        echo " Cp $fullpath $dest command failed : $xstat"
        return 1
    fi
    if [ `echo $dest | grep -c "\.Z"` -eq 0 ]; then
        echo " `date` Compressing $dest "
        nice -5 compress $dest
        xstat=$?
        if [ $xstat -ne 0 ] ; then
            echo " Compress $dest command failed : $xstat"
            return 1
        fi
	dest=$dest.Z
    else
	echo " Input $dest already compressed, not recompressing"
    fi
    touch  $dest
    checkSpaceLeft $dest $remotebackup
    if [ $? -ne 0 ] ; then
        echo " Not enough space left on $remotebackup for $dest"
        return 1
    fi
    echo " `date` enrsyncing $dest $remotebackup"
    enrsync $dest $remotebackup
    xstat=$?
    if [ $xstat -ne 0 ] ; then
        echo " `date` Failed $xstat : enrsync $dest $remotebackup"
        return 1
    else
        echo " `date` Transferred $dest $remotebackup"
    fi
    rm $dest
    return 0
}

mode=save
save_loop $*
