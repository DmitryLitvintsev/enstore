#!/bin/sh
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# bin/$RCSfile$   $Revision$
# start enstore processes on the current node


opts_wo_args='ping'
opts_w_args='xterm|just'
USAGE="`basename $0`: [--{$opts_w_args} <arg>] [--{$opts_wo_args}]"
while opt=`expr "${1-}" : '--\(.*\)'`;do
    shift
    eval "case \$opt in
    \\?) echo \"$USAGE\"; exit 0;;
    $opts_wo_args)
        eval opt_\$opt=1;;
    $opts_w_args)
        if [ $# = 0 ];then echo option $opt requires argument; exit 1; fi
        eval opt_\$opt=\"'\$1'\";shift ;;
    *)  echo \"invalid option: \$opt\"; exit 1;;
    esac"
done

. $ENSTORE_DIR/etc/defaults          # also sourced in ecmd -- twice better than none???

place=`pwd`
cd $enstore_db

################################################################################################################################################

# the configuration server needs to be the 1st thing started
if [ ! "${opt_ping-}" ];then
  if [ $enstore_start_config -eq 1 -a \( "${opt_just-}" = "" -o "`echo ${opt_just-}|grep conf`" \) ];then
    echo "Starting Configuration Server on $enstore_config_host, port $enstore_config_port, using file $enstore_config_file"
    cmd="python $ENSTORE_DIR/src/configuration_server.py \
           --config_host=$enstore_config_host --config_port=$enstore_config_port --config_file=$enstore_config_file"
    if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|conf'; then
        title="Config Server"
        eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
    else
        eval "$cmd &"
    fi
    echo $! >> $enstore_db/`uname -n`-configuration_pids
    sleep 1
  fi
fi

echo "Checking Configuration Server on $enstore_config_host, port $enstore_config_port"
ecmd config --alive --list
if [ $? -ne 0 ] ; then
  echo "   ...Configuration Server not reachable..."
  exit 1
fi

################################################################################################################################################

# the logger needs to be next

if [ ! "${opt_ping-}" ];then
  if [ $enstore_start_log -eq 1 -a \( "${opt_just-}" = "" -o "`echo ${opt_just-}|grep log`" \) ];then
    echo "Starting Log Server"
    cmd="python $ENSTORE_DIR/src/log_server.py --config_host=$enstore_config_host --config_port=$enstore_config_port"
    if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|log'; then
        title="Log Server"
        eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
    else
        eval "$cmd &"
    fi
    echo $! >> $enstore_db/`uname -n`-log_server_pids
    sleep 1
  fi
fi

echo "Checking Log Server"
ecmd log --alive --list
if [ $? -ne 0 ] ; then
  echo "   ...Log Server not reachable..."
  exit 1
fi

################################################################################################################################################

# volume clerk

if [ ! "${opt_ping-}" ];then
  if [ $enstore_start_volumeclerk -eq 1 -a \( "${opt_just-}" = "" -o "`echo ${opt_just-}|grep vol`" \) ];then
    echo "Starting Volume Clerk"
    cmd="python $ENSTORE_DIR/src/volume_clerk.py --config_host=$enstore_config_host --config_port=$enstore_config_port"
    if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|vol'; then
        title="Config Server"
        eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
    else
        eval "$cmd &"
    fi
    echo $! >> $enstore_db/`uname -n`-volume_clerk_pids
    sleep 1
  fi
fi

echo "Checking Volume Clerk"
ecmd vcc --alive --list
if [ $? -ne 0 ] ; then
  echo "   ...Volume Clerk not reachable..."
  exit 1
fi


################################################################################################################################################

# file clerk

if [ ! "${opt_ping-}" ];then
  if [ $enstore_start_fileclerk -eq 1 -a \( "${opt_just-}" = "" -o "`echo ${opt_just-}|grep fil`" \) ];then
    echo "Starting File Clerk"
    cmd="python $ENSTORE_DIR/src/file_clerk.py --config_host=$enstore_config_host --config_port=$enstore_config_port"
    if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|fil'; then
        title="File Clerk"
        eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
    else
        eval "$cmd &"
    fi
    echo $! >> $enstore_db/`uname -n`-file_clerk_pids
    sleep 1
  fi
fi

echo "Checking  File Clerk"
ecmd fcc --alive --list
if [ $? -ne 0 ] ; then
  echo "   ...File Clerk not reachable..."
fi

################################################################################################################################################

# library manager
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep lib`" ];then
  for i in $enstore_libraries; do
    echo "Starting $i Library Manager"

    if [ ! "${opt_ping-}" ];then
      cmd="python $ENSTORE_DIR/src/library_manager.py --config_host=$enstore_config_host --config_port=$enstore_config_port $i"
      if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|lib'; then
          title="Library Manager $i"
          eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
      else
          eval "$cmd &"
      fi
      echo $! >> $enstore_db/`uname -n`-library_manager_pids
      sleep 1
      ecmd lmc --alive --list $i
      if [ $? -ne 0 ]; then
        echo "   ...$i Library Manager not reachable..."
        exit 1
      fi
    else
      ecmd lmc --alive --list $i
      if [ $? -ne 0 ] ; then
        echo "   ...$i Library Manager not reachable..."
        exit 1
      fi
    fi
  done
fi

################################################################################################################################################

# media changer
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep med`" ];then
  for i in $enstore_media_changers; do
    echo "Checking $i Media Changer"

    if [ ! "${opt_ping-}" ];then
      cmd="python $ENSTORE_DIR/src/media_changer.py --config_host=$enstore_config_host --config_port=$enstore_config_port $i"
      if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|med'; then
          title="Media Changer $i"
          eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
      else
          eval "$cmd &"
      fi
      echo $! >> $enstore_db/`uname -n`-media_changer_pids
      sleep 1
      ecmd mcc --alive --list $i
      if [ $? -ne 0 ]; then
        echo "   ...$i Media Changer not reachable..."
        exit 1
      fi
    else
      ecmd mcc --alive --list $i
      if [ $? -ne 0 ] ; then
        echo "   ...$i Media Changer not reachable..."
        exit 1
      fi
    fi
  done
fi

################################################################################################################################################

# mover
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep mov`" ];then
  for i in $enstore_movers; do
    echo "Starting $i Mover"

    if [ ! "${opt_ping-}" ];then
      cmd="python $ENSTORE_DIR/src/mover.py --config_host=$enstore_config_host --config_port=$enstore_config_port $i"
      if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|mov'; then
          title="Mover $i"
          eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
      else
          eval "$cmd &"
      fi
      echo $! >> $enstore_db/`uname -n`-mover_pids
    else
      echo "   ...No ping test for $i Mover...(yet)"
    fi
  done
fi

################################################################################################################################################
# dbase
#start database administrator

if [ ! "${opt_ping-}" ];then
  if [ $enstore_start_admin -eq 1 -a \( "${opt_just-}" = "" -o "`echo ${opt_just-}|grep adm`" \) ];then
    if [ -r $ENSTORE_DB/file -a -r $ENSTORE_DB/volume ] ;  then

      echo "Starting database checkpoint daemon  on `hostname`"
      db_checkpoint -h $ENSTORE_DB  -p 5 &
      echo $! >> $enstore_db/`uname -n`-db_check_pids

      echo "Starting database deadlock daemon  on `hostname`"
      db_deadlock -h $ENSTORE_DB  -t 1 &
      echo $! >> $enstore_db/`uname -n`-db_dlck_pids

      echo "Starting DB Admin Server"
      python $ENSTORE_DIR/src/admin_clerk.py --config_host=$enstore_config_host --config_port=$enstore_config_port &
      echo $! >> $enstore_db/`uname -n`-admin_pids
      sleep 1

    else
      echo "ERROR: file and volume database are not present - can't start db tools"
      exit 1
    fi
  fi

fi
echo "Checking DB Admin Server"
ecmd acc --alive
if [ $? -ne 0 ] ; then
  echo "   ...DB Admin  Server not reachable..."
  exit 1
fi

################################################################################################################################################


cd $place
