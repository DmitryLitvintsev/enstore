#!/bin/sh
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# bin/$RCSfile$   $Revision$
# start enstore processes on the current node


opts_wo_args='ping|nocheck'
opts_w_args='xterm|just'
USAGE="`basename $0`: [--{$opts_w_args} <arg>] [--{$opts_wo_args}]"
while opt=`expr "${1-}" : '--\(.*\)'`;do
    shift
    eval "case \$opt in
    \\?) echo \"$USAGE\"; exit 0;;
    $opts_wo_args)
        eval opt_\$opt=1;;
    $opts_w_args)
        if [ $# = 0 ];then echo option $opt requires argument; exit 1; fi
        eval opt_\$opt=\"'\$1'\";shift ;;
    *)  echo \"invalid option: \$opt\"; exit 1;;
    esac"
done

. $ENSTORE_DIR/etc/defaults          # also sourced in ecmd -- twice better than none???

place=`pwd`
cd $enstore_db

local_host=`hostname`
enstore_start_config=0     # new default
eful=0 lful=0
if expr "$enstore_config_host" : '.*\.' >/dev/null;then eful=1; fi
if expr "$local_host" : '.*\.' >/dev/null;         then lful=1; fi

if   [ $eful = 1 -a $lful = 0 ];then
    local_host=`nslookup $local_host | sed -e '/Name.*/ !d' -e 's/Name: *//'`
elif [ $eful = 0 -a $lful = 1 ];then
    enstore_config_host=`nslookup $local_host | sed -e '/Name.*/ !d' -e 's/Name: *//'`
fi

if [ $local_host = $enstore_config_host ];then
    enstore_start_config=1
fi

timeout=1
tries=10

###################################################################################################################################

# the configuration server needs to be the 1st thing started
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep conf`" ];then
    if [ "${opt_ping-}" != 1 -a $enstore_start_config -eq 1 ];then
      if   [ ! "${opt_nocheck-}" ]\
        && udp_sendWaitReply-withTimeout.sh $enstore_config_host $enstore_config_port $timeout >/dev/null
        then
        echo "Configuration Server on $enstore_config_host already started"
      else
        echo "Starting Configuration Server on $enstore_config_host, port $enstore_config_port, using file $enstore_config_file"
        cmd="python $ENSTORE_DIR/src/configuration_server.py \
            --config_host=$enstore_config_host --config_port=$enstore_config_port --config_file=$enstore_config_file"
        if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|conf' >/dev/null; then
            title="Enstore Config Server"
            eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
        else
            eval "$cmd &"
        fi
        echo $! >> $enstore_db/`uname -n`-configuration_pids
        #sleep 1
      fi
    fi

    echo "Checking Configuration Server on $enstore_config_host, port $enstore_config_port"
    ecmd config --alive --list
    if [ $? -ne 0 ] ; then
        echo "   ...Configuration Server not reachable..."
        exit 1
    fi
fi

###################################################################################################################################

# new defaults
enstore_libraries=
enstore_media_changers=
enstore_movers=
enstore_start_fileclerk=0
enstore_start_volumeclerk=0
enstore_start_log=0
enstore_start_admin=0
ENSTORE_CONFIG_HOST=$enstore_config_host;export ENSTORE_CONFIG_HOST
ENSTORE_CONFIG_PORT=$enstore_config_port;export ENSTORE_CONFIG_PORT

# get all the servers for this port and other important servers (file_clerk, volume_clerk, ...)
nodeplus_servers=`conf.sh $local_host`

# now just isolate the servers for this node
node_servers=`echo "$nodeplus_servers" | grep :$local_host: | sed -e "s/:$local_host//"`
if [ ! "$node_servers" ];then
    #echo try alternate host specification
    if  hh=`expr "$local_host" : '\([^.]*\)\.'`;then
        :
    else
        hh=`nslookup $local_host | sed -e '/Name.*/ !d' -e 's/Name: *//'`
    fi
    nodeplus_servers=`conf.sh $hh`
    node_servers=`echo "$nodeplus_servers" | grep :$hh: | sed -e "s/:$hh//"`
fi

for server in $node_servers;do
    if t=`expr "$server" : '\(.*\)[: ]'`;then   #strip off port if it exists
        server=$t
    fi
    case $server in
    *library_manager)
        enstore_libraries="$enstore_libraries $server";;
    *media_changer)
        enstore_media_changers="$enstore_media_changers $server";;
    *mover)
        enstore_movers="$enstore_movers $server";;
    logserver)
        enstore_start_log=1;;
    file_clerk)
        enstore_start_fileclerk=1;;
    volume_clerk)
        enstore_start_volumeclerk=1;;
    admin_clerk)
        enstore_start_admin=1;;
    esac
done

###################################################################################################################################

# the logger needs to be next
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep log`" ];then
    if [ "${opt_ping-}" != 1 -a $enstore_start_log -eq 1 ];then
      if   [ ! "${opt_nocheck-}" ]\
        && udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep logserver |sed -e 's/.*://'` $timeout >/dev/null
        then
        echo "Log Server already started"
      else
        echo "Starting Log Server"
        cmd="python $ENSTORE_DIR/src/log_server.py --config_host=$enstore_config_host --config_port=$enstore_config_port"
        if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|log' >/dev/null; then
            title="Enstore Log Server"
            eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
        else
            eval "$cmd &"
        fi
        echo $! >> $enstore_db/`uname -n`-log_server_pids
        #sleep 1
      fi
    fi

    echo "Checking Log Server"
    #ecmd log --alive --list
    udp_sendWaitReply-withTimeout.sh `echo "$nodeplus_servers" | grep logserver | cut -d: -f2` \
                                     `echo "$nodeplus_servers" | grep logserver | cut -d: -f3` $timeout --tries $tries
    if [ $? -ne 0 ] ; then
        echo "   ...Log Server not reachable..."
        exit 1
    fi
fi

###################################################################################################################################

# volume clerk
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep vol`" ];then
    if [ "${opt_ping-}" != 1 -a $enstore_start_volumeclerk -eq 1 ];then
      if   [ ! "${opt_nocheck-}" ]\
        && udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep volume_clerk|sed -e 's/.*://'` $timeout>/dev/null
        then
        echo "Volume Clerk already started"
      else
        echo "Starting Volume Clerk"
        cmd="python $ENSTORE_DIR/src/volume_clerk.py --config_host=$enstore_config_host --config_port=$enstore_config_port"
        if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|vol' >/dev/null; then
            title="Enstore Volume Clerk"
            eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
        else
            eval "$cmd &"
        fi
        echo $! >> $enstore_db/`uname -n`-volume_clerk_pids
        #sleep 1
      fi
    fi

    echo "Checking Volume Clerk"
    #ecmd vcc --alive --list
    udp_sendWaitReply-withTimeout.sh `echo "$nodeplus_servers" | grep volume_clerk | cut -d: -f2` \
                                     `echo "$nodeplus_servers" | grep volume_clerk | cut -d: -f3` $timeout --tries $tries
    if [ $? -ne 0 ] ; then
        echo "   ...Volume Clerk not reachable..."
        exit 1
    fi
fi

###################################################################################################################################

# file clerk
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep fil`" ];then
    if [ "${opt_ping-}" != 1 -a $enstore_start_fileclerk = 1 ];then
      if   [ ! "${opt_nocheck-}" ]\
        && udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep file_clerk|sed -e 's/.*://'` $timeout >/dev/null
        then
        echo "File Clerk already started"
      else
        echo "Starting File Clerk"
        cmd="python $ENSTORE_DIR/src/file_clerk.py --config_host=$enstore_config_host --config_port=$enstore_config_port"
        if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|fil' >/dev/null; then
            title="Enstore File Clerk"
            eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
        else
            eval "$cmd &"
        fi
        echo $! >> $enstore_db/`uname -n`-file_clerk_pids
        #sleep 1
      fi
    fi

    echo "Checking  File Clerk"
    #ecmd fcc --alive --list
    udp_sendWaitReply-withTimeout.sh `echo "$nodeplus_servers" | grep file_clerk | cut -d: -f2` \
                                     `echo "$nodeplus_servers" | grep file_clerk | cut -d: -f3` $timeout --tries $tries
    if [ $? -ne 0 ] ; then
        echo "   ...File Clerk not reachable..."
    fi
fi

###################################################################################################################################

# library manager
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep lib`" ];then
    for i in $enstore_libraries; do
        if [ ! "${opt_ping-}" ];then
            if     [ ! "${opt_nocheck-}" ]\
                && udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep $i|sed -e 's/.*://'` $timeout >/dev/null
                then
                echo "Library Manager already started"
            else
                echo "Starting $i Library Manager"
                cmd="python $ENSTORE_DIR/src/library_manager.py \
                    --config_host=$enstore_config_host --config_port=$enstore_config_port $i"
                if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|lib' >/dev/null; then
                    title="Enstore Library Manager $i"
                    eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
                else
                    eval "$cmd &"
                fi
                echo $! >> $enstore_db/`uname -n`-library_manager_pids
                #sleep 1
            fi
        fi
        echo "Checking $i Library Manager"
        ecmd lmc --alive --list $i
        if [ $? -ne 0 ]; then
            echo "   ...$i Library Manager not reachable..."
            exit 1
        fi
    done
fi

###################################################################################################################################

# media changer
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep med`" ];then
    for i in $enstore_media_changers; do
        if [ ! "${opt_ping-}" ];then
            if     [ ! "${opt_nocheck-}" ]\
                && udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep $i|sed -e 's/.*://'` $timeout >/dev/null
                then
                echo "Media Changer already started"
            else
                echo "Starting $i Media Changer"
                cmd="python $ENSTORE_DIR/src/media_changer.py \
                    --config_host=$enstore_config_host --config_port=$enstore_config_port $i"
                if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|med' >/dev/null; then
                    title="Enstore Media Changer $i"
                    eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
                else
                    eval "$cmd &"
                fi
                echo $! >> $enstore_db/`uname -n`-media_changer_pids
                #sleep 1
            fi
        fi
        echo "Checking $i Media Changer"
        ecmd mcc --alive --list $i
        if [ $? -ne 0 ]; then
            echo "   ...$i Media Changer not reachable..."
            exit 1
        fi
    done
fi

###################################################################################################################################

# mover
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep mov`" ];then
    for i in $enstore_movers; do
        if [ ! "${opt_ping-}" ];then
            if     [ ! "${opt_nocheck-}" ]\
                && udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep $i|sed -e 's/.*://'` $timeout >/dev/null
                then
                echo "$i Mover already started"
            else
                echo "Starting $i Mover"
                cmd="python $ENSTORE_DIR/src/mover.py --config_host=$enstore_config_host --config_port=$enstore_config_port $i"
                if [ "${opt_xterm-}" ] && echo ${opt_xterm-} | egrep 'all|mov' >/dev/null; then
                    title="Enstore Mover $i"
                    eval "xterm -sl 2500 -T \"$title\" -e $cmd &"
                else
                    eval "$cmd &"
                fi
                echo $! >> $enstore_db/`uname -n`-mover_pids
            fi
        else
            echo "   ...No ping test for $i Mover...(yet)"
        fi
    done
fi

###################################################################################################################################
# dbase
#start database administrator
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep adm`" ];then
    if [ "${opt_ping-}" != 1 -a $enstore_start_admin -eq 1 ];then
        if [ -r $ENSTORE_DB/file -a -r $ENSTORE_DB/volume ] ;  then
            if    [ ! "${opt_nocheck-}" ]\
             && udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep admin_cle|sed -e 's/.*://'` $timeout>/dev/null
                then
                echo "DB Admin Server already started"
            else
                echo "Starting database checkpoint daemon  on `hostname`"
                db_checkpoint -h $ENSTORE_DB  -p 5 &
                echo $! >> $enstore_db/`uname -n`-db_check_pids

                echo "Starting database deadlock daemon  on `hostname`"
                db_deadlock -h $ENSTORE_DB  -t 1 &
                echo $! >> $enstore_db/`uname -n`-db_dlck_pids

                echo "Starting DB Admin Server"
                python $ENSTORE_DIR/src/admin_clerk.py --config_host=$enstore_config_host --config_port=$enstore_config_port &
                echo $! >> $enstore_db/`uname -n`-admin_pids
                #sleep 1
            fi
        else
            echo "ERROR: file and volume database are not present - can't start db tools"
            exit 1
        fi
    fi
    echo "Checking DB Admin Server"
    #ecmd acc --alive
    udp_sendWaitReply-withTimeout.sh `echo "$nodeplus_servers" | grep admin_clerk | cut -d: -f2` \
                                     `echo "$nodeplus_servers" | grep admin_clerk | cut -d: -f3` $timeout --tries $tries
    if [ $? -ne 0 ] ; then
        echo "   ...DB Admin  Server not reachable..."
        exit 1
    fi
fi

###################################################################################################################################

cd $place
