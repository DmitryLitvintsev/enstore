#!/bin/sh
# bin/$RCSfile$  $Revision$

if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi
#set -u  # force better programming and ability to use check for not set
set +u  # I don't like this, but it is needed for the eval command at bottom

phelp()     { usage="
enstore pnfs is a tool to control, manipulate and query pnfs files.

Here are the user options:

   enstore pnfs --tags   directory    lists the tags in the directory

   enstore pnfs --library [value]           sets library tag to value (must have correct cwd)
   enstore pnfs --file_family [value]       sets file family tag to value (must have correct cwd)
   enstore pnfs --file_family_wrapper [value] sets file family wrapper tag to value (must have correct cwd)
   enstore pnfs --file_family_width [value] sets library tag to value (must have correct cwd)

   enstore pnfs --files volmap-tape   lists all the files on specified tape in volmap

   enstore pnfs --xref   file         lists the cross-reference info about the file

   enstore pnfs --enstore_state          lists whether enstore is still accepting transfers

End of enstore pnfs help description

"
              echo "$usage"; }

. pnfs_common


if [ -z "${1-}" ] ; then
  cmd="phelp"
else
  # remove the initial --
  cmd1=`echo $1|sed s/--//1`
  cmd=p${cmd1}
  shift
fi


#eval $cmd $@ # the eval command eats spaces in the positional arguments, so this doesn't work!
eval $cmd \"$1\" \"$2\" \"$3\" \"$4\" \"$5\" \"$6\" \"$7\" \"$8\" \"$9\" # not happy with this, but it works
stat=$?
#if [ $stat -ne 0 ] ; then phelp; fi
exit $stat
