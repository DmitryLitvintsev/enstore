#!/bin/sh
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# bin/$RCSfile$  $Revision$
# returns rate from a mover

opts_wo_args=''
opts_w_args='update_delay|udp_timeout|udp_retries'
USAGE="`basename $0` mover_name  [--{$opts_w_args} <arg>] [--{$opts_wo_args}]"
if [ $# -lt 1 ];then
    echo "$USAGE"
    exit 1
else
    mover=$1
    shift 1
fi
while opt=`expr "${1-}" : '--\(.*\)'`;do
    shift
    eval "case \$opt in
    \\?) echo \"$USAGE\"; exit 0;;
#uncomment next 2 lines if we get some opts_wo_args
#NO#$opts_wo_args)
#NO#    eval opt_\$opt=1;;
    $opts_w_args)
        if [ $# = 0 ];then echo option $opt requires argument; exit 1; fi
        eval opt_\$opt=\"'\$1'\";shift ;;
    *)  echo \"invalid option: \$opt\"; exit 1;;
    esac"
done

nodes=`conf.sh`
host=`echo "$nodes" | grep -i $mover | grep mover| cut -f2 -d:`
port=`echo "$nodes" | grep -i $mover | grep mover| cut -f3 -d:`
mvr=`echo "$nodes" | grep -i $mover | grep mover| cut -f1 -d:| cut -f1 -d.`
#echo $host
#echo $port

if [ -z "${host-}" -o -z "${port-}" ] ; then
  echo $mover not found in
  echo "$nodes"
  exit 1
fi

python -c '
import sys
import time
import traceback
import udp_client
import errno
u = udp_client.UDPClient()
t=-1
tfmt="%a %m-%d-%Y-%H:%M:%S"
while 1==1:
  try:
    s = u.send( {"work":"status"}, ("'$host'",'$port'), '${opt_udp_timeout:-3}', '${opt_udp_retries:-2}' )
    #print "s=",s
    sts = 0
    state = "unknown"
    if s["state"]=="idle":
      state = "idle"
      wr_rate = 0.
      rd_rate = 0.
      print "%s wr_rate=%.3f rd_rate=%.3f wrote=%.10i read=%.10i left2write=%.10i dt=%.1f %9.9s %s %s %i" % (time.strftime(tfmt,time.localtime(time.time())), 0.,      0.,      0,       0,       0,       0., "idle", "'$mvr'","'$host'",'$port')
    elif s["mode"]=="w" and s["state"]=="busy":
      state = "writing"
      dt = s["time_stamp"]-s["zlast_status"]["time_stamp"]
      written = s["wr_bytes"]-s["zlast_status"]["wr_bytes"]
      readten = s["rd_bytes"]-s["zlast_status"]["rd_bytes"]
      left2write = s["rd_bytes"]-s["wr_bytes"]
      wr_rate = written/dt/1024./1024.
      rd_rate = readten/dt/1024./1024.
      print "%s wr_rate=%.3f rd_rate=%.3f wrote=%.10i read=%.10i left2write=%.10i dt=%.1f %9.9s %s %s %i" % (time.strftime(tfmt,time.localtime(time.time())), wr_rate, rd_rate, written, readten, left2write, dt, state, "'$mvr'","'$host'",'$port')
    sys.stdout.flush()
    time.sleep('${opt_update_delay:-60}')
  except errno.errorcode[errno.ETIMEDOUT]:
    print "%s wr_rate=%.3f rd_rate=%.3f wrote=%.10i read=%.10i left2write=%.10i dt=%.1f %9.9s %s %s %i" % (time.strftime(tfmt,time.localtime(time.time())), 0.,      0.,      0,       0,       0,       0., "timeout", "'$mvr'","'$host'",'$port')
    sys.stdout.flush()
  except:
    traceback.print_exc()
    sts=1
    break
del u
sys.exit( sts )
'
