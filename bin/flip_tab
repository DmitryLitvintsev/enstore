#!/bin/sh -u

if [ "${1:-}" = "-x" ]; then set -xv; shift; fi

usage() { echo "Usage: login as enstore to d0ensrv4, stkensrv4, or cdfensrv4"
	  echo "       enter `basename $0` [[un]lock]"
	}

[ "$USER" != enstore ] && usage && exit 1

node=`hostname -s`

case $node in
  stkensrv4)
     icap="0,1,0"
     ocap="0,0,0"
     sun=fntt
     ;;
  d0ensrv4)
     icap="1,1,0"
     ocap="1,0,0"
     sun=fntt
     ;;
  cdfensrv4)
     icap="0,0,0"
     ocap="0,1,0"
     sun=fntt2
     ;;
  *) usage
     exit 1
     ;;
esac

output=/tmp/`basename $0`.output

action=${1:-"lock"}
case $action in
  lock)
     work=/write_protect_work
     prot=on
     ;;
  unlock)
     work=/write_permit_work
     prot=off
     ;;
  *) usage
     exit 1
     ;;
esac

if [ ! -d $work ]; then
  echo `date` ERROR. $work does not exist
  exit 1
fi

if [ "$icap" != "$ocap" ]; then
  /usr/bin/rsh $sun -l acsss "echo set cap mode automatic $icap '\r' logoff | bin/cmd_proc -l -q 2>/dev/null"
fi

cd $work

for i in `ls -vI \*.\*`; do
  t0=`date  +'%s'`
  . $i |tee -a $output 2>&1
  echo
  echo
  if [ "$icap" = "$ocap" ]; then
    /usr/bin/rsh $sun -l acsss "echo set cap mode automatic $icap '\r' logoff | bin/cmd_proc -l -q 2>/dev/null"
    echo
    echo
    /bin/echo -n "Press Enter when all tapes have been loaded with tab in ${action}ed position"
    read ans
    while /bin/true; do
      cap=`/usr/bin/rsh $sun -l acsss "echo q cap $icap '\r' logoff | bin/cmd_proc -l -q 2>/dev/null"`
      capstate=`echo $cap | sed -e 's#.*automatic ##' | cut -f1 -d\ `
      if [ "$capstate" = "available" ]; then break; fi
      echo `date` Waiting for cap to be unloaded...
      sleep 5
    done
    /usr/bin/rsh $sun -l acsss "echo set cap mode manual $icap '\r' logoff | bin/cmd_proc -l -q 2>/dev/null"
    echo
    echo
  fi
  t1=`date  +'%s'`
  delta=`expr $t1 - $t0`
  deltam=`expr $delta / 60`
  deltas=`expr $delta % 60`
  echo That cycle took $deltam minutes $deltas seconds.
  /bin/echo -n "Were all of these steps successful [y/n]? "
  if read ans && expr "$ans" : '[Yy]' >/dev/null; then
     echo "... success acknowledged"
     echo
     echo "Now updating write-protect status in enstore..."
     # extract the volumes successfully entered, and set them as write-protected or write-permitted
     awk '{split($0,vols); for (v in vols) if (vols[v] ~ /^[[:upper:]]+[[:digit:]]+$/) print vols[v]}' $i | while read vol; do
       enstore vol --write-protect-$prot $vol
     done
     touch $i
     mv $i ${i}.done
  else
     echo "... failure acknowledged"
     mv $i ${i}.fail
  fi
  echo
  echo
  rem=`ls -vI \*.\* | wc -l`
  if expr $rem : 0 >/dev/null; then
     echo `date` There are no groups remaining. Thank you.
     break
  else
     /bin/echo -n "There are `expr $rem` groups remaining.  Do another [y/n]? "
     if read ans && expr "$ans" : '[Yy]' >/dev/null; then
	continue
     else
	break
     fi
  fi
done

if [ "$icap" != "$ocap" ]; then
  msgflag=
  while /bin/true; do
    cap=`/usr/bin/rsh $sun -l acsss "echo q cap $icap '\r' logoff | bin/cmd_proc -l -q 2>/dev/null"`
    capstate=`echo $cap | sed -e 's#.*automatic ##' | cut -f1 -d\ `
    if [ "$capstate" = "available" ]; then break; fi
    if [ -z "$msgflag" ]; then
      echo `date` Waiting for cap to be unloaded ...
      msgflag=done
    fi
    sleep 5
  done
  /usr/bin/rsh $sun -l acsss "echo set cap mode manual $icap '\r' logoff | bin/cmd_proc -l -q 2>/dev/null"
fi
