#!/bin/sh

# Script that
#    a. return mt command results of drives
#    b  eases mounting/dismounting of volumes in drives located in AML2 robot

# This script is meant to be run outside of enstore, hence everything
# is hard-coded and nothing is looked up from the configuration server

if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi
#set -u  # force better programming and ability to use check for not set

# the user must specify a drive or mount/dismount command
if [ -z "${1-}" ] ; then
  echo "Usage $0 <drive>   <mt-command>
Usage $0 <mount>   <media_type> <label> <drive>
Usage $0 <dismount <drive>"
  exit 1
fi

# we have nameserver lookup troubles - skip this step and use the numeric ip's

adic2=131.225.164.19          

rip1=131.225.164.1
rip2=131.225.164.2
rip5=131.225.164.5
rip9=131.225.164.15
rip10=131.225.16.14
rip11=131.225.164.17
rip12=131.225.164.18

fntt=131.225.164.13

ripsgi=131.225.164.16

samson=131.225.165.8           

d0enmvr1=131.225.164.24
d0enmvr2=131.225.164.25
d0enmvr3=131.225.164.26

d0ensrv1=131.225.164.21
d0ensrv2=131.225.164.22
d0ensrv3=131.225.164.23
d0ensrv4=131.225.164.84
d0ensrv5=131.225.164.85
d0ensrv6=131.225.164.86

d0enmvr4a=131.225.164.104         
d0enmvr5a=131.225.164.105         
d0enmvr6a=131.225.164.106         
d0enmvr7a=131.225.164.107         
d0enmvr8a=131.225.164.108         
d0enmvr9a=131.225.164.109         
d0enmvr10a=131.225.164.110         
d0enmvr11a=131.225.164.111         
d0enmvr12a=131.225.164.112         
d0enmvr13a=131.225.164.113         
d0enmvr14a=131.225.164.114         
d0enmvr15a=131.225.164.115         
d0enmvr16a=131.225.164.116         
d0enmvr17a=131.225.164.117         
d0enmvr18a=131.225.164.118         

dasnode=$d0ensrv3


# these drive nodes should be looked up in the config file!

de13node=$d0enmvr4a
de14node=$d0enmvr4a

dm18node=$d0enmvr5a
dm19node=$d0enmvr5a

dc15node=$d0enmvr6a
dc16node=$d0enmvr6a
dc17node=$d0enmvr5a
dc20node=$d0enmvr11a
dc21node=$d0enmvr11a
dc22node=$d0enmvr10a
dc23node=$d0enmvr10a
dc24node=$d0enmvr9a
dc25node=$d0enmvr9a
dc26node=$d0enmvr8a
dc27node=$d0enmvr8a
dc28node=$d0enmvr7a
dc29node=$d0enmvr7a


# these devives should be looked up in the config file!

dc15device=/dev/rmt/tps2d4n
dc16device=/dev/rmt/tps3d6n
dc17device=/dev/rmt/tps2d5n
dc20device=/dev/rmt/tps0d1n
dc21device=/dev/rmt/tps3d1n
dc22device=/dev/rmt/tps0d1n
dc23device=/dev/rmt/tps3d1n
dc24device=/dev/rmt/tps0d1n
dc25device=/dev/rmt/tps3d1n
dc26device=/dev/rmt/tps0d1n
dc27device=/dev/rmt/tps3d1n
dc28device=/dev/rmt/tps0d1n
dc29device=/dev/rmt/tps3d1n

de13device=/dev/rmt/tps2d4n
de14device=/dev/rmt/tps3d3n

dm18device=/dev/rmt/tps3d1n
dm19device=/dev/rmt/tps3d2n


#===================================================

drive=`echo $1 | tr '[A-Z]' '[a-z]'`
command="${2:-status}"

if [ "$drive" = "mount" ]; then
  if [ -z "${2-}" -o -z "${3-} -z "${4-} ] ; then
    echo "$0 $1 <media_type> <label> <drive>"
    exit 1
  else
    media_type=`echo $2 | tr '[a-z]' '[A-Z]'`
    label=$3
    drive=`echo $4 | tr  '[a-z]' '[A-Z]'`
    cmd="rsh $dasnode \". /usr/local/etc/setups.sh; setup aci;  dasadmin listd2 | grep $drive | sed -e 's/.*client: //' -e 's/ .*//'\""
    echo $cmd
    mount_node=`eval $cmd`; echo $mount_node
    cmd="rsh $mount_node \". /usr/local/etc/setups.sh; setup aci;  dasadmin mount -t $media_type $label $drive; echo \$?\""
    echo $cmd
    x=`eval $cmd`; echo $x
    stat=`echo $x | awk '{print $NF}'`;
    exit $stat
  fi

elif [ "$drive" = "dismount" ]; then
  if [ -z "${2-}" ] ; then
    echo "$0 $1 <drive>"
    exit 1
  else
    drive=`echo $2 | tr  '[a-z]' '[A-Z]'`
    cmd="rsh $dasnode \". /usr/local/etc/setups.sh; setup aci;  dasadmin listd2 | grep $drive | sed -e 's/.*client: //' -e 's/ .*//'\""
    echo $cmd
    dismount_node=`eval $cmd`; echo $mount_node
    cmd="rsh $dismount_node \". /usr/local/etc/setups.sh; setup aci;  dasadmin dismount -d $drive; echo \$?\""
    echo $cmd
    x=`eval $cmd`; echo $x
    stat=`echo $x | awk '{print $NF}'`;
    exit $stat
  fi
fi


aits="dm07 dm08 dm09 dm10 dm11 dm12 dm18 dm19"
mams="dc03 dc04 dc05 dc06 dc15 dc16 dc17 dc20 dc21 dc22 dc23 dc24 dc25 dc26 dc27 dc28 dc29"
dlts="de01 de02 de13 de14"

multiple=0
if [ $drive = "aits" ]; then
   drive="$aits"
   multiple=1
elif [ $drive = "mams" ]; then
   drive="$mams"
   multiple=1
elif [ $drive = "dlts" ]; then
   drive="$dlts"
   multiple=1
elif [ $drive = "all" ]; then
   drive="$aits $mams $dlts"
   multiple=1
fi
if [ $multiple -eq 1 ]; then
   for d in $drive; do
       cmd="$0 $d $command"
       echo $cmd
       eval $cmd
   done
   exit 0
fi

case $drive in

  de01) cmd="rsh $rip2   'mt -f /dev/rmt/tps3d1n $command 2>&1; echo \$?'" ;;
  de02) cmd="rsh $rip2   'mt -f /dev/rmt/tps3d2n $command 2>&1; echo \$?'" ;;

  dc03) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  dc04) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;
  dc05) cmd="rsh $rip1   'mt -f /dev/rmt/tps3d3n $command 2>&1; echo \$?'" ;;
  dc06) cmd="rsh $rip1   'mt -f /dev/rmt/tps3d4n $command 2>&1; echo \$?'" ;;

  dm07) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d1nrvc $command 2>&1; echo \$?'" ;;
  dm08) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d2nrvc $command 2>&1; echo \$?'" ;;
  dm09) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d5nrvc $command 2>&1; echo \$?'" ;;
  dm10) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d6nrvc $command 2>&1; echo \$?'" ;;
  dm11) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d3nrvc $command 2>&1; echo \$?'" ;;
  dm12) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d4nrvc $command 2>&1; echo \$?'" ;;

  de13) cmd="rsh $de13node 'mt -f $de13device $command 2>&1; echo \$?'" ;;
  de14) cmd="rsh $de14node 'mt -f $de14device $command 2>&1; echo \$?'" ;;

  dc15) cmd="rsh $dc15node 'mt -f $dc15device $command 2>&1; echo \$?'" ;;
  dc16) cmd="rsh $dc16node 'mt -f $dc16device $command 2>&1; echo \$?'" ;;
  dc17) cmd="rsh $dc17node 'mt -f $dc17device $command 2>&1; echo \$?'" ;;
  dc20) cmd="rsh $dc20node 'mt -f $dc20device $command 2>&1; echo \$?'" ;;
  dc21) cmd="rsh $dc21node 'mt -f $dc21device $command 2>&1; echo \$?'" ;;
  dc22) cmd="rsh $dc22node 'mt -f $dc22device $command 2>&1; echo \$?'" ;;
  dc23) cmd="rsh $dc23node 'mt -f $dc23device $command 2>&1; echo \$?'" ;;
  dc24) cmd="rsh $dc24node 'mt -f $dc24device $command 2>&1; echo \$?'" ;;
  dc25) cmd="rsh $dc25node 'mt -f $dc26device $command 2>&1; echo \$?'" ;;
  dc26) cmd="rsh $dc26node 'mt -f $dc26device $command 2>&1; echo \$?'" ;;
  dc27) cmd="rsh $dc27node 'mt -f $dc27device $command 2>&1; echo \$?'" ;;
  dc28) cmd="rsh $dc28node 'mt -f $dc28device $command 2>&1; echo \$?'" ;;
  dc29) cmd="rsh $dc29node 'mt -f $dc29device $command 2>&1; echo \$?'" ;;

  dm18) cmd="rsh $dm18node 'mt -f $dm18device $command 2>&1; echo \$?'" ;;
  dm19) cmd="rsh $dm19node 'mt -f $dm19device $command 2>&1; echo \$?'" ;;

  stk1) cmd="rsh $rip9   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  stk2) cmd="rsh $rip9   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;

    *)  cmd="echo $drive does not exists in `basename $0`; echo 1"

esac
cmd2="x=\"\`$cmd\`\""
echo $cmd

# connection refused are a problem (Don't forget to option nowait.1000 in inetd.conf)
# retries on busys as well
count=0
tries=60

while [ $count -le $tries ]; do
  eval $cmd2
  #echo $x
  if [ `echo $x | grep -ci "refused"` -eq 0 -a \
       `echo $x | grep -ci "resource busy"` -eq 0 \
     ] ; then break
  fi
  count=`expr $count + 1`
  sleep 1
done

stat=`echo $x | awk '{print $NF}'`;
echo "$x"
exit $stat
