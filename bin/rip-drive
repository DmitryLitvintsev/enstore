#!/bin/sh

# Script that 
#    a. return mt command results of drives 
#    b  eases mounting/dismounting of volumes in drives 
# located in AML2 robot

# This script is meant to be run outside of enstore, hence everything
# is hard-coded and nothing is looked up from the configuration server

if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi
#set -u  # force better programming and ability to use check for not set

# the user must specify a drive or mount/dismount command
if [ -z "${1-}" ] ; then
  echo "Usage $0 <drive>   <mt-command>
Usage $0 <mount>   <media_type> <label> <drive>
Usage $0 <dismount <drive>"
  exit 1
fi

# we have nameserver lookup troubles - skip this step and use the numeric ip's
rip1=131.225.164.1
rip2=131.225.164.2
rip5=131.225.164.5
rip9=131.225.164.15
rip10=131.225.16.14
rip11=131.225.164.17
rip12=131.225.164.18
fntt=131.225.164.13
ripsgi=131.225.164.16
d0enmvr1=131.225.164.24
d0enmvr2=131.225.164.25
d0enmvr3=131.225.164.26

d0ensrv3=131.225.164.23
rip8=131.225.164.8
dasnode=$d0ensrv3

drive=`echo $1 | tr '[A-Z]' '[a-z]'`

if [ "$drive" = "mount" ]; then
  if [ -z "${2-}" -o -z "${3-} -z "${4-} ] ; then
    echo "$0 $1 <media_type> <label> <drive>"
    exit 1
  else
    media_type=`echo $2 | tr '[a-z]' '[A-Z]'`
    label=$3
    drive=`echo $4 | tr  '[a-z]' '[A-Z]'`
    cmd="rsh $dasnode \". /usr/local/etc/setups.sh; setup aci;  dasadmin listd2 | grep $drive | sed -e 's/.*client: //' -e 's/ .*//'\""
    echo $cmd
    mount_node=`eval $cmd`; echo $mount_node
    cmd="rsh $mount_node \". /usr/local/etc/setups.sh; setup aci;  dasadmin mount -t $media_type $label $drive; echo \$?\""
    echo $cmd
    x=`eval $cmd`; echo $x
    stat=`echo $x | awk '{print $NF}'`;
    exit $stat
  fi

elif [ "$drive" = "dismount" ]; then
  if [ -z "${2-}" ] ; then
    echo "$0 $1 <drive>"
    exit 1
  else
    drive=`echo $2 | tr  '[a-z]' '[A-Z]'`
    cmd="rsh $dasnode \". /usr/local/etc/setups.sh; setup aci;  dasadmin listd2 | grep $drive | sed -e 's/.*client: //' -e 's/ .*//'\""
    echo $cmd
    dismount_node=`eval $cmd`; echo $mount_node
    cmd="rsh $dismount_node \". /usr/local/etc/setups.sh; setup aci;  dasadmin dismount -d $drive; echo \$?\""
    echo $cmd
    x=`eval $cmd`; echo $x
    stat=`echo $x | awk '{print $NF}'`;
    exit $stat
  fi
fi
 

aits="dm07 dm08 dm09 dm10 dm11 dm12 dm18 dm19"
mams="dc03 dc04 dc05 dc06 dc15 dc16 dc17"
dlts="de01 de02 de13 de14"

multiple=0
if [ $drive = "aits" ]; then
   drive="$aits"
   multiple=1
elif [ $drive = "mams" ]; then
   drive="$mams"
   multiple=1
elif [ $drive = "dlts" ]; then
   drive="$dlts"
   multiple=1
elif [ $drive = "all" ]; then
   drive="$aits $mams $dlts"
   multiple=1
fi
if [ $multiple -eq 1 ]; then
   for d in $drive; do
       cmd="$0 $d $command"
       echo $cmd
       eval $cmd
   done
   exit 0
fi

case $drive in

  de01) cmd="rsh $rip2   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  de02) cmd="rsh $rip2   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;

  dc03) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  dc04) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;
  dc05) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d3n $command 2>&1; echo \$?'" ;;
  dc06) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d4n $command 2>&1; echo \$?'" ;;

  dm07) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d1nrvc $command 2>&1; echo \$?'" ;;
  dm08) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d2nrvc $command 2>&1; echo \$?'" ;;
  dm09) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d5nrvc $command 2>&1; echo \$?'" ;;
  dm10) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d6nrvc $command 2>&1; echo \$?'" ;;
  dm11) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d3nrvc $command 2>&1; echo \$?'" ;;
  dm12) cmd="rsh $ripsgi 'mt -f /dev/rmt/tps2d4nrvc $command 2>&1; echo \$?'" ;;



  de13) cmd="rsh $d0enmvr3 'mt -f /dev/rmt/tps2d4n $command 2>&1; echo \$?'" ;;
  de14) cmd="rsh $d0enmvr3 'mt -f /dev/rmt/tps3d3n $command 2>&1; echo \$?'" ;;

  dc15) cmd="rsh $d0enmvr1 'mt -f /dev/rmt/tps5d4n $command 2>&1; echo \$?'" ;;
  dc16) cmd="rsh $d0enmvr1 'mt -f /dev/rmt/tps4d6n $command 2>&1; echo \$?'" ;;
  dc17) cmd="rsh $d0enmvr1 'mt -f /dev/rmt/tps3d5n $command 2>&1; echo \$?'" ;;

  dm18) cmd="rsh $d0enmvr2 'mt -f /dev/rmt/tps4d1n $command 2>&1; echo \$?'" ;;
  dm19) cmd="rsh $d0enmvr2 'mt -f /dev/rmt/tps4d2n $command 2>&1; echo \$?'" ;;

  stk1) cmd="rsh $rip9   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  stk2) cmd="rsh $rip9   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;

    *)  cmd="echo $drive does not exists in `basename $0`; echo 1"

esac
cmd2="x=\"\`$cmd\`\""
echo $cmd

# connection refused are a problem (Don't forget to option nowait.1000 in inetd.conf)
# retries on busys as well
count=0
tries=60

while [ $count -le $tries ]; do
  eval $cmd2
  #echo $x
  if [ `echo $x | grep -ci "refused"` -eq 0 -a \
       `echo $x | grep -ci "resource busy"` -eq 0 \
     ] ; then break
  fi
  count=`expr $count + 1`
  sleep 1
done

stat=`echo $x | awk '{print $NF}'`;
echo "$x"
exit $stat
