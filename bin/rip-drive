#!/bin/sh

if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi
#set -u  # force better programming and ability to use check for not set

# the user must specify a drive
if [ -z "${1-}" ] ; then
  echo "Usage eject drive-to-eject mt-command"
fi

# the user can specify an mt command, or else we default to status
if [ -n "${2-}" ] ; then
  command=$2
else
  command=status
fi

# we have nameserver lookup troubles - skip this step and use the numeric ip's
rip1=131.225.164.1
rip2=131.225.164.2
rip9=131.225.164.15
rip11=131.225.164.17
rip12=131.225.164.18
fntt=131.225.164.13
ripsgi=131.225.164.16

drive=`echo $1 | tr '[A-Z]' '[a-z]'`
case $drive in

  de01) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  de02) cmd="rsh $rip1   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;
  dc03) cmd="rsh $rip2   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  dc04) cmd="rsh $rip2   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;
  dc05) cmd="rsh $rip2   'mt -f /dev/rmt/tps2d3n $command 2>&1; echo \$?'" ;;
  dc06) cmd="rsh $rip2   'mt -f /dev/rmt/tps2d4n $command 2>&1; echo \$?'" ;;
  dm07) cmd="rsh $fntt   'mt -f /dev/rmt/0cn     $command 2>&1; echo \$?'" ;;
  dm08) cmd="rsh $fntt   'mt -f /dev/rmt/1cn     $command 2>&1; echo \$?'" ;;
  dm09) cmd="rsh $fntt   'mt -f /dev/rmt/2cn     $command 2>&1; echo \$?'" ;;
  dm10) cmd="rsh $fntt   'mt -f /dev/rmt/3cn     $command 2>&1; echo \$?'" ;;
  dm11) cmd="rsh $fntt   'mt -f /dev/rmt/4cn     $command 2>&1; echo \$?'" ;;
  dm12) cmd="rsh $fntt   'mt -f /dev/rmt/5cn     $command 2>&1; echo \$?'" ;;

  de13) cmd="rsh $rip11  'mt -f /dev/rmt/tps2d4n $command 2>&1; echo \$?'" ;;
  de14) cmd="rsh $rip12  'mt -f /dev/rmt/tps2d3n $command 2>&1; echo \$?'" ;;
  dc15) cmd="rsh $rip12  'mt -f /dev/rmt/tps5d4n $command 2>&1; echo \$?'" ;;
  dc16) cmd="rsh $rip12  'mt -f /dev/rmt/tps4d6n $command 2>&1; echo \$?'" ;;
 #dc17) cmd="rsh $rip12  'mt -f /dev/rmt/tps2d3n $command 2>&1; echo \$?'" ;;
  dm18) cmd="rsh $rip11  'mt -f /dev/rmt/tps4d1n $command 2>&1; echo \$?'" ;;
  dm19) cmd="rsh $rip11  'mt -f /dev/rmt/tps4d2n $command 2>&1; echo \$?'" ;;

  stk1) cmd="rsh $rip9   'mt -f /dev/rmt/tps2d1n $command 2>&1; echo \$?'" ;;
  stk2) cmd="rsh $rip9   'mt -f /dev/rmt/tps2d2n $command 2>&1; echo \$?'" ;;

    *)  cmd="echo $drive does not exists in `basename $0`; echo 1"

esac
cmd2="x=\"\`$cmd\`\""
echo $cmd

# connection refused are a problem (Don't forget to option nowait.1000 in inetd.conf)
# retries on busys as well
count=0
tries=60

while [ $count -le $tries ]; do
  eval $cmd2
  #echo $x
  if [ `echo $x | grep -ci "refused"` -eq 0 -a \
       `echo $x | grep -ci "resource busy"` -eq 0 \
     ] ; then break
  fi
  count=`expr $count + 1`
  sleep 1
done

stat=`echo $x | awk '{print $NF}'`;
echo $x
exit $stat



