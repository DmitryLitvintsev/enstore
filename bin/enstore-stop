#!/bin/sh
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# bin/$RCSfile$   $Revision$
# stop enstore processes on the current node

me=`whoami`
PID_DIR=/tmp/enstore/$me

# NOTE: some options (w/ or w/o args) are currently provided just for restart
# (compatible with start)
opts_w_args='xterm|just'
USAGE="`basename $0`: [--{$opts_w_args} <arg>]"
while opt=`expr "${1-}" : '--\(.*\)'`;do
    shift
    eval "case \$opt in
    \\?) echo \"$USAGE\"; exit 0;;
    $opts_w_args)
        if [ $# = 0 ];then echo option $opt requires argument; exit 1; fi
        eval opt_\$opt=\"'\$1'\";shift ;;
    *)  echo \"invalid option: \$opt\"; exit 1;;
    esac"
done

# this works for the case where opt_just is null
opt_just_ere=`echo ${opt_just-} | sed -e 's/ /|/g' -e 's/,/|/g'`

local_host=`hostname`
if expr "$local_host" : '.*\.' >/dev/null; then 
    local_host=`nslookup $local_host | sed -e '/Name.*/ !d' -e 's/Name: *//'`
fi

timeout=1
tries=10

nodeplus_servers=`conf.sh $local_host 3 2`

# check if Configuration Server is up
if [ $? -ne 0 ] ; then
    echo "   ...Configuration Server not reachable..."
    exit 1
fi

# now just isolate the servers for this node
node_servers=`echo "$nodeplus_servers" | grep :$local_host: | sed -e "s/:$local_host//"`

if [ ! "$node_servers" ];then
    #echo try alternate host specification
    if  hh=`expr "$local_host" : '\([^.]*\)\.'`;then
        :
    else
        hh=`nslookup $local_host | sed -e '/Name.*/ !d' -e 's/Name: *//'`
    fi
    nodeplus_servers=`conf.sh $hh 3 2`
    # check if Configuration Server is up
    if [ $? -ne 0 ] ; then
	echo "   ...Configuration Server not reachable..."
	exit 1
    fi

    node_servers=`echo "$nodeplus_servers" | grep :$hh: | sed -e "s/:$hh//"`
fi


turnoff() { for pid in $1; do
                if [ "$pid" = "$1" ] ; then echo "No $2 running"; break; fi
                pidkill $pid
            done; }

turnoff_s() { for pid in $1; do
                if [ "$pid" = "$1" ] ; then echo "No $2 running"; break; fi
                pidkill_s $pid
            done; }

if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep adm`" ];then
    udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep adm |sed -e 's/.*://'` $timeout --work quit >/dev/null
    turnoff_s "$PID_DIR/`uname -n`-db_*_pids"          "databases"
    turnoff "$PID_DIR/`uname -n`-admin*pids"           "admin"
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep inq`" ];then
    udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep inq |sed -e 's/.*://'` $timeout --work quit >/dev/null
    turnoff "$PID_DIR/`uname -n`-inquisitor*pids"      "inquisitor"
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep fil`" ];then
    udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep fil |sed -e 's/.*://'` $timeout --work quit >/dev/null
    turnoff "$PID_DIR/`uname -n`-file_clerk*pids"      "file_clerk"
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep vol`" ];then
    udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep vol |sed -e 's/.*://'` $timeout --work quit >/dev/null
    turnoff "$PID_DIR/`uname -n`-volume_clerk*pids"    "volume_clerk"
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep mov`" ];then
    for serv in $PID_DIR/`uname -n`-*-mover_pid; do
        do_server=`echo $serv | egrep "$opt_just_ere"`
        if [ ! "$do_server" ];then continue; fi
	udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep $opt_just_ere |sed -e 's/.*://'` $timeout --work quit >/dev/null

        # note: turnoff function assumes filename globbing, so we must add an *
        turnoff_s "$serv*"           "movers"
    done
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep med`" ];then
    for serv in $PID_DIR/`uname -n`-*-media_changer_pid; do
        do_server=`echo $serv | egrep "$opt_just_ere"`
        if [ ! "$do_server" ];then continue; fi
	udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep $opt_just_ere |sed -e 's/.*://'` $timeout --work quit >/dev/null

        # note: turnoff function assumes filename globbing, so we must add an *
        turnoff "$serv*"   "media_changers"
    done
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep lib`" ];then
    for serv in $PID_DIR/`uname -n`-*-library_manager_pid; do
        do_server=`echo $serv | egrep "$opt_just_ere"`
        if [ ! "$do_server" ];then continue; fi
        #echo "serv is <$serv>"
        #echo "opt_just_ere is <$opt_just_ere>"
	udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep $opt_just_ere |sed -e 's/.*://'` $timeout --work quit >/dev/null

        # note: turnoff function assumes filename globbing, so we must add an *
        turnoff "$serv*" "library managers"
    done
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep conf`" ];then
    echo $node_servers
    udp_sendWaitReply-withTimeout.sh $local_host $ENSTORE_CONFIG_PORT $timeout --work quit >/dev/null
    turnoff "$PID_DIR/`uname -n`-configuration*pids"   "configuration server"
fi
if [ "${opt_just-}" = "" -o "`echo ${opt_just-}|grep log`" ];then
    udp_sendWaitReply-withTimeout.sh $local_host `echo "$node_servers"|grep log |sed -e 's/.*://'` $timeout --work quit >/dev/null
    turnoff "$PID_DIR/`uname -n`-log_server*pids"      "log server"
fi

#    turnoff "$PID_DIR/`uname -n`-*pids"                "what else"

exit
