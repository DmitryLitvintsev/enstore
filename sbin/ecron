#!/bin/sh -xv
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi
if [ "${1:-}" = "-q" ] ; then export quiet=1; shift; else quiet=0; fi

# fermi specif information
hypmail="hyp-enstore@hppc.fnal.gov"

# sun nodes need an extended path in order to find all the regular unix commands
if [ `uname` = SunOS ]; then
  PATH=$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/lbin:/usr/ucb:/usr/ccs/bin
fi

start=`date +"%Y-%m-%d:%H:%M:%S"`
basename=`basename $0`
# sbin/$RCSfile$  $Revision$

# This is a derivative work, but it is still based on:

# Copyrighted as an unpublished work.
# (c) Copyright 1996,1997,1998 DESY Hamburg DMG-Division
# All rights reserved.

# RESTRICTED RIGHTS

# These programs are supplied under a license.  They may be used,
# disclosed, and/or copied only as permitted under such license
# agreement.  Any copy must contain the above copyright notice and
# this restricted rights notice.  Use, copying, and/or disclosure
# of the programs is strictly prohibited unless otherwise provided
# in the license agreement.

if test -w /dev/console -a $quiet -ne 1; then
  echo "$start: $0 $@ ...starting" >/dev/console
fi

sendMail() {
  filename=$1
  mode=$2
  if [ "$mode" = "emergency" ] ; then
     mailaddress=$ENSTORE_MAIL
  else
     mailaddress=$ENSTORE_MAIL
  fi
  if [ -r $noMail ]; then
     mailaddress=$hypmail
  fi
  /usr/bin/Mail -s "${3:-\"Enstore ecron Scheduler\"}" $mailaddress <$filename
  if test -w /dev/console -a $quiet -ne 1; then
     echo "`date`: $0 $@ has failed... sending mail to $mailaddress" >/dev/console
    echo < $filename >/dev/console
  fi
}

quit() {
  message="$1"
  code=$2
  if [ -n "${message-}" ]; then echo "$1"; fi
  if [ "${3:-}" != "keepactive" ] ; then rmdir $activeFlag >/dev/null 2>&1; fi
  done=`date +"%Y-%m-%d:%H:%M:%S"`
  echo "$done $code" >> $histogram
  if test -w /dev/console -a $quiet -ne 1; then
    echo "$done: $0 $@ ...finished. code=$code" >/dev/console
  fi
  exit $code
}

# May 12, 1999 Modified by huangch@fnal.gov to take arguments
#
# $0 [[-setup product] | [-D VARIABLE=value]]* cmd
#
# where product is any ups product that needs to be setup
#   and VARIABLE=value is an assignment of environmental variable
#
# product can be of the syntax with multiple products
#
# multiple -setup and -D are allowed

# May 13, 1999 Modified again to add -p job_name option
#
# $0 [[-setup product] | [-D VARIABLE=value] | [-p job_name] ]* cmd
#
# job_name is used to identify the job. If ommitted, cmd is default
# to ease the implementation, multiple -p are allowed, but only the
# last one is effective

# May 24, 1999 Modified again to add -d dir option
#
# $0 [[-setup product] | [-D VARIABLE=value] | [-p job_name] | [-d dir] ]* cmd
#
# dir is used to specify the current directory that the cmd is executed
# in. If ommitted, `pwd` is default. To ease the implementation,
# multiple -d are allowed, but only the last one is effective

# additional products

products=
job=
cwd=`pwd`

while [ $1 = "-setup" ] || [ $1 = "-D" ] || [ $1 = "-p" ] || [ $1 = "-d" ]
do
	case $1 in
	-setup)
		if [ -z "${products}" ]
		then
			products=$2
		else
			products=${products},$2
		fi
		;;
	-D)
		var=`echo $2 | cut -f 1 -d '='`
		eval $2
		export $var
		;;
	-p)
		job=$2
		;;
	-d)
		cwd=$2
		;;
	esac
	shift
	shift
done

cd $cwd		# to working directory

if [ -n "${job}" ]
then
	procName=${job}
else
	procName=$1
fi

procInfos=$HOME/CRON/$procName
activeFlag=${procInfos}ACTIVE
histogram=${procInfos}HISTOGRAM
procOutput=${procInfos}-output
procMail=${procInfos}-mail
noMail=${procInfos}NOMAIL
noNeg=${procInfos}NONEG

rm -f $procOutput
rm -f $procMail

echo "$start 10" >> $histogram

#  check whether this proc is enabled
if [ ! -f ${procInfos}OK ] ; then quit ""  -1 ; fi

#  check if a similar proc is already active
mkdir $activeFlag 1>/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then 
   if [ ! -f $noNeg ] ; then 
      quit "" -2 "keepactive"
   else
      exit 0
   fi
fi

if [ $# -eq 0 ] ; then quit "USAGE: $basename <enstoreName> <args ... >" -3; fi

setup=/usr/local/etc/setups.sh
if [ ! -f $setup ] ; then quit "$setup not found" -4; fi
. $setup
# should check that enstore was setup properly as well
setup enstore

# setup additional products, if any

if [ -n "${products}" ]
then
 	setup ${products}
fi

# make sure procName is set to $1 again

procName=$1

shift
#echo  Executing: $procName $*

eval $procName $*  >$procOutput 2>&1
problem=$?
# adjust the exit code so that it does not disappear off of the cron job plot
if [ $problem -gt 5 -o $problem -lt -5 ] ; then
   problem=7
fi
if [ $problem -ne 0 ] ; then
   echo "" >$procMail
   echo "  RC = $problem">>$procMail
   echo "  The Enstore ecron Scheduler found a problem running task !!! $procName $* !!! " >>$procMail
   echo "  Uname      :" `uname -a`  >>$procMail
   echo "  Date       :" `date`      >>$procMail
   echo "  Path       : $procName $* "  >>$procMail
   echo "  ReturnCode : $problem "   >>$procMail
   echo "  Working dir: $cwd "   >>$procMail
   echo "  Output and error messages ... " >>$procMail
   echo "  -------------------- start of messages ---------------------- ">>$procMail
   cat $procOutput >>$procMail 2>/dev/null
   echo "  -------------------- end of messages   ---------------------- ">>$procMail
   sendMail $procMail emergency "ecron rc=$problem: $procName $* "
fi

quit "" $problem
