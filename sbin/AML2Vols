#!/bin/sh
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# this script runs as user enstore

node=`hostname -s`
gang=`gang`
case $gang in
   d0en) media=3480
	 ;;
  stken) media=DECDLT
	 ;;
      *) echo \"$0\" not supported on $gang
	 exit 1
	 ;;
esac

copy_node=${gang}srv4
plot_node=${gang}srv2

robot="D0 ADIC AML/2"

Quarter_ago=`date --date "91 days ago" +"%Y-%m-%d:%H:%M:%S"`

if [ $node = $copy_node ] ; then

  volfile=/tmp/ADICROBOT-VOLUMES-$gang
  rm -f $volfile

  output=${1:-/dev/tty}
  shift
  [ -f $output ] && rm -f $output

  cat << EOF >>$output
<html> <head> <title>$robot Volume Status Page</title> </head>
<body>
<body bgcolor="#ffffff" text=#a0a0ff">
<meta http-equiv="Refresh" content="900">
<h1><center>$robot Volume Fetch Begin: `date`</center><h1>
<hr>
EOF

  do_awk() { awk -v Media=$1 -v Volfile=$2 '
	     END {do {pipe=sprintf("dasadmin qvolsrange \"%s\" \"\" 1000", Next)
		      while ((pipe | getline) > 0)
			if ( $1 == "volser" && $4 == Media ) print >Volfile
			else if ( $0 ~ /^more data/ )	     More++
			else if ( $0 ~ /no more data/ )      More=0
			else if ( $0 ~ /next volser/ )       Next=$3
			else if ( $0 ~ /count/ )	     Count+=$2
		      close(pipe)
		     } while ( More > 0 && More < 30 )
		  print Count}' /dev/null
	   }

  total=`do_awk $media $volfile`

  cat << EOF >>$output
<h1><center>Total Volumes Fetched : $total</center><h1>
<h1><center>$robot Volume Fetch Done : `date`</center><h1>
<hr>
EOF

  filter="awk -v Media=$media '\$4 == Media'"

  cat << EOF >>$output
<h1>Tapes in the $robot satisfying: "$filter"
<pre>
EOF

  cat $volfile >>$output

  cat << EOF >>$output
</pre>
<hr>
<h1><center>$robot Volume Status Page Done : `date`</center><h1>
<hr>
</body>
EOF

  now=`date +"%Y-%m-%d:%H:%M:%S"`
  # capacity of a full tower for each media type
  case $media in
    DECDLT) type=DLT
	    cap=4320  # 32x15x9
	    ;;
      3480) type=LTO
	    cap=4800  # 32x15x10
	    ;;
       8MM) type=8MM
	    cap=7168  # 32x16x14
	    ;;
  esac
  used=`wc -l $volfile | awk '{print $1}'`
  free=`expr $cap - ${used:-0}`
  echo "$now $type $cap ${used:-0} ${free:-0}" >>$HOME/AML2_USED_SLOTS.$type

  for remote_copy
  do
    if [ ! \( -c $output -o -c $remote_copy \) ] ; then
      enrcp $output $remote_copy
    fi
  done

elif [ $node = $plot_node ] ; then

  pltcmd=/tmp/aml2.us.gnu
  enrcp $copy_node:AML2_USED_SLOTS* $HOME/
  now=`date +"%Y-%m-%d:%H:%M:%S"`
  for i in $HOME/AML2_USED_SLOTS*; do
    type=`basename $i | cut -f2 -d.`
    rm -f $pltcmd
    free=`tail -n1 $i | awk '{print $5}'`
    echo "set output \"/tmp/tower.$type.ps\"
set terminal postscript color solid
set title \"Used Slots in AML/2 of Type $type $now\"
set xlabel \"Date\"
set timefmt \"%Y-%m-%d:%H:%M:%S\"
set xdata time
set xrange [\"$Quarter_ago\" : ]
set ylabel \"Number Used\"
set grid
set yrange [0: ]
set format x \"%m-%d\"
set nokey
set label \"Plotted `date` \" at graph .99,0 rotate font \"Helvetica,10\"
set label \"$free Free\" at graph .2,.9 font \"Helvetica,80\"
plot \"$i\" using 1:3 w impulses linetype 2, \"$i\" using 1:4 t \"Used Slots\" w impulses linetype 1" >$pltcmd
    gnuplot $pltcmd
    convert -rotate 90 /tmp/tower.$type.ps /tmp/tower.$type.jpg
    convert -geometry 120x120 -modulate 80 /tmp/tower.$type.jpg /tmp/tower.${type}_stamp.jpg
  done
  cp /tmp/tower*.ps /tmp/tower*.jpg /fnal/ups/prd/www_pages/enstore/

else
  echo \"$0\" runs only on $copy_node or $plot_node
  exit 1

fi
