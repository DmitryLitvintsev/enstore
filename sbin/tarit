#!/bin/sh
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# $Id$

# This script attempts to backup importatnt things on a node

bang=`echo -e "\041"`
node=`uname -n| sed -e 's/\([^\.]\)\..*/\1/'`
case $node in
  stken*|rip9|rip10)
          gang=stken
          op="-ne"
          ;;
   d0en*) gang=d0en
          op="-eq"
          ;;
   rip[1-8])
          echo `date` NOT backing up rip nodes - Policy choice.
          exit 0
          ;;
       *) gang=UNKNOWN
          ;;
esac

d=`date +"%j" | sed -e 's/^0*//'`
d2=`expr $d \/ 2 \* 2`

select="$d2 $op $d"
if test $select; then
  BACKUP=/master
# rip8:/fnal  /master nfs noauto 0 0
# rip8:/rip8b /master nfs noauto 0 0
else
  BACKUP=/backup
# d0ensrv3:/diskc  /backup nfs noauto 0 0
# stkensrv3:/diskc /backup nfs noauto 0 0
fi

# HACK UNTIL DISKS STRAIGHTENED OUT!
if /bin/true; then
  BACKUP=/backup
fi
# END HACK

mount $BACKUP

node=`uname -n | sed -e 's/.fnal.gov//'`

if [ `echo $node | grep -c mvr` -ne 0 ]; then
  M=$BACKUP/enstore/$gang/movers
else
  M=$BACKUP/enstore/$gang/servers/`echo $node | eval sed -e 's/$gang//'`
fi
export M

here=`pwd`
cd $M
if [ "$BACKUP" = "/backup" ]; then
  mkdir -p old >/dev/null 2>/dev/null
  mv files.err files.list files.tgz partition_table.dd old
else
  rm files.err files.list files.tgz partition_table.dd
fi
cd $here

echo "`date`: dd-ing partition table to $M/partition_table"
dd if=/dev/hda of=$M/partition_table.dd bs=512 count=1

# generate a script excluding files we don't care about.
# NOTE:  no users files are backed up.
file_users=/tmp/file_users
export file_users
rm -f $file_users
users=""
ls -1 /home | while read user; do if [ "$user" != "enstore" ]; then
   users="$users --exclude=\'/home/$user/*\'" ; fi; rm -f $file_users; echo "$users" > $file_users; done
users=`cat $file_users`
rm -f $file_users
cmd=""
cmd="nice -n 20 tar -l
--exclude='/lost+found/*' --exclude=/proc/ --exclude='/tmp/*' --exclude='/var/log/*'
--exclude='/*\.jon*' --exclude='/*\.fnal\.gov\.startup' --exclude='/*\.fnal\.gov\.monitor_server.output'
--exclude=BITERROR --exclude=SEL --exclude='/var/tmp/*' --exclude='/var/spool/mqueue/*' --exclude=.netscape
$cmd $users  -czf $M/files.tgz  / 2>$M/files.err"
echo "`date`: starting tar"
echo $cmd
eval $cmd
echo "`date`: tar complete"
ls -alR $M

# on server1, also copy all "special" node-specific files from all nodes
if [ $node = ${gang}srv1 ]; then
  SPECIAL=$BACKUP/enstore/$gang/special
  mkdir -p $SPECIAL >/dev/null 2>&1
  SF=$SPECIAL/special_files
  rm -f $SF
  echo >$SF "\
#$bang/bin/sh
thisnode=\`uname -n| sed -e 's/\([^\.]\)\..*/\1/'\`
F=/tmp/\${thisnode}.special.tgz
rm -fr \$F
tar -czf \$F \\
  /var/adm/krb5/* \\
  /etc/fstab \\
  /etc/rc.d/rc.local \\
  /etc/rc.d/rc.sysinit \\
  /etc/hosts.* \\
  /etc/HOSTNAME \\
  /etc/ntp.conf \\
  /etc/ntp \\
  /fnal/ups/kt/*  \\
  /etc/krb5.keytab \\
  /etc/krb5.conf \\
  /home/*/.k5login \\
  /root/.k5login \\
  /home/*/.k5user \\
  /root/.k5user \\
  /etc/sysconfig/network \\
  /etc/sysconfig/network-scripts/ifcfg* \\
  /usr/local/etc/farmlets \\
  /var/spool/cron/*
enrcp \$F $node:$SPECIAL
"
  chmod +x $SF
  rgang -c $gang $SF /tmp/special_files
  rgang $gang /tmp/special_files
  ls -l $SPECIAL
fi

umount $BACKUP
