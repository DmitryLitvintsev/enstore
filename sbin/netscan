#!/bin/sh
set -u  # force better programming and ability to use check for not set

if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# this is cheap argument processing. Must be in this order when checking.
if [ "${1:-}" = "-a" ] ; then ALARM=1; shift; else ALARM=0; fi
if [ "${1:-}" = "-q" ] ; then QUIET=1; shift; else QUIET=0; fi
if [ "${1:-}" = "-i" ] ; then IPMI=0; shift; else IPMI=1; fi

set +u
. /usr/local/etc/setups.sh
setup enstore
set -u

# Things checked:
# . Correct configuration files
# . Correct ntp time sync (allow * and ~ on 1st line)
# . Check for open LISTEN sockets
## . Check that two processors are active
## . Check that less than 90% full on mounted disks
# . Check that eth1 is working (if present)
# . Check that the farmlets match the base node farmlets.
# . Check that crontab directories match the base node of the farmlet
# . Check that root's crontab has reset of watchdog, ntpset and netscan running
# . Check that ipmisrv is running and has NO_DOG option
# . Check that watchdog action is to do nothing
# . Check that there are less than N processes running on the node
# . If file or volume clerk are running, then db_checkpoint and db_deadlock are running, too
# . Check that web servers are running on right nodes and not elsewhere
# . Check cgi scripts on web server nodes
# . Check enstore scripts in /etc/rc.d/init.d
# . Check that rc.local contains boot_cleanup
# . Check the /etc/krb5.keytab and /local/ups/kt/enstorekt files for legal values

# Known vunerabilities:
# . I know I don't check everything!
# . Only check for LISTEN, ignoring TCP and UDP for now.
#        TCP could be done, but UDP seems very hard (sh, mt... open lots of sockets!).
# . Require connection to live across a ps, so I can get the process name for later checks
# . Depend on installed version of os (grep, lsof...)
#        Should download a static version each time.
# . Swapped out versions of jobs with open connections - allowed, not checked.
#        Should look into the proc file system to get cmdline and check that.
#        Should also buy more memory to make sure nothing is swapped out.
# . Allow all tasks run from enstore/bin or enstore/src
#        Should check for individual applications
# . RPM - could be modified
#        Too many exceptions in rpm -Va to be useful...

ENSTORE=/home/enstore/enstore

# List of binaries/scripts used in checking.
# In principle, these should be loaded onto the machine each time to prevent hacker tampering
UNAME="/bin/uname"
PS="/bin/ps"
CMP="/usr/bin/cmp"
ECHO="/bin/echo"
if [ -e "/usr/local/bin/lsof" ]
then
    LSOF="/usr/local/bin/lsof"
else
    LSOF="/usr/sbin/lsof"
fi
EGREP="/bin/egrep"
AWK="/bin/awk"
WC="/usr/bin/wc"
DATE="/bin/date"
SORT="/bin/sort"
UNIQ="/usr/bin/uniq"
if [ -r /usr/bin/cut ]; then
  CUT="/usr/bin/cut"
elif [ -r /bin/cut ]; then
  CUT="/bin/cut"
else
  echo "Can not find cut"
  exit 1
fi
DF="/bin/df"
SED="/bin/sed"
RPM="/bin/rpm"
IFUP="/etc/sysconfig/network-scripts/ifup"
IFDOWN="/etc/sysconfig/network-scripts/ifdown"
KILL="/bin/kill"
SLEEP="/bin/sleep"
MKDIR="/bin/mkdir"
FARMLETS="$ENSTORE/sbin/farmlets"
KEYTAB_CHECK="$ENSTORE/sbin/keytab_check"

node=`$UNAME -n| sed -e 's/\([^\.]\)\..*/\1/'`
gang=`$ENSTORE/sbin/gang`
RELAX=0

# we need to report errors on devel machines to a production place that is watched
if [ `echo $node | egrep -c ^rip[1-8]` -ne 0 ]; then
    ENSTORE_CONFIG_HOST=d0ensrv2
    RELAX=1
fi
if [ `echo $node | egrep -c ^cachen`   -ne 0 ]; then
    ENSTORE_CONFIG_HOST=stkensrv2
    RELAX=1
fi

LOG=/tmp/netscan.log
ACTIVE=/root/CRON/netscanACTIVE

# function to log messages, optionally print the ps state
logit() { $ECHO `$DATE` "$1" >>$LOG 2>&1
	  if [ "${2:-}"x = psx ]; then
	     $ECHO "${PSfirst:-}" >>$LOG 2>&1
	  fi
	  $ECHO "$1"
	}

# function to parse file mode from terse output of stat(1)
getfilemode() { set `stat -t $1 2>/dev/null`
		if [ $# -eq 15 ]; then
		   # 0x8000 => regular file
		   $ECHO "0x$4"
		else
		   # probably an older stat, w/o -t option
		   $ECHO "$9" | $CUT -f2 -d\( | $CUT -f1 -d/
		fi
	      }

# function to check the owner of a file or directory
check_owner() { theUsr=${2:-enstore}
		theGrp=${3:-$theUsr}
		if [ ! -r $1 ]; then
		  msg1="BAD CONFIGURATION: $1 does not exist"
		  logit "$msg1"
		  if [ $ALARM -eq 1 ]; then
		     enstore alarm --raise --severity "A" --root-error "$msg1"
		  fi
		else
		  fowner=`ls -ld $1 | $AWK '{print $3"."$4}'`
		  if [ "$fowner" != "${theUsr}.${theGrp}" ]; then
		     chown "${theUsr}.${theGrp}" $1
		     msg1="BAD CONFIGURATION: Changing $1 owner ($fowner to ${theUsr}.${theGrp})"
		     logit "$msg1"
		  elif [ $QUIET -ne 1 ]; then
		     logit "$1 owner is ${theUsr}.${theGrp}, ok"
		  fi
		fi
	      }

# function to compare files and complain if they are not the same
#
# Also check file mode against 3rd argument, if present, and
# confirm that files under /etc or /root are owned by root.
# Note that the 3rd argument, if specified, must be in octal,
# with a leading 0 (for example, 0755).
right_file() { if [ ! -r $1 -o ! -r $2 ]; then
		  msg1="BAD CONFIGURATION: $1 $2 do not both exist"
		  logit "$msg1"
		  if [ $ALARM -eq 1 ]; then
		     enstore alarm --raise --severity "A" --root-error "$msg1"
		  fi
	       elif ! $CMP $1 $2 2>/dev/null; then
		  msg1="BAD CONFIGURATION: $1 $2 do not match"
		  logit "$msg1"
		  if [ $ALARM -eq 1 ]; then
		     enstore alarm --raise --severity "A" --root-error "$msg1"
		  fi
	       else
		  if [ $QUIET -ne 1 ]; then
		     logit "$2 matches $1, ok"
		  fi
		  if [ $# -eq 3 ]; then
		     fmode=`getfilemode $2`
		     if [ $((fmode & 0x7fff)) -ne $(($3)) ]; then
			chmod $3 $2
			msg1="BAD CONFIGURATION: Changing $2 mode ($fmode to $3)"
			logit "$msg1"
		     elif [ $QUIET -ne 1 ]; then
			logit "$2 mode is $3, ok"
		     fi
		  fi
		  if $ECHO $2 | $EGREP '^/(etc|root)'; then
		     check_owner $2 root
		  fi
	       fi
	     }

# function to check for a string within a file
check_file() { thefile=${2:-/var/spool/cron/root}
	       if [ ! -r $thefile ]; then
		  msg1="$thefile is missing"
		  logit "$msg1"
		  if [ $ALARM -eq 1 ]; then
		     enstore alarm --raise --severity "A" --root-error "$msg1"
		  fi
	       elif [ `$EGREP -c "$1" $thefile` -ne 1 ]; then
		  msg1="$thefile is missing $1 or it is misconfigured"
		  logit "$msg1"
		  if [ $ALARM -eq 1 ]; then
		     enstore alarm --raise --severity "A" --root-error "$msg1"
		  fi
	       elif [ $QUIET -ne 1 ]; then
		  logit "$1 in $thefile, ok"
	       fi
	     }

# function to check for allowed services and complain if not allowed
#
#   This function uses the rules in $ALLOW, which must be defined with no embedded
#   spaces (substitute # for a space). Each rule is terminated by a newline (\n).
#   The loop is limited to rules that meet the first 4 of the 5 requirements in
#   each rule. There may be more than one such rule. If there is at least one, and
#   they all fail, that is a "type 1" error; if there are none, that is a "type 2"
#   error.
#
allow() { tt=${1:-UNKNOWN}
	  local psline=""
	  for i in `$ECHO -e -n $ALLOW | $AWK -F, -v TT=$tt -v CMD=$command -v REST="$rest" '$1 ~ TT && $2 == CMD && REST ~ $3 && REST ~ $4 {print "a=" $2 ";b=" $3 ";c=" $4 ";p=" $5}'`; do
	    eval $i
	    if [ $p != x ]; then
	       if [ -z "$psline" ]; then
		  psline=`$ECHO "$PSfirst" | $AWK -v PID=$pid '$2 ~ PID {print}'`
	       fi
	       if [ `$ECHO $psline | $EGREP -c '\[.*\]'` -ne 0 ]; then
		  logit "Swapped out $node $tt $command $pid $rest -> $psline"
		  return 0
	       elif [ `$ECHO $psline | $SED 's/  */#/g' | $EGREP -c "$p"` -eq 0 ]; then
		  continue
	       fi
	    else
	      p=""
	    fi
	    if [ $QUIET -ne 1 ]; then
	      logit "Allowing $node $c $tt $a $b $p, ok"
	    fi
	    return 0
	  done
	  if [ -n "$psline" ]; then
	     type=1
	  else
	     psline=`$ECHO "$PSfirst" | $AWK -v PID=$pid '$2 ~ PID {print}'`
	     type=2
	  fi
	  msg1="UNAUTHORIZED NETWORK SERVICE, type ${type}! $node $tt $command $pid $rest"
	  logit "$msg1 $psline" "ps"
	  if [ $ALARM -eq 1 ]; then
	    enstore alarm --raise --severity "A" --root-error "$msg1 $psline"
	  fi
	  return $type
	 }

if [ -r "/etc/inetd.conf" ]; then
       INETD=inetd
elif [ -r "/etc/xinetd.conf" ]; then
       INETD=xinetd
else
       INETD=unknown
fi
# We allow these everywhere
ALLOW_BASE="
	LISTEN,$INETD,:ftp,TCP,x\n
	LISTEN,$INETD,:telnet,TCP,x\n
	LISTEN,$INETD,:kshell,TCP,x\n
	LISTEN,$INETD,:klogin,TCP,x\n
	LISTEN,$INETD,:eklogin,TCP,x\n
	LISTEN,$INETD,:netperf,TCP,x\n
	LISTEN,python,:,TCP,$ENSTORE/(bin|src)|/home/petravic/Zope|ftpcp.py\n
	LISTEN,dccp,:,TCP,x\n
	LISTEN,netserver,:,TCP,x\n
	LISTEN,rsh,:,TCP,/usr/krb5/bin/rsh\n
	LISTEN,sh,inet,TCP,MSG_TYPE|enstore\n
	LISTEN,mv,inet,TCP,MSG_TYPE|enstore\n
	LISTEN,grep,inet,TCP,MSG_TYPE|enstore\n
	LISTEN,sort,inet,TCP,MSG_TYPE|enstore\n
	LISTEN,ALARM_CLIENT,inet,TCP,x\n
	UDP,python,:7499,UDP,$ENSTORE/src/monitor_server.py\n
	UDP,python,:,UDP,$ENSTORE/(bin/encp|src/(monitor_server|volume_assert|mover).py|ngop/cronjobAgent.py)|/local/ups/prd/ngop/v1_1/ma/PlugInAgent.py\n
	UDP,xntpd,:ntp,UDP,x\n
	UDP,tee,:,UDP,tee#/dev/tty\n
	TCP,xemacs,:x11,TCP,x\n
	TCP,rsh,:kshell,TCP,x\n
	TCP,rsh,:,TCP,/usr/krb5/bin/rsh\n
	TCP,kshd,:kshell,TCP,x\n
	TCP,kshd,:,TCP,kshd#kshd#-5c\n
	TCP,klogind,:eklogin,TCP,x\n
	TCP,telnetd,:telnet,TCP,telnetd#-Pa#valid\n
	TCP,python,:,TCP,$ENSTORE/(bin/encp|src/monitor_server|mover).py\n
	TCP,netserver,TCP,:netperf,x\n
"
#	LISTEN,autorpm,:,TCP,perl#/usr/sbin/autorpm\n

# Extra for srv5
ALLOW_SRV5="$ALLOW_BASE
	LISTEN,portmap,:sunrpc,TCP,x\n
	LISTEN,conserver,:console,TCP,x\n
	LISTEN,conserver,:,TCP,conserver#-d\n
	LISTEN,X,:x11,TCP,x\n
	UDP,portmap,:sunrpc,UDP,x\n
	TCP,console,:console,TCP,x\n
"

# Extra for srv3
ALLOW_SRV3="$ALLOW_SRV5
	LISTEN,rpc.mount,:,TCP,rpc.mountd\n
	LISTEN,rpc.nfsd,:(nfs|2049),TCP,x\n
	UDP,rpc.mount,:mount,UDP,x\n
	UDP,rpc.nfsd,:(nfs|2049),UDP,x\n
"

# Extra for srv2
ALLOW_SRV2="$ALLOW_BASE
	LISTEN,httpd,:http,TCP,/local/ups/prd/apache/\n
	LISTEN,mv,(d0|stk|cdf)ensrv2.fnal.gov:,TCP,mv\n
	LISTEN,sh,(d0|stk|cdf)ensrv2.fnal.gov:,TCP,sh\n
	LISTEN,grep,(d0|stk|cdf)ensrv2.fnal.gov:,TCP,grep\n
	LISTEN,sort,(d0|stk|cdf)ensrv2.fnal.gov:,TCP,sort\n
	LISTEN,python,(d0|stk|cdf)ensrv2.fnal.gov:,TCP,$ENSTORE/src/inquisitor.py\n
"

#	LISTEN,sendmail,:smtp,TCP,x\n

# Extra for srv1
ALLOW_SRV1="$ALLOW_BASE
	LISTEN,portmap,:sunrpc,TCP,x\n
	LISTEN,java,:,TCP,/home/enstore/dcache/run|[java]\n
"

# Extra for srv0
ALLOW_SRV0="$ALLOW_BASE
	LISTEN,postmaste,:(postgres|5432|8076),TCP,x\n
"

# Extra for d0ensrv2
ALLOW_DSRV2="$ALLOW_SRV2
	LISTEN,mirror,d0ensrv2p.fnal.gov:,TCP,mirror#logs:adic2.fnal.gov\n
"

# Extra for d0ensrv3
ALLOW_DSRV3="$ALLOW_SRV3
	LISTEN,perl,d0ensrv3p.fnal.gov:,TCP,mirror#everything:adic2.fnal.gov\n
"

# Extra for d0ensrv4 - portmapper is needed for adic calls
ALLOW_DSRV4="$ALLOW_BASE
	LISTEN,portmap,:sunrpc,TCP,x\n
	LISTEN,dasadmin,:663,TCP,x\n
	LISTEN,dasadmin,:,TCP,dasadmin\n
	LISTEN,rsh,:,TCP,fntt#-l#acsss#echo\n
"

# Extra for stkensrv2
ALLOW_SSRV2="$ALLOW_SRV2
	LISTEN,portmap,:sunrpc,TCP,x\n
	LISTEN,rpc.mount,:,TCP,rpc.mountd\n
"

# Extra for stkensrv4
ALLOW_SSRV4="$ALLOW_BASE
	LISTEN,rsh,:,TCP,fntt#-l#acsss#echo\n
"

# Extra for cdfensrv4
ALLOW_CSRV4="$ALLOW_BASE
	LISTEN,rsh,:,TCP,fntt2#-l#acsss#echo\n
"

# Extra for dcache
# Allowing swapped out java's is not good, but I don't know what else to do right now.
ALLOW_DCA="$ALLOW_BASE
	LISTEN,httpd,:http,TCP,/local/ups/prd/apache/\n
	LISTEN,java,:,TCP,/home/enstore/dcache/run/diskCache|[java]|dmg.cells.services.Domain\n
"

# Extra for movers
ALLOW_MVR="$ALLOW_BASE
"

# make the choice
case $node in
       *srv0|rip1) ALLOW=$ALLOW_SRV0;  logit "Comparing to srv0";;
       *srv1|rip6) ALLOW=$ALLOW_SRV1;  logit "Comparing to srv1";;
    d0ensrv2)      ALLOW=$ALLOW_DSRV2; logit "Comparing to d0ensrv2";;
   stkensrv2)      ALLOW=$ALLOW_SSRV2; logit "Comparing to stkensrv2";;
       *srv2|rip7) ALLOW=$ALLOW_SRV2;  logit "Comparing to srv2";;
    d0ensrv3)      ALLOW=$ALLOW_DSRV3; logit "Comparing to d0ensrv3";;
       *srv3)      ALLOW=$ALLOW_SRV3;  logit "Comparing to srv3";;
    d0ensrv4)      ALLOW=$ALLOW_DSRV4; logit "Comparing to d0ensrv4";;
   stkensrv4)      ALLOW=$ALLOW_SSRV4; logit "Comparing to stkensrv4";;
   cdfensrv4)      ALLOW=$ALLOW_CSRV4; logit "Comparing to cdfensrv4";;
    *srv[57])      ALLOW=$ALLOW_SRV5;  logit "Comparing to srv5";;
       *srv6)      ALLOW=$ALLOW_SRV0;  logit "Comparing to srv6";;
       *mvr*|rip*) ALLOW=$ALLOW_MVR;   logit "Comparing to mvr";;
       *dca*)      ALLOW=$ALLOW_DCA;   logit "Comparing to dca";;
	   *)      ALLOW=$ALLOW_BASE;  logit "Comparing to base";;
esac


# try to start - but if one netscan already running, then exit
$MKDIR $ACTIVE 1>/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then
   # ok, this is terrible..., but I don't know what else to do.  Dang kerberos!
   # the most likely thing that has failed, or hung is the task that access the net.  Kill it.
   # kill the farmlets task
   $PS axwww | $EGREP "farmlets" | $EGREP -v grep | while read pid line; do
      $ECHO `$DATE` $KILL -9 $pid $line >>$LOG 2>&1
      $ECHO $KILL -9 $pid $line
      $KILL -9 $pid
   done
   $SLEEP 30
   # kill any remaining rsyncs that check the cron area
   $PS axwww | $EGREP "farmlets|rsync" | $EGREP -v grep | $EGREP cron | while read pid line; do
      $ECHO `$DATE` $KILL -9 $pid $line >>$LOG 2>&1
      $ECHO $KILL -9 $pid $line
      $KILL -9 $pid
   done
   $SLEEP 30
   $MKDIR $ACTIVE 1>/dev/null 2>/dev/null
   if [ $? -ne 0 ] ; then
     msg="ERROR: netscan on $node already ACTIVE... exiting"
     logit "$msg"
     if [ $ALARM -eq 1 ]; then
	enstore alarm --raise --severity "A" --root-error "$msg"
     fi
     exit 1
   else
     logit "netscan starting"
   fi
else
  logit "netscan starting"
fi


# check these files
right_file $ENSTORE/sbin/routes			/root/routes
right_file $ENSTORE/sbin/gettkt			/home/enstore/gettkt
right_file $ENSTORE/etc/root.k5login		/root/.k5login
right_file $ENSTORE/etc/$gang.enstore.k5login	/home/enstore/.k5login
right_file $ENSTORE/etc/$gang.hosts.allow	/etc/hosts.allow
right_file $ENSTORE/etc/hosts.deny		/etc/hosts.deny
right_file $ENSTORE/etc/hosts			/etc/hosts
right_file $ENSTORE/etc/sudoers			/etc/sudoers				0440
right_file $ENSTORE/etc/krb5.conf		/etc/krb5.conf				0644
right_file $ENSTORE/etc/xserverrc		/etc/X11/xinit/xserverrc		0755
right_file $ENSTORE/bin/enstore-boot		/etc/rc.d/init.d/enstore-boot		0755

chmod 755 /etc/rc.d/rc.sysinit	# just force this
chmod 755 /etc/rc.d/rc.local	# just force this

# there needs to be more logic for xinetd or inetd files
if [ "$INETD" = unknown ]; then
  # neither file existed, this is a problem
  enstore alarm --raise --severity "A" --root-error "MISSING CONFIGURATION: no inetd.conf or xinetd.conf in /etc"
else
  right_file $ENSTORE/etc/${INETD}.conf		/etc/${INETD}.conf
  if [ "$INETD" = xinetd ]; then
    right_file $ENSTORE/etc/ftp			/etc/xinetd.d/ftp
    right_file $ENSTORE/etc/klogin		/etc/xinetd.d/klogin
    right_file $ENSTORE/etc/kshell		/etc/xinetd.d/kshell
    right_file $ENSTORE/etc/telnet		/etc/xinetd.d/telnet
    right_file $ENSTORE/etc/eklogin		/etc/xinetd.d/eklogin
  fi
fi

right_file $ENSTORE/etc/enstore.bashrc	  	/home/enstore/.bashrc
right_file $ENSTORE/etc/enstore.bash_profile	/home/enstore/.bash_profile
right_file $ENSTORE/etc/$gang.step-tickers	/etc/ntp/step-tickers

# check these files only on srv0 nodes
case $node in
  d0ensrv0|stkensrv0|cdfensrv0)
    right_file $ENSTORE/sbin/enstore-drivestat	/etc/rc.d/init.d/enstore-drivestat	0755
    right_file $ENSTORE/sbin/enstore-pgdb	/etc/rc.d/init.d/enstore-pgdb		0755
    ;;
  *)
    ;;
esac


# check that no rpm binaries have been tampered with
# disabled... we made changes, check is not robust.
#rpm -Va | $EGREP bin | $EGREP -v '/usr/bin/X11|/usr/local/bin|/bin/bash|/usr/bin/bashbug|/usr/bin/db_|/usr/bin/run-parts|\.h$|\.h$|/bin/login'


# check that eth1 is working, fix if not
eth1_err="eth1: card reports no RX buffers"
if [ `tail -n 10 /var/log/messages | grep -c "$eth1_err"` -gt 0 ]; then
    logit "ERROR: $eth1_err"
    if [ $ALARM -eq 1 ]; then
      enstore alarm --raise --severity "A" --root-error "$eth1_err"
    fi
    $IFDOWN eth1 >>$LOG 2>&1
    $IFUP   eth1 >>$LOG 2>&1
else
  if [ $QUIET -ne 1 ]; then
    logit "No eth1 errors found in messages, ok"
  fi
fi


# check that ntp is working, fix if not, complain if down more than once
# check only in this job.  Separate cronjob sets time if needed.
msg=`$ENSTORE/sbin/ntpset -a -c 2>&1`
if [ $QUIET -ne 1 ]; then
   logit "$msg"
fi


# check that we have two processors running
#if [ `$EGREP -c '^processor' /proc/cpuinfo` -ne 2 ]; then
#   if [ "$node" = "stkensrv5" ]; then
#      if [ $QUIET -ne 1 ]; then
#         logit  "One processor found, ok"
#      fi
#   else
#      logit "ONLY 1 PROCESSOR RUNNING"
#      if [ $ALARM -eq 1 ]; then
#         enstore alarm --raise --severity "A" --root-error "ONLY 1 PROCESSOR RUNNING"
#      fi
#   fi
#else
#  if [ $QUIET -ne 1 ]; then
#    logit  "Two processors found, ok"
#  fi
#fi


# check that we have sufficient disk space available.
#dflines=`$DF -P`
#$ECHO "$dflines" | while read a b c d e rest; do
#  if [ `$ECHO $e| $EGREP -c %` -eq 1 ]; then
#    cap=`$ECHO $e | $SED -e 's/%//'`
#    mess="$a $b $c $d $e $rest"
#    if [ $cap -ge 90 ]; then
#      msg="DISK FULL: $mess"
#      logit "$msg"
#      if [ $ALARM -eq 1 ]; then
#        enstore alarm --raise --severity "A" --root-error "$msg"
#      fi
#    else
#      if [ $QUIET -ne 1 ]; then
#        logit  "DISK $a at $cap%, ok"
#      fi
#    fi
#  fi
#done


if [ $IPMI -eq 1 ]; then
   # we need a watchdog_reset file to make check_watchdog work
   if [ ! -r /etc/watchdog_reset ]; then
      msg="/etc/watchdog_reset is missing"
      logit "$msg"
      if [ $ALARM -eq 1 ]; then
	 enstore alarm --raise --severity "A" --root-error "$msg"
      fi
   elif [ $QUIET -ne 1 ]; then
      logit "/etc/watchdog_reset, ok"
   fi
fi

# check that special jobs are listed in root crontab, or other files
if [ -r /var/spool/cron/root ]; then
   check_file "check_watchdog_reset.py"
   check_file "ntpset"
   check_file "netscan -a -q" # not so dumb, because we can run netscan manually, too
   check_file "ekill -v -9 \"sdrread\|selread\|chip2\|Chip2\|netperf\|dog\|selbit\|selclear\|netstat\|Nodeinfo\|biterror\""
else
   logit "No root crontab"
fi

check_file "boot_cleanup"		/etc/rc.d/rc.local
check_file "enstore-admin@fnal.gov"	/root/.forward
check_file "enstore-admin@fnal.gov"	/home/enstore/.forward

# verify ownership of enstore keytab file
check_owner /local/ups/kt
check_owner /local/ups/kt/enstorekt
check_owner ~enstore/`hostname`.startup


if [ $IPMI -eq 1 ]; then
   # check that ipmisrv is running without watchdog timer
   if [ `$PS auwwwx | $EGREP -v grep | $EGREP -c "ipmisrv NO_DOG"` -ne 1 ]; then
      msg="ipmisrv NO_DOG not running or misconfigured"
      logit "$msg"
      if [ $ALARM -eq 1 ]; then
	 enstore alarm --raise --severity "A" --root-error "$msg"
      fi
   elif [ $QUIET -ne 1 ]; then
      logit "ipmisrv running, ok"
   fi

   # check that watchdog timer action is to do nothing
   ACTION=`/home/enstore/ipmi/dogread | $EGREP Action|$AWK '{print $2}'`
   if [ "$ACTION" != "00" ]; then
      msg="watchdog action is < $ACTION >. Should be 00"
      logit "$msg"
      if [ $ALARM -eq 1 ]; then
	 enstore alarm --raise --severity "A" --root-error "$msg"
      fi
      # disable the action
      /home/enstore/ipmi/dogdisarm
   elif [ $QUIET -ne 1 ]; then
      logit "watchdog action, ok"
   fi
fi


# check that we don't have too many processes running
NPROC=`$PS aux | wc -l | $SED -e 's/ //g'`
if [ `$ECHO $node | $EGREP -c dca` -eq 1 ]; then
    maxproc=300  # disk cache
elif [ `$ECHO $node | $EGREP -c mvr` -eq 1 ]; then
    maxproc=100  # movers
else
    maxproc=200  # servers
fi

if [ $NPROC -ge $maxproc ]; then
   msg="$NPROC processes running. Way too many"
   logit "$msg"
   if [ $ALARM -eq 1 ]; then
     enstore alarm --raise --severity "A" --root-error "$msg"
   fi
elif [ $QUIET -ne 1 ]; then
   logit "$NPROC processes, ok"
fi


# check that db_deadlock and db_checkpoint are running if file or vol clerk running:
if [ `$PS axuwww|$EGREP python|$EGREP -v 'grep'|$EGREP -c 'file_clerk.py|volume_clerk.py'` -ge 1 ]; then
   for need in db_checkpoint db_deadlock; do
     if [ `$PS axuwww|$EGREP -v 'grep'|$EGREP -c $need` -ne 1 ]; then
       msg="$need not running (or more than 1 running) and file/volume clerk are running."
       logit "$msg"
       if [ $ALARM -eq 1 ]; then
	 enstore alarm --raise --severity "A" --root-error "$msg"
       fi
     elif [ $QUIET -ne 1 ]; then
       logit "$need running, ok"
     fi
   done
elif [ $QUIET -ne 1 ]; then
  logit "file/volume clerk not running, no db_deadlock or db_checkpoint check, ok"
fi

# check for web servers
case $node in
# web servers should be running on these nodes
  rip7|d0ensrv2|stkensrv2|cdfensrv2|stkendca3a)
    if [ `$PS axuwww|$EGREP -v 'grep'|$EGREP apache|$EGREP -c 'httpd'` -eq 0 ]; then
       msg="httpd Web server not running"
       logit "$msg"
       if [ $ALARM -eq 1 ]; then
	 enstore alarm --raise --severity "A" --root-error "$msg"
       fi
    elif [ $QUIET -ne 1 ]; then
       logit "httpd web server running, ok"
    fi
    for i in $ENSTORE/src/*_cgi.py; do
       right_file $i /local/ups/prd/httpd/cgi-bin/enstore/`basename $i` 0755
    done
    ;;
# web servers may be running on these nodes, but don't need to be
  stkendca[67]|d0enout[12]a|cachen[12]a)
    ;;
# web servers should not be running on any other nodes
  *)
    if [ `$PS axuwww|$EGREP -v 'grep'|$EGREP apache|$EGREP -c 'httpd'` -ne 0 ]; then
       msg="httpd Web server running on illegal node"
       logit "$msg"
       if [ $ALARM -eq 1 ]; then
	 enstore alarm --raise --severity "A" --root-error "$msg"
       fi
    elif [ $QUIET -ne 1 ]; then
       logit "httpd web server not running, ok"
    fi
    ;;
esac


# check that the keytabs are "correct"
$KEYTAB_CHECK -a


# get open files - twice - get ps in between - only take connections that survive past this
# otherwise it is impossible to compare and see if they are allowed.
# this is a small hole
# also need to go through a file - because argument to echo is too large!!!
netscan_n1=/tmp/netscan_n1
netscan_n2=/tmp/netscan_n2
rm -f $netscan_n1
rm -f $netscan_n2
$LSOF -i TCP -i UDP > $netscan_n1
PSfirst=`$PS afxuwwww`
$LSOF -i TCP -i UDP > $netscan_n2

# scan open files and check if allowed
$SORT $netscan_n1 $netscan_n2 | $UNIQ -d | while read command pid rest; do
    if [ $pid = "PID" ] ; then continue; fi
    if [ `$ECHO $rest | $EGREP -c "LISTEN"` -ne 0 ]; then
       allow LISTEN
    elif [ `$ECHO $rest | $EGREP -c "UDP"` -ne 0 ]; then
      if [ $QUIET -ne 1 ]; then
	 logit "Ignoring open UDP connections $command $pid $rest ..."
      fi
    elif [ `$ECHO $rest | $EGREP -c "TCP"` -ne 0 ]; then
      if [ $QUIET -ne 1 ]; then
	 logit "Ignoring open TCP connections $command $pid $rest ..."
      fi
    fi
done


#++++++++++++++++ tasks that go over network. Can hang sometimes. Do this last.

# check that farmlets match
if [ $gang != "rip" ]; then
  msg="`$FARMLETS 2>&1`"
  if [ $? -ne 0 ]; then
     logit "$msg"
  elif [ $QUIET -ne 1 ]; then
     logit "$msg"
  fi
fi


logit "netscan finished"
rm -fr $ACTIVE
