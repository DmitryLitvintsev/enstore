#!/bin/sh
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi
# this is cheap argument processing. Must be in this order when checking.
if [ "${1:-}" = "-a" ] ; then ALARM=1; shift; else ALARM=0; fi
if [ "${1:-}" = "-q" ] ; then QUIET=1; shift; else QUIET=0; fi

. /usr/local/etc/setups.sh
setup enstore

# Things checked:
# . Correct configuration files
# . Correct ntp time sync (allow * and ~ on 1st line)
# . Check for open LISTEN sockets
# . Check that two processors are active
# . Check that less than 90% full on mounted disks.
# . Check that eth1 is working (if present)
# . Check that the farmlets match the base node farmlets.
# . Check that crontab directories match the base node of the farmlet
# . Check that root's crontab has reset of watchdog, ntpset and netscan running.
# . Check that ipmisrv is running and has NO_DOG option
# . Check that watchdog action is to do nothing
# . Check that there are less than N processes running on the node
# . If file or volume clerk are running, then db_checkpoint and db_deadlock are running, too
# . Check that web servers are running on right nodes and not elsewhere
# . Check that rc.local contains boot_cleanup
# . Check the /etc/krb5.keytab and /local/ups/kt/enstorekt files for legal values.

# Known vunerabilities:
# . I know I don't check everything!
# . Only check for LISTEN, igorning TCP and UDP for now.
#        TCP could be done, but UDP seems very hard (sh, mt... open lots of sockets!).
# . Require connection to live across a ps, so I can get the process name for later checks
# . Depend on installed version of os (grep, lsof...)
#        Should download a static version each time.
# . Swapped out versions of jobs with open connections - allowed, not checked.
#        Should look into the proc file system to get cmdline and check that.
#        Should also buy more memory to make sure nothing is swapped out.
# . Allow all tasks run from enstore/bin or enstore/src
#        Should check for individual applications
# . RPM - could be modified
#        Too many exceptions in rpm -Va to be useful...

set -u  # force better programming and ability to use check for not set


# List of binaries/scripts used in checking.
# In principle, these should be loaded onto the machine each time to prevent hacker tampering
UNAME="/bin/uname"
PS="/bin/ps"
CMP="/usr/bin/cmp"
ECHO="/bin/echo"
LSOF="/usr/local/bin/lsof"
EGREP="/bin/egrep"
AWK="/bin/awk"
WC="/usr/bin/wc"
DATE="/bin/date"
CAT="/bin/cat"
SORT="/bin/sort"
UNIQ="/usr/bin/uniq"
CUT="/usr/bin/cut"
DF="/bin/df"
SED="/bin/sed"
RPM="/bin/rpm"
IFDOWN="/etc/sysconfig/network-scripts/ifdown"
IFUP="/etc/sysconfig/network-scripts/ifup"
FARMLETS="/home/enstore/enstore/sbin/farmlets"
KEYTAB_CHECK="/home/enstore/enstore/sbin/keytab_check"
KILL="/bin/kill"
SLEEP="/bin/sleep"
MKDIR="/bin/mkdir"
KTUTIL="/usr/krb5/sbin/ktutil"

node=`$UNAME -n| sed -e 's/\([^\.]\)\..*/\1/'`
gang=`/home/enstore/enstore/sbin/gang`
RELAX=0

# we need to report errors on devel machines to a production place that is watched
if [ `echo $node | egrep -c ^rip[1-8]` -ne 0 ]; then
    ENSTORE_CONFIG_HOST=d0ensrv2
    RELAX=1
fi
if [ `echo $node | egrep -c ^cachen`   -ne 0 ]; then
    ENSTORE_CONFIG_HOST=stkensrv2
    RELAX=1
fi

LOG=/tmp/netscan.log
ACTIVE=/root/CRON/netscanACTIVE

# function to log messages, optionally print the ps state
logit() { $ECHO `$DATE` "$1" >>$LOG 2>&1
          if [ "${2:-}"x = "psx" ]; then
             $ECHO "${PSfirst:-}"  >>$LOG 2>&1
          fi
          $ECHO "$1"
        }

# function to compare files and complain if they are not the same
right_file() { if [ ! -r $1 -o ! -r $2 ]; then
                  msg1="BAD CONFIGURATION: $1 $2  do not both exist"
                  logit "$msg1"
                  if [ $ALARM -eq 1 ]; then
                    enstore alarm --raise --severity "A" --root-error "$msg1"
                  fi
               elif ! $CMP $1 $2 2>/dev/null; then
                  msg1="BAD CONFIGURATION: $1 $2  do not match"
                  logit "$msg1"
                  if [ $ALARM -eq 1 ]; then
                    enstore alarm --raise --severity "A" --root-error "$msg1"
                  fi
               else
                  if [ $QUIET -ne 1 ]; then
                    logit  "Matching version of $1, ok"
                  fi
               fi
             }

filecheck() { thefile=${2:-/var/spool/cron/root}
              if [ `$EGREP -c "$1" $thefile` -ne 1 ]; then
                msg="$thefile is missing $1 or it is misconfigured"
                logit "$msg"
                if [ $ALARM -eq 1 ]; then
                  enstore alarm --raise --severity "A" --root-error "$msg"
                fi
              elif [ $QUIET -ne 1 ]; then
                logit  "$1 $thefile ok"
              fi
            }


# function to check for allowed services and complain if not allowed
allow() { tt=$1
          for i in $ALLOW; do
            t=`$ECHO $i | $CUT -f1 -d,`
            if [ $t != $tt ]; then continue; fi
            a=`$ECHO $i | $CUT -f2 -d,`
            b=`$ECHO $i | $CUT -f3 -d,`
            c=`$ECHO $i | $CUT -f4 -d,`
            p=`$ECHO $i | $CUT -f5 -d,`
            if [ $command = "$a" -a `$ECHO $rest | $EGREP -c "$b"`  -ne 0 -a `$ECHO $rest | $EGREP -c "$c"` -ne 0 ]; then
              if [ $p != "x" ]; then
                 psline=`$ECHO "$PSfirst" | $AWK "/ $pid / {print} "`
                 if [ `$ECHO $psline | $EGREP -c "$p"` -eq 0 ]; then
                    msg1="UNAUTHORIZED NETWORK SERVICE, type 1! $node $tt $command $pid $rest"
                    logit "$msg1"
                    logit "$psline" "ps"
                    if [ $ALARM -eq 1 ]; then
                      enstore alarm --raise --severity "A" --root-error "$msg1  $psline"
                    fi
                    return 2
                 fi
              else
                p=""
              fi
              if [ $QUIET -ne 1 ]; then
                logit "Allowing $node $c $tt $a $b $p,  ok"
              fi
              return 0
            fi
          done
          msg1="UNAUTHORIZED NETWORK SERVICE, type 2! $node $tt $command $pid $rest"
          psline=`$ECHO "$PSfirst" | $AWK "/ $pid / {print} "`
          logit "$msg1"
          logit "$psline" "ps"
          if [ $ALARM -eq 1 ]; then
            enstore alarm --raise --severity "A" --root-error "$msg1  $psline"
         fi
          return 1
         }

# We allow these everywhere
ALLOW_BASE="
       LISTEN,inetd,:ftp,TCP,x
       LISTEN,inetd,:telnet,TCP,x
       LISTEN,inetd,:kshell,TCP,x
       LISTEN,inetd,:klogin,TCP,x
       LISTEN,inetd,:eklogin,TCP,x
       LISTEN,inetd,:netperf,TCP,x
       LISTEN,python,:,TCP,/home/enstore/enstore/bin|/home/enstore/enstore/src|/home/petravic/Zope
       LISTEN,netserver,:,TCP,x
       LISTEN,rsh,:,TCP,/usr/krb5/bin/rsh
       UDP,python,:7499,UDP,/home/enstore/enstore/src/monitor_server.py
       UDP,python,:,UDP,/home/enstore/enstore/src/monitor_server.py|/home/enstore/enstore/bin/encp|/home/enstore/enstore/src/mover.py|/local/ups/prd/ngop/v1_1/ma/PlugInAgent.py|/home/enstore/enstore/ngop/cronjobAgent.py
       UDP,xntpd,:ntp,UDP,x
       UDP,tee,:UDP,tee /dev/tty
       TCP,klogind,:eklogin,TCP,x
       TCP,xemacs,:6000,TCP,x
       TCP,rsh,:kshell,TCP,x
       TCP,rsh,:,TCP,/usr/krb5/bin/rsh
       TCP,kshd,:kshell,TCP,x
       TCP,kshd,:,TCP,kshd kshd -5c
       TCP,telnetd,telnet,TCP,telnetd -Pa valid
       TCP,python,:,TCP,/home/enstore/enstore/src/monitor_server.py|/home/enstore/enstore/bin/encp|/home/enstore/enstore/src/mover.py
       TCP,netserver,TCP,:netperf,x
"
#       LISTEN,autorpm,:,TCP,perl /usr/sbin/autorpm


# Extra for srv5
ALLOW_SRV5="$ALLOW_BASE
       LISTEN,portmap,:sunrpc,TCP,x
       LISTEN,conserver,:console,TCP,x
       LISTEN,conserver,:listen,TCP,x
       LISTEN,conserver,:nterm,TCP,x
       LISTEN,conserver,:,TCP,/usr/local/bin/conserver -d
       LISTEN,X,:6000,TCP,x
       UDP,portmap,:sunrpc,UDP,x
       TCP,conserver,:nterm,TCP,x
       TCP,netscape-,:http,TCP,x
       TCP,console,console,TCP,x
       TCP,console,nterm,TCP,x
"

# Extra for srv3
ALLOW_SRV3="$ALLOW_SRV5
       LISTEN,rpc.mount,:635,TCP,x
       LISTEN,rpc.nfsd,:2049,TCP,x
       UDP,rpc.mount,:mount,UDP,x
       UDP,rpc.nfsd,:nfs,UDP,x
"

# Extra for srv2
ALLOW_SRV2="$ALLOW_BASE
       LISTEN,httpd,:http,TCP,/local/ups/prd/apache/
"

# Extra for d0ensrv4 - portmapper is needed for adic calls
ALLOW_DSRV4="$ALLOW_BASE
       LISTEN,portmap,:sunrpc,TCP,x
       LISTEN,dasadmin,:,TCP,x
"


# Extra for srv1
ALLOW_SRV1="$ALLOW_BASE
       LISTEN,portmap,:sunrpc,TCP,x
       LISTEN,java,:,TCP,/home/enstore/dcache/run|[java]
"

# Extra for dcache
# Allowing swapped out java's is not good, but I don't know what else to do right now.
ALLOW_DCA="$ALLOW_BASE
       LISTEN,httpd,:http,TCP,/local/ups/prd/apache/
       LISTEN,java,:,TCP,/home/enstore/dcache/run/diskCache|[java]|dmg.cells.services.Domain
"

# Extra for movers
ALLOW_MVR="$ALLOW_BASE
"

# make the choice
case $node in
       *srv1|rip6) ALLOW=$ALLOW_SRV1;  logit "Comparing to srv1";;
       *srv2|rip7) ALLOW=$ALLOW_SRV2;  logit "Comparing to srv2";;
       *srv3)      ALLOW=$ALLOW_SRV3;  logit "Comparing to srv3";;
    d0ensrv4)      ALLOW=$ALLOW_DSRV4; logit "Comparing to d0ensrv4";;
 *srv5|*srv7)      ALLOW=$ALLOW_SRV5;  logit "Comparing to srv5";;
       *mvr*|rip*) ALLOW=$ALLOW_MVR;   logit "Comparing to mvr";;
       *dca*)      ALLOW=$ALLOW_DCA;   logit "Comparing to dca";;
           *)      ALLOW=$ALLOW_BASE;  logit "Comparing to base";;
esac



# try to start - but if one netscan already running, then exit
$MKDIR $ACTIVE 1>/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then
   # ok, this is terrible..., but I don't know what else to do.  Dang kerberos!
   # the most likely thing that has failed, or hung is the task that access the net.  Kill it.
   # kill the farmlets task
   $PS axwww | $EGREP "farmlets"|$EGREP -v grep| while read pid line; do
      $ECHO `$DATE` $KILL -9 $pid $line >>$LOG 2>&1
      $ECHO `$DATE` $KILL -9 $pid $line
      $KILL -9 $pid
   done;
   $SLEEP 30
   # kill any remaining rsyncs that check the cron area
   $PS axwww | $EGREP "farmlets|rsync"|$EGREP -v grep| $EGREP cron | while read pid line; do
      $ECHO $KILL -9 $pid $line >>$LOG 2>&1
      $ECHO $KILL -9 $pid $line
      $KILL -9 $pid
   done;
   $SLEEP 30
   $MKDIR $ACTIVE 1>/dev/null 2>/dev/null
   if [ $? -ne 0 ] ; then
     msg="ERROR: netscan on $node already ACTIVE... exiting"
     logit "$msg"
     if [ $ALARM -eq 1 ]; then
        enstore alarm --raise --severity "A" --root-error "$msg"
     fi
     exit 1
   else
     logit "netscan starting"
   fi
else
  logit "netscan starting"
fi



# check these files
right_file /home/enstore/enstore/etc/$gang.enstore.k5login /home/enstore/.k5login
right_file /home/enstore/enstore/sbin/routes /root/routes
right_file /home/enstore/enstore/etc/root.k5login /root/.k5login
right_file /home/enstore/enstore/etc/$gang.hosts.allow /etc/hosts.allow
right_file /home/enstore/enstore/etc/hosts.deny /etc/hosts.deny
right_file /home/enstore/enstore/etc/hosts /etc/hosts
right_file /home/enstore/enstore/etc/sudoers /etc/sudoers
chmod 440 /etc/sudoers # just force this
right_file /home/enstore/enstore/bin/enstore-boot /etc/rc.d/init.d/enstore-boot
chmod 755 /etc/rc.d/rc.local # just force this
chmod 755 /etc/rc.d/rc.sysinit # just force this
chmod 755 /etc/rc.d/init.d/enstore-boot # just force this
right_file /home/enstore/enstore/etc/inetd.conf /etc/inetd.conf
right_file /home/enstore/enstore/etc/enstore.bashrc /home/enstore/.bashrc
right_file /home/enstore/enstore/etc/enstore.bash_profile /home/enstore/.bash_profile
right_file /home/enstore/enstore/etc/$gang.step-tickers /etc/ntp/step-tickers



# check that no rpm binaries have been tampered with
# disabled... we made changes, check is not robust.
#rpm -Va | $EGREP bin | $EGREP -v '/usr/bin/X11|/usr/local/bin|/bin/bash|/usr/bin/bashbug|/usr/bin/db_|/usr/bin/run-parts|\.h$|\.h$|/bin/login'



# check that eth1 is working, fix if not
eth1_err="eth1: card reports no RX buffers"
if [ `tail -n 10 /var/log/messages | grep -c "$eth1_err"` -gt 0 ]; then
    logit "ERROR: $eth1_err"
    if [ $ALARM -eq 1 ]; then
      enstore alarm --raise --severity "A" --root-error "$eth1_err"
    fi
    $IFDOWN eth1  >>$LOG 2>&1
    $IFUP   eth1  >>$LOG 2>&1
else
  if [ $QUIET -ne 1 ]; then
    logit  "No eth1 errors found in messages, ok"
  fi
fi



# check that ntp is working, fix if not, complain if down more than once
# check only in this job.  Separate cronjob sets time if needed.
msg=`/home/enstore/enstore/sbin/ntpset -a -c 2>&1`
if [ $QUIET -ne 1 ]; then
   logit  "$msg"
fi


# check that we have two processors running
if [ `$CAT /proc/cpuinfo | $EGREP -c processor` -ne 2 ]; then
   if [ "$node" = "stkensrv5" ]; then
      if [ $QUIET -ne 1 ]; then
         logit  "One processor found, ok"
      fi
   else
      logit "ONLY 1 PROCESSOR RUNNING"
      if [ $ALARM -eq 1 ]; then
         enstore alarm --raise --severity "A" --root-error "ONLY 1 PROCESSOR RUNNING"
      fi
   fi
else
  if [ $QUIET -ne 1 ]; then
    logit  "Two processors found, ok"
  fi
fi


# check that we have sufficient disk space available.
dflines=`$DF -P`
$ECHO "$dflines" | while read a b c d e rest; do
  if [ `$ECHO $e| $EGREP -c %` -eq 1 ]; then
    cap=`$ECHO $e | $SED -e 's/%//'`
    mess="$a $b $c $d $e $rest"
    if [ $cap -ge 90 ]; then
      msg="DISK FULL: $mess"
      logit "$msg"
      if [ $ALARM -eq 1 ]; then
        enstore alarm --raise --severity "A" --root-error "$msg"
      fi
    else
      if [ $QUIET -ne 1 ]; then
        logit  "DISK $a at $cap%, ok"
      fi
    fi
  fi
done


# we need a watchdog_reset file to make check_watchdog work
if [ ! -r /etc/watchdog_reset ]; then
   msg="/etc/watchdog_reset is missing"
   logit "$msg"
   if [ $ALARM -eq 1 ]; then
     enstore alarm --raise --severity "A" --root-error "$msg"
   fi
elif [ $QUIET -ne 1 ]; then
   logit  "/etc/watchdog_reset, ok"
fi

# check that we special jobs are running in crontab, or other files
filecheck "check_watchdog_reset.py"
filecheck "ntpset"
filecheck "netscan -a -q" # not so dumb, because we can run netscan manually, too
filecheck "ekill -v -9"
filecheck "boot_cleanup -x" /etc/rc.d/rc.local

# check that ipmisrv is running without watchdog timer
if [ `$PS axuwww | $EGREP -v grep | $EGREP -c "ipmisrv NO_DOG"` -ne 1 ];then
   msg="ipmisrv NO_DOG not running or misconfigured"
   logit "$msg"
   if [ $ALARM -eq 1 ]; then
     enstore alarm --raise --severity "A" --root-error "$msg"
   fi
elif [ $QUIET -ne 1 ]; then
   logit  "ipmisrv running, ok"
fi

# check that watchdog timer action is to do nothing
ACTION=`/home/enstore/ipmi/dogread| $EGREP Action|$AWK '{print $2}'`
if [  $ACTION != "00"  ];then
   msg="watchdog action is $ACTION. Should be 00"
   logit "$msg"
   if [ $ALARM -eq 1 ]; then
     enstore alarm --raise --severity "A" --root-error "$msg"
   fi
   # disable the action
   /home/enstore/ipmi/dogdisarm
elif [ $QUIET -ne 1 ]; then
   logit  "watchdog action, ok"
fi


# check that we don't have too many processes running
NPROC=`$PS axu|wc -l | $SED -e 's/ //g'`
if [ `$ECHO $node | $EGREP -c dca` -eq 1 ]; then
    maxproc=300  # disk cache
elif [ `$ECHO $node | $EGREP -c mvr` -eq 1 ]; then
    maxproc=100  #movers
else 
    maxproc=200  #servers
fi

if [ $NPROC -ge $maxproc ]; then
   msg="$NPROC processes running. Way too many"
   logit "$msg"
   if [ $ALARM -eq 1 ]; then
     enstore alarm --raise --severity "A" --root-error "$msg"
   fi
elif [ $QUIET -ne 1 ]; then
   logit  "$NPROC processes, ok"
fi


# check that db_deadlock and db_checkpoint are running if file or vol clerk running:
if [ `$PS axuwww|$EGREP python|$EGREP -v 'grep'|$EGREP -c 'file_clerk.py|volume_clerk.py'` -ge 1 ]; then
   for need in db_checkpoint db_deadlock; do
     if [ `$PS axuwww|$EGREP -v 'grep'|$EGREP -c $need` -ne 1 ]; then
       msg="$need not running (or more than 1 running) and file/volume clerk are running."
       logit "$msg"
       if [ $ALARM -eq 1 ]; then
         enstore alarm --raise --severity "A" --root-error "$msg"
       fi
     elif [ $QUIET -ne 1 ]; then
       logit  "$need running, ok"
     fi
   done
elif [ $QUIET -ne 1 ]; then
  logit  "file/volume clerk not running, no db_deadlock or db_checkpoint check, ok"
fi

# web servers need to be running on certain nodes.
case $node in
  rip7|cdfensrv2|d0ensrv2|stkensrv2|cdfendca3|stkendca3a)
    if [ `$PS axuwww|$EGREP -v 'grep'|$EGREP apache|$EGREP -c 'httpd'` -eq 0 ]; then
       msg="httpd Web server not running"
       logit "$msg"
       if [ $ALARM -eq 1 ]; then
         enstore alarm --raise --severity "A" --root-error "$msg"
       fi
    elif [ $QUIET -ne 1 ]; then
       logit  "httpd web server running, ok"
    fi
    ;;
  *)
    if [ `$PS axuwww|$EGREP -v 'grep'|$EGREP apache|$EGREP -c 'httpd'` -ne 0 ]; then
       msg="httpd Web server running on illegal node"
       logit "$msg"
       if [ $ALARM -eq 1 ]; then
         enstore alarm --raise --severity "A" --root-error "$msg"
       fi
    elif [ $QUIET -ne 1 ]; then
       logit  "httpd web server not running, ok"
    fi
    ;;
esac

# check that the keytabs are "correct"
$KEYTAB_CHECK -a


# get open files - twice - get ps in between - only take connections that survive past this
# otherwise it is impossible to compare and see if they are allowed.
# this is a small hole
N1=`$LSOF -i TCP -i UDP`
PSfirst=`$PS wwwwfaxu`
N2=`$LSOF -i TCP -i UDP`
N=`$ECHO "$N1 $N2"|$SORT|$UNIQ -d`

# scan open files and check if allowed
$ECHO "$N" | while read command pid rest; do
    if [ $pid = "PID" ] ; then continue; fi
    if [ `$ECHO $rest | $EGREP -c "LISTEN"` -ne 0 ]; then
      allow LISTEN
    elif [ `$ECHO $rest | $EGREP -c "UDP"` -ne 0 ]; then
      if [ $QUIET -ne 1 ]; then
         logit "Ignoring open UDP connections $command $pid $rest ..."
      fi
    elif [ `$ECHO $rest | $EGREP -c "TCP"` -ne 0 ]; then
      if [ $QUIET -ne 1 ]; then
         logit "Ignoring open TCP connections $command $pid $rest ..."
      fi
    fi
done



#+++++++++++++++++++++++ tasks that go over network. Can hang sometimes. Do this last.

# check that farmlets match
if [ $gang != "rip" ]; then
  msg="`$FARMLETS` 2>&1"
  if [ $? -ne 0 ]; then
     logit "$msg"
  elif [ $QUIET -ne 1 ]; then
     logit  "$msg"
  fi
fi



logit "netscan finished"
rm -fr $ACTIVE
