#!/bin/sh
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi
if [ "${1:-}" = "-a" ] ; then ALARM=1; shift; else ALARM=0; fi
if [ "${1:-}" = "-q" ] ; then QUIET=1; shift; else QUIET=0; fi

. /usr/local/etc/setups.sh
setup enstore

# Things checked:
# . Correct configuration files
# . Correct ntp time sync (allow * and ~ on 1st line)
# . Check for open LISTEN sockets

# Known vunerabilities:
# . I know I don't check everything!
# . Only check for LISTEN, igorning TCP and UDP for now.
#        TCP could be done, but UDP seems very hard (sh, mt... open lots of sockets!).
# . Depend on installed version of os (grep, lsof...)
#        Should download a static version each time.
# . Swapped out versions of jobs with open connections - allowed, not checked.
#        Should look into the proc file system to get cmdline and check that.
#        Should also buy more memory to make sure nothing is swapped out.
# . Allow all tasks run from enstore/bin or enstore/src
#        Should check for individual applications
# . RPM - could be modified
#        Too many exceptions in rpm -Va to be useful...

set -u  # force better programming and ability to use check for not set


UNAME="/bin/uname"
PS="/bin/ps -wwwwf"
CMP="/usr/bin/cmp"
ECHO="/bin/echo"
XNTPDC="/usr/sbin/xntpdc"
LSOF="/usr/local/bin/lsof"
EGREP="/bin/egrep"
AWK="/bin/awk"
WC="/usr/bin/wc"
DATE="/bin/date"
RPM="/bin/rpm"

node=`$UNAME -n| sed -e 's/\([^\.]\)\..*/\1/'`
gang=`/home/enstore/enstore/sbin/gang`

LOG=/tmp/netscan.log
ACTIVE=/tmp/netscan.ACTIVE

logit() { $ECHO `$DATE` "$1" >>$LOG 2>&1
          if [ "${2:-}"x = "psx" ]; then
             $PS >> $LOG 2>&1
          fi
          $ECHO "$1"
        }


mkdir $ACTIVE 1>/dev/null 2>/dev/null
if [ $? -ne 0 ] ; then
   msg="netscan on $node already ACTIVE... exiting"
   logit "$msg"
   if [ $ALARM -eq 1 ]; then
      enstore alarm --raise --severity "A" --root-error "$msg"
   fi
   exit 1
else
   logit "netscan starting"
fi



right_file() { if ! $CMP $1 $2 2>/dev/null; then
                  msg1="BAD CONFIGURATION: $1 $2  do not match"
                  logit "$msg1"
                  if [ $ALARM -eq 1 ]; then
                    enstore alarm --raise --severity "A" --root-error "$msg1"
                  fi
               else
                  if [ $QUIET -ne 1 ]; then
                    logit  "Matching version of $1"
                  fi
               fi
             }

right_file /home/enstore/enstore/etc/$gang.enstore.k5login /home/enstore/.k5login
right_file /home/enstore/enstore/sbin/routes /root/routes
right_file /home/enstore/enstore/etc/root.k5login /root/.k5login
right_file /home/enstore/enstore/etc/hosts.allow /etc/hosts.allow
right_file /home/enstore/enstore/etc/hosts.deny /etc/hosts.deny
right_file /home/enstore/enstore/etc/hosts /etc/hosts
right_file /home/enstore/enstore/etc/inetd.conf /etc/inetd.conf
if [ $node = "cdfenmvr1a" -o $node = "cdfenmvr2a" ]; then
  right_file /home/enstore/enstore/etc/cdf.step-tickers /etc/ntp/step-tickers
else
  right_file /home/enstore/enstore/etc/$gang.step-tickers /etc/ntp/step-tickers
fi

#rpm -Va | $EGREP bin | | $EGREP -v '/usr/bin/X11|/usr/local/bin|/bin/bash|/usr/bin/bashbug|/usr/bin/db_|/usr/bin/run-parts|\.h$|\.h$|/bin/login'

if [ "`$XNTPDC -p|$EGREP '^\*|^~'|$WC|$AWK '{print $1}'`" != "1" ]; then
    x=`$XNTPDC -p`
    logit "NO TIME SYNC"
    logit "$x"
    enstore alarm --raise --severity "A" --root-error "NO TIME SYNC $x"
fi

ALLOW_BASE="
       LISTEN,inetd,:ftp,TCP,x
       LISTEN,inetd,:telnet,TCP,x
       LISTEN,inetd,:kshell,TCP,x
       LISTEN,inetd,:klogin,TCP,x
       LISTEN,inetd,:eklogin,TCP,x
       LISTEN,inetd,:netperf,TCP,x
       LISTEN,python,:,TCP,/home/enstore/enstore/bin|/home/enstore/enstore/src
       LISTEN,netserver,:,TCP,x
       UDP,python,:7499,UDP,/home/enstore/enstore/src/monitor_server.py
       UDP,python,:,UDP,/home/enstore/enstore/src/monitor_server.py|/home/enstore/enstore/bin/encp|/home/enstore/enstore/src/mover.py|/local/ups/prd/ngop/v1_1/ma/PlugInAgent.py|/home/enstore/enstore/ngop/cronjobAgent.py
       UDP,xntpd,:ntp,UDP,x
       UDP,tee,:UDP,tee /dev/tty
       TCP,klogind,:eklogin,TCP,x
       TCP,xemacs,:6000,TCP,x
       TCP,rsh,:kshell,TCP,x
       TCP,rsh,,TCP,/usr/krb5/bin/rsh
       TCP,kshd,:kshell,TCP,x
       TCP,kshd,:,TCP,kshd kshd -5c
       TCP,telnetd,telnet,TCP,telnetd -Pa valid
       TCP,python,:,TCP,/home/enstore/enstore/src/monitor_server.py|/home/enstore/enstore/bin/encp|/home/enstore/enstore/src/mover.py
       TCP,netserver,TCP,:netperf,x
"
#       LISTEN,autorpm,:,TCP,perl /usr/sbin/autorpm


ALLOW_SRV5="$ALLOW_BASE
       LISTEN,portmap,:sunrpc,TCP,x
       LISTEN,conserver,:console,TCP,x
       LISTEN,conserver,:listen,TCP,x
       LISTEN,conserver,:nterm,TCP,x
       LISTEN,conserver,:,TCP,/usr/local/bin/conserver -d
       LISTEN,X,:6000,TCP,x
       UDP,portmap,:sunrpc,UDP,x
       TCP,conserver,:nterm,TCP,x
       TCP,netscape-,:http,TCP,x
       TCP,console,console,TCP,x
       TCP,console,nterm,TCP,x
"

ALLOW_SRV3="$ALLOW_SRV5
       LISTEN,rpc.mount,:635,TCP,x
       LISTEN,rpc.nfsd,:2049,TCP,x
       UDP,rpc.mount,:mount,UDP,x
       UDP,rpc.nfsd,:nfs,UDP,x
"

ALLOW_SRV2="$ALLOW_BASE
       LISTEN,httpd,:http,TCP,/local/ups/prd/apache/
"

# I doubt that these java ports are static across restarts, try for now.
ALLOW_SRV1="$ALLOW_BASE
       LISTEN,portmap,:sunrpc,TCP,x
       LISTEN,java,:24123,TCP,x
       LISTEN,java,:24124,TCP,x
       LISTEN,java,:1039,TCP,x
"
# Allowing swapped out java's is not good, but I don't know what else to do right now.
ALLOW_DCA="$ALLOW_BASE
       LISTEN,httpd,:http,TCP,/local/ups/prd/apache/
       LISTEN,java,:,TCP,/home/enstore/dcache/run/diskCache|[java]
"

ALLOW_MVR="$ALLOW_BASE
"


case $node in
     *srv1) ALLOW=$ALLOW_SRV1;;
     *srv2) ALLOW=$ALLOW_SRV2;;
     *srv3) ALLOW=$ALLOW_SRV3;;
     *srv5|*srv7) ALLOW=$ALLOW_SRV5;;
     *mvr*)  ALLOW=$ALLOW_MVR;;
     *dca*)  ALLOW=$ALLOW_DCA;;
         *)  ALLOW=$ALLOW_MVR;;
esac


allow() { tt=$1
          for i in $ALLOW; do
            t=`$ECHO $i | cut -f1 -d,`
            if [ $t != $tt ]; then continue; fi
            a=`$ECHO $i | cut -f2 -d,`
            b=`$ECHO $i | cut -f3 -d,`
            c=`$ECHO $i | cut -f4 -d,`
            p=`$ECHO $i | cut -f5 -d,`
            if [ $command = "$a" -a `$ECHO $rest | $EGREP -c "$b"`  -ne 0 -a `$ECHO $rest | $EGREP -c "$c"` -ne 0 ]; then
              if [ $p != "x" ]; then
                 psline=`$PS -p $pid|$EGREP -v PPID`
                 if [ -z "$psline" ] ; then
                    psline=`$ECHO "$PSfirst" | $AWK "/ $pid / {print} "`
                 fi
                 if [ `$ECHO $psline | $EGREP -c "$p"` -eq 0 ]; then
                    msg1="UNAUTHORIZED NETWORK SERVICE! $node $tt $command $pid $rest"
                    msg2=`$PS -p $pid|$EGREP -v PPID`
                    logit "$msg1"
                    logit "$msg2" "ps"
                    if [ $ALARM -eq 1 ]; then
                      enstore alarm --raise --severity "A" --root-error "$msg1  $msg2"
                    fi
                    return 2
                 fi
              else
                p=""
              fi
              if [ $QUIET -ne 1 ]; then
                logit "Allowing $node $c $tt $a $b $p"
              fi
              return 0
            fi
          done
          msg1="UNAUTHORIZED NETWORK SERVICE! $node $tt $command $pid $rest"
          msg2=`$PS -p $pid|$EGREP -v PPID`
          logit "$msg1"
          logit "$msg2" "ps"
          if [ $ALARM -eq 1 ]; then
            enstore alarm --raise --severity "A" --root-error "$msg1  $msg2"
         fi
          return 1
         }

PSfirst=`$PS`
N=`$LSOF -i TCP -i UDP`

$ECHO "$N" | while read command pid rest; do
    if [ $pid = "PID" ] ; then continue; fi
    if [ `$ECHO $rest | $EGREP -c "LISTEN"` -ne 0 ]; then
      allow LISTEN
    elif [ `$ECHO $rest | $EGREP -c "UDP"` -ne 0 ]; then
      if [ $QUIET -ne 1 ]; then
         logit "Ignoring open UDP connections $command $pid $rest ..."
      fi
    elif [ `$ECHO $rest | $EGREP -c "TCP"` -ne 0 ]; then
      if [ $QUIET -ne 1 ]; then
         logit "Ignoring open TCP connections $command $pid $rest ..."
      fi
    fi
done
