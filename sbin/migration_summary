#! /bin/sh

# $Id$

#Dump the volume information for each tape library (robot) for the
# tape inventory summary.

#Make sure to set a timeout.
timeout='--timeout 10 --retries 3'

#First obtain the directory to write the output.
html_dir=`enstore conf $timeout --show crons html_dir`
if [ ! -d "$html_dir" ]; then
    echo HTML directory $html_dir not found.
    exit 1
fi
#If the inventory directory does not exist, create it.
inventory_dir=$html_dir/tape_inventory
if [ ! -d "$inventory_dir" ]; then
    mkdir -p $inventory_dir
fi
#If the inventory directory does not exist, create it.
plots_dir=$html_dir/migration_summary
plots_link=$plots_dir/plot_enstore_system.html

#Second obtain the directory to put a link to.
url_dir=`enstore conf $timeout --show crons url_dir`

#Obtain the db port number.
DB_PORT=`enstore conf $timeout --show database dbport`
if [ -z "$DB_PORT" ]; then
    echo "dbport not found in configuration."
    exit 1
fi

#Obtain the db name.
DB_NAME=`enstore conf $timeout --show database dbname`
if [ -z "$DB_NAME" ]; then
    echo "dbname not found in configuration."
    exit 1
fi

#Obtain the db host.
DB_HOST=`enstore conf $timeout --show database dbhost`
if [ -z "$DB_HOST" ]; then
    echo "dbhost not found in configuration."
    exit 1
fi

#Obtain the db user/role.
DB_USER=`enstore conf $timeout --show database dbuser`   #dbuser_reader?
if [ -z "$DB_USER" ]; then
    echo "dbuser not found in configuration."
    exit 1
fi

#Create the variables that point to the files to output to.
fname=MIGRATION_SUMMARY
output_file=$inventory_dir/$fname
temp_file=$output_file.temp

#If we write to a temp file, and swap in it when we are done, there will
# not any time when the page is empty becuase the scipt is still writing
# the file.
rm -f $temp_file

#Make sure we know how up-to-date this is.
echo -e Migration/Duplication Report: `date` >> $temp_file 2>&1
echo -e Brought to You by: `basename $0` "\n" >> $temp_file 2>&1

echo                     >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo "Migration Summary" >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo                     >> $temp_file 2>&1

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select media_type, count(distinct label) as \"remaining_volumes\"
from volume
left join migration_history mh on mh.src = volume.label
where (system_inhibit_1 != 'migrated' and system_inhibit_1 != 'duplicated')
      and label not like '%.deleted'
      and library not like '%shelf%'
      and media_type != 'null'
group by media_type;
" >> $temp_file 2>&1

echo >> $temp_file 2>&1
echo >> $temp_file 2>&1

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select media_type,count(distinct src) as \"completed_volumes\"
from volume
left join migration_history on migration_history.src = volume.label
where (system_inhibit_1 = 'migrated' or system_inhibit_1 = 'duplicated')
      and volume.label not like '%.deleted'
      and library not like '%shelf%'
      and media_type != 'null'
group by media_type;
" >> $temp_file 2>&1

echo >> $temp_file 2>&1
echo >> $temp_file 2>&1

echo "The volumes counted in the following table are also included in the previous table." >> $temp_file 2>&1

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select media_type,count(distinct src) as "completed_volumes_with_skipped_bad_files"
from volume
left join migration_history on migration_history.src = volume.label
left join file on file.volume = volume.id
left join bad_file on bad_file.bfid = file.bfid
where (system_inhibit_1 = 'migrated' or system_inhibit_1 = 'duplicated')
      and volume.label not like '%.deleted'
      and library not like '%shelf%'
      and media_type != 'null'
      and bad_file.bfid is not NULL
group by media_type;
" >> $temp_file 2>&1

echo                       >> $temp_file 2>&1
echo "===================" >> $temp_file 2>&1
echo "Migration Remaining" >> $temp_file 2>&1
echo "===================" >> $temp_file 2>&1
echo                       >> $temp_file 2>&1

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select media_type, label
from volume
left join migration_history mh on mh.src = volume.label
where (system_inhibit_1 != 'migrated' and system_inhibit_1 != 'duplicated')
      and label not like '%.deleted'
      and library not like '%shelf%'
      and media_type != 'null'
group by media_type,label order by media_type;
" >> $temp_file 2>&1

echo                     >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo "Migration per Day" >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo                     >> $temp_file 2>&1

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select date(time) as date, media_type,count(distinct src)
from migration_history,volume 
where volume.label = migration_history.src 
group by date,media_type order by date;
" >> $temp_file 2>&1


echo                     >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo "Migration History" >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo                     >> $temp_file 2>&1

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c " \
select * from migration_history order by time; \
" >> $temp_file 2>&1


mv "$temp_file" "$output_file" #Do the temp file swap.

#For backward compatiblity make an html file too.
echo Starting to making html file for $tl_name.
rm -f $output_file.html
cat << EOF >> $output_file.html
<html> <head> <title>$tl_name Migration Summary Page</title> </head>
<body>
<body bgcolor="#ffffff" text=#a0a0ff">
<meta http-equiv="Refresh" content="900">
<hr>
<pre>
EOF

    cat $output_file >> $output_file.html

    echo >> $output_file.html
    echo "<a href=\"$url_dir/migration_summary/plot_enstore_system.html\">Migration Summary Plots</a>" >> $output_file.html
    echo >> $output_file.html

    cat << EOF >> $output_file.html
</pre>
<hr>
<hr>
</body>
EOF
