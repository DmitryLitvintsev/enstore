#! /bin/sh

# $Id$

#Dump the volume information for each tape library (robot) for the
# tape inventory summary.

#Make sure to set a timeout.
timeout='--timeout 10 --retries 3'

#First obtain the directory to write the output.
html_dir=`enstore conf $timeout --show crons html_dir`
if [ ! -d "$html_dir" ]; then
    echo HTML directory $html_dir not found.
    exit 1
fi
#If the inventory directory does not exist, create it.
inventory_dir=$html_dir/tape_inventory
if [ ! -d "$inventory_dir" ]; then
    mkdir -p $inventory_dir
fi
#If the inventory directory does not exist, create it.
plots_dir=$html_dir/migration_summary
plots_link=$plots_dir/plot_enstore_system.html

#Second obtain the directory to put a link to.
url_dir=`enstore conf $timeout --show crons url_dir`

#Obtain the db port number.
DB_PORT=`enstore conf $timeout --show database dbport`
if [ -z "$DB_PORT" ]; then
    echo "dbport not found in configuration."
    exit 1
fi

#Obtain the db name.
DB_NAME=`enstore conf $timeout --show database dbname`
if [ -z "$DB_NAME" ]; then
    echo "dbname not found in configuration."
    exit 1
fi

#Obtain the db host.
DB_HOST=`enstore conf $timeout --show database dbhost`
if [ -z "$DB_HOST" ]; then
    echo "dbhost not found in configuration."
    exit 1
fi

#Obtain the db user/role.
DB_USER=`enstore conf $timeout --show database dbuser`   #dbuser_reader?
if [ -z "$DB_USER" ]; then
    echo "dbuser not found in configuration."
    exit 1
fi

#Create the variables that point to the files to output to.
fname=MIGRATION_SUMMARY
output_file=$inventory_dir/$fname
temp_file=$output_file.temp

#If we write to a temp file, and swap in it when we are done, there will
# not any time when the page is empty becuase the scipt is still writing
# the file.
rm -f $temp_file

#Make sure we know how up-to-date this is.
echo -e Migration Report: `date` > $temp_file 2>&1
echo -e Brought to You by: `basename $0` "\n" >> $temp_file 2>&1

echo                     >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo "Migration Summary" >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo                     >> $temp_file 2>&1

echo "Creating Migration Summary" `date`

echo "In the following table:" >> $temp_file 2>&1
echo "migration_closed + duplication_closed + remaining + blank_volumes = total" >> $temp_file 2>&1

## Note: This sql works as long as migrate.py/duplicate.py use the volume
## clerk set_system_migrated()/set_system_duplicated() function(s) to set
## the system_inhibit_1 value.  
psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select media_type,
       count(distinct CASE WHEN system_inhibit_1 = 'migrated'
                           THEN label
                           ELSE NULL
                      END) AS migrated,
       count(distinct CASE WHEN (select count(*)
                                 from migration_history
                                 where migration_history.src_vol_id = volume.id
                                       and migration_history.closed_time is not NULL) > 0
                                and system_inhibit_1 = 'migrated'
                           THEN label
                           ELSE NULL
                      END) AS migrated_closed,
       count(distinct CASE WHEN system_inhibit_1 = 'duplicated'
                           THEN label
                           ELSE NULL
                      END) AS duplicated,
       count(distinct CASE WHEN (select count(*)
                                 from migration_history
                                 where migration_history.src_vol_id = volume.id
                                       and migration_history.closed_time is not NULL) > 0
                                and system_inhibit_1 = 'duplicated'
                      THEN label
                      ELSE NULL
                      END) AS duplicated_closed,
       count(distinct CASE WHEN (select count(*)
                                 from migration_history
                                 right join volume v2 on v2.id = migration_history.src_vol_id
                                 where migration_history.closed_time is NULL) > 0
                                and volume.sum_wr_access > 0
                           THEN label
                           ELSE NULL
                      END) AS remaining,
       count(distinct CASE WHEN volume.sum_wr_access = 0
                           THEN label
                           ELSE NULL
                      END) as blank_volumes,
       count(distinct label) as total,
       round(count(distinct CASE WHEN (select count(*)
                                 from migration_history
                                 where migration_history.src_vol_id = volume.id
                                       and migration_history.closed_time is not NULL) > 0
                                 THEN label
                                 ELSE NULL
                   END) / cast(count(distinct label) as DECIMAL(9,2)) * 100,2) as percentage_done
from volume
where (system_inhibit_0 != 'DELETED' 
       and label not like '%.deleted')
      and (library not like '%shelf%')
      and media_type != 'null'
group by media_type
order by media_type;
" >> $temp_file 2>&1


echo >> $temp_file 2>&1
echo >> $temp_file 2>&1

echo "The volumes counted in the following table are also included in the previous table." >> $temp_file 2>&1

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select media_type,system_inhibit_1 as migration_type,count(distinct src) as completed_volumes_with_skipped_bad_files
from volume
left join migration_history on migration_history.src_vol_id = volume.id
left join file on file.volume = volume.id
left join bad_file on bad_file.bfid = file.bfid
where (system_inhibit_1 = 'migrated' or system_inhibit_1 = 'duplicated')
      and volume.label not like '%.deleted'
      and library not like '%shelf%'
      and media_type != 'null'
      and bad_file.bfid is not NULL
group by media_type,system_inhibit_1;
" >> $temp_file 2>&1

echo                     >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo "Migration per Day" >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo                     >> $temp_file 2>&1

echo "Creating Migration per Day" `date`

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select date(time) as date, media_type, count(distinct src)
from migration_history,volume 
where volume.id = migration_history.src_vol_id
      and volume.system_inhibit_1 = 'migrated'
group by date,media_type
order by date;
" >> $temp_file 2>&1

echo                                   >> $temp_file 2>&1
echo "===============================" >> $temp_file 2>&1
echo "Migration/Duplication Remaining" >> $temp_file 2>&1
echo "===============================" >> $temp_file 2>&1
echo                                   >> $temp_file 2>&1

echo "Creating Migration/Duplication Remaining" `date`

#This first query is just to obtain the list of media types that have
# at least one tape already migrated or duplicated.
media_types=`psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select v2.media_type
from volume v2
where (v2.system_inhibit_1 = 'migrated'
       or v2.system_inhibit_1 = 'duplicated')
      and v2.system_inhibit_0 != 'DELETED'
      and v2.library not like '%shelf%'
      and v2.media_type != 'null'
group by media_type
having count(v2.label) > 0;
" | sed '1,2d'`  #Remove the first to header lines.

#Now we use that to build a list of comma seperated media_types.  This uses
# an echo trick to put all the media_types on one line seperated by spaces.
#media_list=`echo $media_types | tr " " ","`
media_list=`echo $media_types | sed -e "s/^/\'/" -e "s/ /\',\'/g" -e "s/$/\'/"`


psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c "
select media_type, label
from volume
left join migration_history mh on mh.src_vol_id = volume.id
where ((system_inhibit_1 not in ('migrated', 'duplicated'))
       or
       (mh.closed_time is NULL))
      and label not like '%.deleted'
      and library not like '%shelf%'
      and media_type != 'null'
      and media_type in (${media_list})
group by media_type,label
order by media_type,label;
" >> $temp_file 2>&1

echo                     >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo "Migration History" >> $temp_file 2>&1
echo "=================" >> $temp_file 2>&1
echo                     >> $temp_file 2>&1

echo "Creating Migration History" `date`

psql -p $DB_PORT -h $DB_HOST -U $DB_USER $DB_NAME -c " \
select migration_history.src as src_volume,volume.media_type as src_type,migration_history.dst as dst_volume,v2.media_type as dst_type,volume.system_inhibit_1 as migration,time as time_completed
from migration_history
left join volume on volume.id = migration_history.src_vol_id
left join volume as v2 on v2.id = migration_history.dst_vol_id
where volume.system_inhibit_1 = 'migrated'
order by time;
" >> $temp_file 2>&1


mv "$temp_file" "$output_file" #Do the temp file swap.

#For backward compatiblity make an html file too.
echo Starting to making html file for migration.
rm -f $output_file.html
cat << EOF >> $output_file.html
<html> <head> <title>$tl_name Migration Summary Page</title> </head>
<body>
<body bgcolor="#ffffff" text=#a0a0ff">
<meta http-equiv="Refresh" content="900">
<hr>
<pre>
EOF

    #We need to add a link to the web page with the plots on it.
    link="<a href=$url_dir/migration_summary/plot_enstore_system.html>Migration Summary Plots</a>"

    #The following sed is used more like cat to append $output_file
    # to $output_file.html.  The fancy sed part just inserts the link
    # on line 3 in the process of "cat"ing the file.
    sed "3s;\(.*\);${link}\n\1;" $output_file >> $output_file.html

    echo >> $output_file.html
    echo ${link} >> $output_file.html
    echo >> $output_file.html

    cat << EOF >> $output_file.html
</pre>
<hr>
<hr>
</body>
EOF
