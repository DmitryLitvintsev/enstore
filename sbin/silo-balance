#!/usr/bin/env bash
set -u  # force better programming and ability to use check for not set
if [ "${1:-}" = "-x" ] ; then set -xv; shift; fi

# script to maintain minimal numbers of empty slots in StorageTek silos
# and attempt to prevent overuse of the pass-through between silo pairs.

node=`hostname -s`
gang=`gang`
case $gang in
   d0en) silo_node=fntt
	 acs=1
	 let min_0=13
	 let min_1=15
	 ;;
  stken) silo_node=fntt
	 acs=0
	 let min_0=25
	 let min_1=10
	 ;;
  cdfen) silo_node=fntt2
	 acs=0
	 let min_0=3
	 let min_1=25
	 ;;
      *) echo \"$0\" not supported on $gang
	 exit 1
	 ;;
esac

stk_mv() { /usr/bin/rsh $silo_node -l acsss "echo 'move $1 ${2:-0,0}' '\r' logoff | bin/cmd_proc -lq 2>/dev/null"
	 }

stk_dv() { /usr/bin/rsh $silo_node -l acsss "echo 'display volume * -home $2,*,*,* -f access_date -s access_date -n $1' '\r' logoff | bin/cmd_proc -lq 2>/dev/null"
	 }

qlsm=`/usr/bin/rsh $silo_node -l acsss "echo query lsm all '\r' logoff | bin/cmd_proc -lq 2>/dev/null"`
for lsm in 0 1; do
  eval free_$lsm=`echo "$qlsm" | sed 's/, /,/' | awk -v silo="$acs,$lsm" '$1 == silo && $2 == "online" {print $3}'`
done

# total free slots must at least equal total minimum slots

if [ $free_0 -lt $min_0 ]
then
  let nVols=min_0-free_0
  moveFrom="$acs,0"
  moveInto="$acs,1"
fi
if [ $free_1 -lt $min_1 ]
then
  let nVols=min_1-free_1
  moveFrom="$acs,1"
  moveInto="$acs,0"
fi

if [ ${nVols:-0} -gt 0 ]
then
  vols=`stk_dv $nVols $moveFrom | awk '$1~/[A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]/ && $2~/[0-9-]+/ && $3~/[0-9:]+/ {print $1}'`
  echo "$nVols will be moved from LSM $moveFrom to LSM $moveInto."
  let n=0
  for vol in $vols
  do
    echo "Moving $vol."
    stk_mv $vol $moveInto 1>/dev/null
# pass-thru port (PTP) can hold 4 cartridges, so pause only every 4th move
    if (( (++n % 4) == 0 ))
    then
      sleep 60
    fi
  done
fi
