FILE = TABLE
PRODUCT=enstore

GROUP:

FLAVOR=ANY
QUALIFIERS=central_mass_store
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, stkensrv2.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/stk.conf)
                exeActionRequired(COMMON_SETUP)
FLAVOR=ANY
QUALIFIERS=stken
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, stkensrv2.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/stk.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=d0en
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, d0ensrv2.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/sam.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=cdfen
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, cdfensrv2.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/cdf.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=rip
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, rip7.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/rip.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=cachen
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, stkensrv2.fnal.gov)
                envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/stk.conf)
                exeActionRequired(COMMON_SETUP)


FLAVOR=ANY
QUALIFIERS=rain
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, 131.225.84.1)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/water.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=happy
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, happy.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/happy.conf)
                exeActionRequired(COMMON_SETUP)
FLAVOR=ANY
QUALIFIERS=water
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, 131.225.84.1)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/water.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=airedale
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, airedale.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/airedale.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=sirius
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, sirius)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/sirius.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=woodlawn
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, woodlawn)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/woodlawn.conf)
                exeActionRequired(COMMON_SETUP)

FLAVOR=ANY
QUALIFIERS=efb
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, ripsgi.fnal.gov)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/berman.conf)
		execute("touch /tmp/enstore/berman/ripsgidisk.fake.", NO_UPS_ENV)
                exeActionRequired(COMMON_SETUP)

#bulk1.workuk is 192.9.200.103 (UK lancaster)
QUALIFIERS=lancs
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST, 192.9.200.103) 
                envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/lancs.conf)
                exeActionRequired(COMMON_SETUP)
FLAVOR=ANY
QUALIFIERS=gccen
	ACTION=SETUP
		envSet(ENSTORE_CONFIG_HOST, 131.225.13.129)
		envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/gccen.conf)
		exeActionRequired(COMMON_SETUP)
FLAVOR=ANY
QUALIFIERS=""
        ACTION=SETUP
                envSet(ENSTORE_CONFIG_HOST,`${UPS_PROD_DIR}/ups/chooseConfig`)
                envSet(ENSTORE_CONFIG_FILE, ${UPS_PROD_DIR}/etc/`${UPS_PROD_DIR}/ups/chooseConfig file`)
                exeActionRequired(COMMON_SETUP)
        ACTION=DECLARE
                execute('echo "WARNING: Unless you know what you are doing, use a qualifier in your ups declare command!"',NO_UPS_ENV)
        ACTION=CONFIGURE
                execute('echo "WARNING: Unless you know what you are doing, use a qualifier in your ups declare command!"',NO_UPS_ENV)
        ACTION=TAILOR
                execute('echo "WARNING: Unless you know what you are doing, use a qualifier in your ups declare command!"',NO_UPS_ENV)
        ACTION=CURRENT
                execute('echo "WARNING: Unless you know what you are doing, use a qualifier in your ups declare command!"',NO_UPS_ENV)


COMMON:
        ACTION=COMMON_SETUP

                setupEnv()
                proddir()
                pathPrepend(PATH, "${UPS_PROD_DIR}/sbin")
                pathPrepend(PATH, "${UPS_PROD_DIR}/bin")

                # the place where mail gets sent when there are problems
                envSet(ENSTORE_MAIL,`${UPS_PROD_DIR}/ups/chooseConfig mail`)

                # dot, tgif, htmldoc, ghostview ximagetools and imagemagick are for generating documenation only
                # dot and graphviz are the same product with different names!
                # I don't care which version I get so don't specify any
                setupOptional("dot")
                setupOptional("graphviz")
                setupOptional("tgif")
                setupOptional("htmldoc")
                setupOptional("ghostview")
                setupOptional("ximagetools")
                setupOptional("imagemagick")

		# get access to selread for cron jobs etc.
		setupOptional("ipmi")

		# used to generate the plots of mounts etc.
                setupOptional("gnuplot v3_6")

                # we use the pylint tool in the gadfly product
                # setupRequired("gadfly v1_0") # old style
                envSet(GADFLY_GRAMMAR,`${UPS_PROD_DIR}/ups/what_is gadfly`)
                addAlias(pylint, 'python ${GADFLY_GRAMMAR}/kjpylint.py %s')
                # ftt is Fermi tape tools
	        #setupRequired("ftt v2_22")
	        setupOptional("ftt")

		# drivestat_client is the Fermi product that will allow us to monitor drive usage
                # drivestat_client is now a local module in enstore
		# setupOptional("drivestat_client v1_0")
                envSet(DS_SERVER_PORT,5001)
                envSet(DS_SERVER_HOST,fncdug.fnal.gov)

                # aci is the EMASS tape library and admin tool product
                # the media changer is the only server that interfaces to it
                #setupOptional("aci v3_1_0")
		# setup whatever is current
                setupOptional("aci")

                # the setup of python is tricky
                # if user has python declared via ups, set that up (current) and use it
                setupOptional("python -q enstore") 
                # if no python from ups available, we need it from the user's path
                exeAccess("python")
                # if python from user's path, we need to set a ups-like PYTHON_DIR to point to python
                execute("which python | sed -e 's@/bin/python@@'", NO_UPS_ENV, pypath)
                envSetIfNotSet(PYTHON_DIR, $pypath)
                envUnset(pypath)

		# if postgres product exist, set it up
		setupOptional("postgres")

                # we need to determine where the python include and library paths are
                # note in the following line, the sort allows multiple python versions,
                #      the highest is used because of the reverse sort
	        #      go through a file since otherwise multiple lines will give us trouble
		#execute("rm -f /tmp/choosepy; /bin/ls -d $PYTHON_DIR/lib/python*| sort -r>/tmp/choosepy; head -n1 /tmp/choosepy; rm -f /tmp/choosepy", NO_UPS_ENV, ver)
		execute("/bin/ls -d $PYTHON_DIR/lib/python* | sort -r | head -n1", NO_UPS_ENV, ver)
                execute("basename $ver", NO_UPS_ENV, PVER)
                envSet(PYTHONINC, $PYTHON_DIR/include/$PVER)
                envSet(PYTHONLIB, $PYTHON_DIR/lib/$PVER)
                envUnset(ver)
                envUnset(PVER)

                # we now need swig to generate the modules.
                # as with python, allow the user to use his local copy if he doesn't have swig installed
                setupOptional("swig")
                # if no swig from ups available, we need it from the user's path
                exeAccess("swig")

                # set the libtp and libtppy variables up after python - products are part of python
                # envSet(LIBTP_INCLUDE, `${UPS_PROD_DIR}/ups/what_is libtp_include`)
                # envSet(LIBTP_LIB, `${UPS_PROD_DIR}/ups/what_is libtp_lib`)

                # now set the python module search path, need to do these in separate
                # lines so that when an unsetup is done, the dropit will do 3 separate
                # dropits.   dropit does not support > 1 substring to drop on a line
                envAppend(PYTHONPATH,"${UPS_PROD_DIR}/src")
                envAppend(PYTHONPATH,"${UPS_PROD_DIR}/modules")

                # now setup the product with the python support for HTML
                # setupRequired("HTMLgen") # old style
                envAppend(PYTHONPATH,`${UPS_PROD_DIR}/ups/what_is HTMLgen`)

                # get the output right away, no buffering
                envSet(PYTHONUNBUFFERED, "x")

                # all systems use port 7500 for the well-know port to the configuration port
                envSet(ENSTORE_CONFIG_PORT, 7500)

                execute("uname", UPS_ENV, ENSTORE_OSV)

                # special treatment for libds.a on IRIX64
                execute("sh -c 'if [ ${ENSTORE_OSV} = IRIX64 ]; then echo -L/usr/lib32 -lds ; fi'", UPS_ENV, LIBDS)

		# special treatment for libsocket and libnsl on SunOS
                execute("sh -c 'if [ ${ENSTORE_OSV} = SunOS ]; then echo -lsocket -lnsl ; fi'", UPS_ENV, LIBSOCKETNSL)

                envUnset(ENSTORE_OSV)

                # create some links to put commands into your path
                execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/encp ];             then ln -s $ENSTORE_DIR/src/encp.py            $ENSTORE_DIR/bin/encp; fi"',            NO_UPS_ENV)
                execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/enstore ];          then ln -s $ENSTORE_DIR/src/enstore_admin.py   $ENSTORE_DIR/bin/enstore; fi"',         NO_UPS_ENV)
                execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/enmv ];          then ln -s $ENSTORE_DIR/src/enmv.py   $ENSTORE_DIR/bin/enmv; fi"',         NO_UPS_ENV)
                execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/enstoreCut ];      then ln -s $ENSTORE_DIR/sbin/encpCut           $ENSTORE_DIR/sbin/enstoreCut; fi"',     NO_UPS_ENV)
                execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/enstore_up_down ]; then ln -s $ENSTORE_DIR/src/enstore_up_down.py $ENSTORE_DIR/sbin/enstore_up_down; fi"',NO_UPS_ENV)
                execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/enmonitor ];       then ln -s $ENSTORE_DIR/src/monitor_client.py  $ENSTORE_DIR/sbin/enmonitor; fi"',      NO_UPS_ENV)
                execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/pnfs ];             then ln -s $ENSTORE_DIR/src/pnfs.py            $ENSTORE_DIR/bin/pnfs; fi"',            NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/entv ];             then ln -s $ENSTORE_DIR/src/entv.py            $ENSTORE_DIR/bin/entv; fi"',            NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/volume_assert ];    then ln -s $ENSTORE_DIR/src/volume_assert.py   $ENSTORE_DIR/bin/volume_assert; fi"',   NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/ensync ];	       then ln -s $ENSTORE_DIR/src/ensync.py   $ENSTORE_DIR/bin/ensync; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/bin/get ];	       then ln -s $ENSTORE_DIR/src/get.py   $ENSTORE_DIR/bin/get; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/quickquota ];      then ln -s $ENSTORE_DIR/src/quickquota.py   $ENSTORE_DIR/sbin/quickquota; fi"',		       NO_UPS_ENV)
		###
		### Enstore server links.
		###
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/configuration_server ];      then ln -s $ENSTORE_DIR/src/configuration_server.py   $ENSTORE_DIR/sbin/configuration_server; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/log_server ];      then ln -s $ENSTORE_DIR/src/log_server.py   $ENSTORE_DIR/sbin/log_server; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/alarm_server ];      then ln -s $ENSTORE_DIR/src/alarm_server.py   $ENSTORE_DIR/sbin/alarm_server; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/inquisitor ];      then ln -s $ENSTORE_DIR/src/inquisitor.py   $ENSTORE_DIR/sbin/inquisitor; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/ratekeeper ];      then ln -s $ENSTORE_DIR/src/ratekeeper.py   $ENSTORE_DIR/sbin/ratekeeper; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/event_relay ];      then ln -s $ENSTORE_DIR/src/event_relay.py   $ENSTORE_DIR/sbin/event_relay; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/info_server ];      then ln -s $ENSTORE_DIR/src/info_server.py   $ENSTORE_DIR/sbin/info_server; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/file_clerk ];      then ln -s $ENSTORE_DIR/src/file_clerk.py   $ENSTORE_DIR/sbin/file_clerk; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/volume_clerk ];      then ln -s $ENSTORE_DIR/src/volume_clerk.py   $ENSTORE_DIR/sbin/volume_clerk; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/accounting_server ];      then ln -s $ENSTORE_DIR/src/accounting_server.py   $ENSTORE_DIR/sbin/accounting_server; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/drivestat_server ];      then ln -s $ENSTORE_DIR/src/drivestat_server.py   $ENSTORE_DIR/sbin/drivestat_server; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/library_manager ];      then ln -s $ENSTORE_DIR/src/library_manager.py   $ENSTORE_DIR/sbin/library_manager; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/media_changer ];      then ln -s $ENSTORE_DIR/src/media_changer.py   $ENSTORE_DIR/sbin/media_changer; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/mover ];      then ln -s $ENSTORE_DIR/src/mover.py   $ENSTORE_DIR/sbin/mover; fi"',		       NO_UPS_ENV)
		execute('sh -c "if [ ! -r $ENSTORE_DIR/sbin/monitor_server ];      then ln -s $ENSTORE_DIR/src/monitor_server.py   $ENSTORE_DIR/sbin/monitor_server; fi"',		       NO_UPS_ENV)

        ###The next 2 stanzas should be deleted shortly...

        	# we need a file lock to serialize access to requesting ports
        	envSet(ENSTORE_TMP,"/tmp/enstore/`whoami`")
        	execute("mkdir -p $ENSTORE_TMP", NO_UPS_ENV)
		execute('sh -c "chmod 777 `dirname $ENSTORE_TMP` 2>/dev/null 1>/dev/null"',NO_UPS_ENV)
        	#execute("touch `dirname $ENSTORE_TMP`/hunt_port_lock",
		#NO_UPS_ENV)
        	#execute('sh -c "chmod 777 `dirname $ENSTORE_TMP`/hunt_port_lock 2>/dev/null 1>/dev/null"',NO_UPS_ENV)
		#
        	# control where the trace file goes
        	execute("uname -n | cut -d '.' -f 1", NO_UPS_ENV, tracehost)
        	envSet(TRACE_KEY, "$ENSTORE_TMP/trace.$tracehost")
        	envUnset(tracehost)


END:

