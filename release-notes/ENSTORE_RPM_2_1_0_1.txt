<html><body><pre>
                      Enstore release notes, from ENSTORE_RPM_2_0_1_3 to ENSTORE_RPM_2_1_0_1
                      Detailed cvs commit logs


.
========== rpm_version ====================================================================================

Version 2.1.0 Release 1 

./crontabs
========== enstore_plots ====================================================================================

mount latencies were set to run once a day, fix that to run every hour 

added module that plots mount/dismount latencies per robot per drive type RB http://uqbar/reviews/r/147/ Bugzilla http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=765 

./external_distr
========== setup-enstore ====================================================================================

Added commented enstore environment variables 

./databases/schemas/xml
========== accounting.xml ====================================================================================

create new table "drive_data" and code that fills the data in this table. Needed for drive degradation studies. http://uqbar/reviews/r/179 http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=817 

./src
========== accounting_client.py ====================================================================================

create new table "drive_data" and code that fills the data in this table. Needed for drive degradation studies. http://uqbar/reviews/r/179 http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=817 

========== accounting_server.py ====================================================================================

create new table "drive_data" and code that fills the data in this table. Needed for drive degradation studies. http://uqbar/reviews/r/179 http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=817 

========== alarm_server.py ====================================================================================

alarm server creates alarm entry if no match in mail action is found http://uqbar/reviews/r/211/ http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=863 

========== atomic.py ====================================================================================

1) To fix two --status bugs. 2) To give a better error message when a ghost file is found during migration. 3) To prevent the full path look up information was then being dropped without using it, since it was already migrated. 4) Catch errors updating migration_history. 

========== charset.py ====================================================================================

Fix issues with new style disk volumes and location cookies not being recognized correctly. (bugzilla #772, review board #153) 

========== chimera.py ====================================================================================

These patches are all related to modifying find_pnfs_file.py to support Chimera instead of just PNFS. Also, modify encp to use the new functionality. (Bugzilla #839, review board #196) 

========== cleanUDP.py ====================================================================================

Give better error messages from sendto() for EBADF and EBADFD. (bugzilla #859, review board #207) 

========== duplicate.py ====================================================================================

Detect when a previous make-failed-copies attempt failed and reuse the destination copy. (bugzilla #835, review board #191) 

The patch adds --make-copies to duplicate.py: 1) Add support for --make-copies in option.py. This includes fixing an arguement processing bug with a required arguement first appearing in the extra values section of the switch definition. 2) Added make_copies() in migrate.py based on make_failed_copies(). 3) Reworked migrate.migrate() when --with-final-scan is used to join all read and write threads, then sort all the destination files by destination location, then start the final_scan threads. The old way worked, but proved to be very inefficent with tape access. An unrelated item also fixed: CDMS122444004900000 on VOB738 had multiple migrations run simultaneously. One set completed successfully, while the other did not. The code that determines if a source file is all done returns True, because it found a set of successful destination files. The Total done check fails because it finds the unsuccessful set of destination files. This patch gives the user the error, while previously the users only got "failed from previous errors" without there being a previous error. For all: bugzilla #791, review board #166 

Lets get the correct versions commited this time... 1) --restore switch now works for duplication 2) --status now has --migration-only and --multiple-copy-only modifying switches to show only a limited type(s) of status. 3) In addition to supplying a bfid or volume, the user can now give "<volume>:<location_cookie>" for migrating/duplicating, scanning, status reporting or restoring. Reporting --status on a per file basis is also new. Previously, it only worked on volumes. 4) Added two new functions: is_migration_history_done() and is_migration_history_closed(). These functions return True if all source and destination pairs have their entries in the migration_history table. The _done() function only makes sure that all the entries exist. The _closed() function additional makes sure all the "closed_time" fields are also filled in. (bugzilla #772, review board #153) 

1) To fix two --status bugs. 2) To give a better error message when a ghost file is found during migration. 3) To prevent the full path look up information was then being dropped without using it, since it was already migrated. 4) Catch errors updating migration_history. 

========== duplication_util.py ====================================================================================

Detect when a previous make-failed-copies attempt failed and reuse the destination copy. (bugzilla #835, review board #191) 

1) To fix two --status bugs. 2) To give a better error message when a ghost file is found during migration. 3) To prevent the full path look up information was then being dropped without using it, since it was already migrated. 4) Catch errors updating migration_history. 

========== encp.py ====================================================================================

Encp now sends PNFS or Chimera ID for multiple copy and --put-cache cases. This is necessary to make new DiskMovers happy. (bugzilla #860, review board #208) 

These patches are all related to modifying find_pnfs_file.py to support Chimera instead of just PNFS. Also, modify encp to use the new functionality. (Bugzilla #839, review board #196) 

Fixed a string 'replace("_copy_")' to be 'replace("_copy_", "")'. (bugzilla #835, review board #191) 

The --skip-pnfs switch was not being honored when reading a file by BFID. (bugzilla #805, review board #171) 

========== enmv.py ====================================================================================

Added the --match-directory-file-family and --match-volume-file-family switches for enmv. (bugzilla #838, review board #195) 

========== enstore_constants.py ====================================================================================

These patches are all related to modifying find_pnfs_file.py to support Chimera instead of just PNFS. Also, modify encp to use the new functionality. (Bugzilla #839, review board #196) 

added module that plots mount/dismount latencies per robot per drive type RB http://uqbar/reviews/r/147/ Bugzilla http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=765 

========== enstore_display.py ====================================================================================

Corrected some comments from code review. (bugzilla #760, review board #143) 

Added menu options to show waiting clients and to choose between the linear or circular layouts. (bugzilla #760, review board #143) 

========== enstore_functions3.py ====================================================================================

Fix issues with new style disk volumes and location cookies not being recognized correctly. (bugzilla #772, review board #153) 

========== enstore_html.py ====================================================================================

Avoiding improper use of Interface class. (bugzilla #830) 

========== enstore_make_plot_page.py ====================================================================================

added module that plots mount/dismount latencies per robot per drive type RB http://uqbar/reviews/r/147/ Bugzilla http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=765 

========== enstore_plots.py ====================================================================================

removed classes that were used to generate mount latency plots Bugzilla : http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=776 RB : http://uqbar/reviews/r/155/ 

========== enstore_plotter_framework.py ====================================================================================

get rid of using interface so enstore_plotter_framework can work with option parser http://uqbar/reviews/r/152/ http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=771 

========== enstore_start.py ====================================================================================

When there is some program running with server name argument, the server does not start with "enstore start .." command. Make changes in enstore_start.py to better parse the EPS output. (bz 788) 

========== enstore_system_html.py ====================================================================================

Avoiding improper use of Interface class. (bugzilla #830) 

========== enstore_up_down.py ====================================================================================

Do not set red ball for insufficient movers when library manager is scheduled down. 

========== entv.py ====================================================================================

Added menu options to show waiting clients and to choose between the linear or circular layouts. (bugzilla #760, review board #143) 

========== file_clerk.py ====================================================================================

pass database name to edb.FileDB and edb.VolumeDB constructors RB : http://uqbar/reviews/r/172 Bugzilla : http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=800 

========== file_utils.py ====================================================================================

Added new function get_mount_point() that returns the mount point of the supplied path. (bugzilla #858, review board #206) 

========== find_pnfs_file.py ====================================================================================

These patches are all related to modifying find_pnfs_file.py to support Chimera instead of just PNFS. Also, modify encp to use the new functionality. (Bugzilla #839, review board #196) 

Call pnfs.get_enstore_pnfs_path() and pnfs.get_enstore_fs_path() in seperate try...except blocks. If the admin path is not mounted, that shouldn't prevent the non-admin path from being used. (bugzilla #835, reviewboard #191) 

========== generic_client.py ====================================================================================

If the callback address is not in the allowed list, don't let the client connect back over TCP. (bugzilla #859, review board #207) 

========== info_server.py ====================================================================================

pass database name to edb.FileDB and edb.VolumeDB constructors RB : http://uqbar/reviews/r/172 Bugzilla : http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=800 

========== inquisitor_plots.py ====================================================================================

added module that plots mount/dismount latencies per robot per drive type RB http://uqbar/reviews/r/147/ Bugzilla http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=765 

========== library_manager.py ====================================================================================

Send a blank reply to mover when library manager thinks it is a duplicate request. If not sent the mover retries for 10 minutes the same request.(bz 878) 

Sometimes mover request to library manager comes with "Unknown" in volume status fields: BUSY RQ {'status': ('ok', None), 'returned_work': None, 'library': 'CD-LTO4F1', 'move r_type': '', 'current_location': '0000_000000000_0000172', 'ip_map': '', 'operation': None, 'read_only': 0, 'current_time': 1282137872.1632309, 'error_source ': None, 'external_label': 'VP0388', 'state': 'SETUP', 'r_a': (('131.225.13.106', 60099), 891215L, '131.225.13.106-60099-1277858829.946311-6245'), 'library_l ist': [('CD-LTO4F1.library_manager', ('131.225.13.3', 7010))], 'current_priority': (1, -1), 'transfer_deficiency': 1, 'time_in_state': 0.015711784362792969, 'address': ('131.225.13.106', 7871), 'volume_family': 'backups.d0en_metadata_backups_copy_1.cern', 'work': 'mover_busy', 'mover': 'LTO4_111.mover', 'volume_s tatus': (['Unknown', 'Unknown'], ['Unknown', 'Unknown']), 'unique_id': 'd0ensrv3n.fnal.gov-1282137470-32461-1'} This may lead to assignment of additional volume for writes, while the current volume is not filled in. (bz 853). 

Bug fix: When preemptive (admin. priority) request gets sent to mover and mover returns dismount failure for the tape being preempted, the request does not get removed from volumes at movers list. This results in requests not being selected for a given volume family (write) or a give volume (read). (Bugzilla 761). 

========== log_server.py ====================================================================================

fix http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=773 "Enstore alarm log search seems broken" RB: http://uqbar/reviews/r/154/ 

========== manage_queue.py ====================================================================================

In SortedList.rm() set current_index and start_index to the (length of list) - 1 if the last element of list is deleted. Before start_index could become bigger than the biggest index for the list causing resinchronization and indefinine loop in get_next (bz 774) 

Bug fix: set stop_rolling 

In SortedList class of manage_queue.py call get() inside of get_next() if it was never called. The problem was found when adding diagnostic messages to resolve library_manager hangings. (bz #785) 

The Request_Queue.get() in manage_queue.py does not process the next request in tags if previous requests were dropped due to restriction on host selection. (bigzilla 769). This problem is caused by the bug in manager_queue.py the Request_Queue.get() does not process the next request in tags if previous requests were dropped due to restriction on host selection, e.i. Request_Queue.get(key, next=1, active_volumes=active_vols, disabled_hosts=disabled_hosts_list) -- returns None because all requests for a give key (volume family of external label) were for a host in the disabled_hosts_list Request_Queue.get(next=1, active_volumes=active_vols, disabled_hosts=self.disabled_hosts) - returns None because next request from a given host was in the disabled_hosts_list Request_Queue.get(next=1, active_volumes=active_vols, disabled_hosts=self.disabled_hosts) - returns None because Atomic_Request_Queue called by Request_Queue.get does not proceed with another tag. 

========== media_changer.py ====================================================================================

Fixed three occurances where and error causes a query request to remain in the queue because the r_a field no longer exists in the ticket. (bugzilla #737, review board #212) 

In MTX_MediaLoader the remote command arguments had a wrong order.(bz 867) 

If media is not in home position do not retry to mount it and do not try to unmount it. (bugzilla 766) 

========== migrate.py ====================================================================================

The BOTH, FS and NONFS contants were moved from find_pnfsid_file.py to enstore_constants.py. This patch reflects that change. (bugzilla #857, review board #205) 

Handle re-migrating a file that has been replaced. This is most likely, from bfid1 -> bfid2 -> bfid3; then re-running the migration for bfid1. (bugzilla #845, review board #200) 

Detect when a previous make-failed-copies attempt failed and reuse the destination copy. (bugzilla #835, review board #191) 

final_scan_volume() is obtaining the current pnfs location for one test; and does so incorrectly. final_scan_file() is also obtaining this information, but does so correctly. The is_expected_volume() check is now moved to final_scan_file(). (bugzilla #816, review board #178) 

1) The migrate --status output for a bad file that has not been involved in migration or multiple copies was being dropped. (bugzilla #798, review board #171) 2) There is a check to make sure that there is at least on destination copy before doing the restore. It should have been "> 0", but instead was "> 1". (bugzilla #799, review board #171) 3) Scanning a multiple copy made during migration by BFID was resulting in a traceback. (bugzilla #805, review board #171) 

The patch adds --make-copies to duplicate.py: 1) Add support for --make-copies in option.py. This includes fixing an arguement processing bug with a required arguement first appearing in the extra values section of the switch definition. 2) Added make_copies() in migrate.py based on make_failed_copies(). 3) Reworked migrate.migrate() when --with-final-scan is used to join all read and write threads, then sort all the destination files by destination location, then start the final_scan threads. The old way worked, but proved to be very inefficent with tape access. An unrelated item also fixed: CDMS122444004900000 on VOB738 had multiple migrations run simultaneously. One set completed successfully, while the other did not. The code that determines if a source file is all done returns True, because it found a set of successful destination files. The Total done check fails because it finds the unsuccessful set of destination files. This patch gives the user the error, while previously the users only got "failed from previous errors" without there being a previous error. For all: bugzilla #791, review board #166 

Fixed an issue with running --make-failed-copies for a deleted file on a machine without an admin PNFS path. (bugzilla #782, review board #158) 

Adjust the checks in migrate_volume() to allow for a migration destination tape to be scanned after it has already been migrated to yet another tape. (bugzilla #779, review board #156) 

Lets get the correct versions commited this time... 1) --restore switch now works for duplication 2) --status now has --migration-only and --multiple-copy-only modifying switches to show only a limited type(s) of status. 3) In addition to supplying a bfid or volume, the user can now give "<volume>:<location_cookie>" for migrating/duplicating, scanning, status reporting or restoring. Reporting --status on a per file basis is also new. Previously, it only worked on volumes. 4) Added two new functions: is_migration_history_done() and is_migration_history_closed(). These functions return True if all source and destination pairs have their entries in the migration_history table. The _done() function only makes sure that all the entries exist. The _closed() function additional makes sure all the "closed_time" fields are also filled in. (bugzilla #772, review board #153) 

1) --restore switch now works for duplication 2) --status now has --migration-only and --multiple-copy-only modifying switches to show only a limited type(s) of status. 3) In addition to supplying a bfid or volume, the user can now give "<volume>:<location_cookie>" for migrating/duplicating, scanning, status reporting or restoring. Reporting --status on a per file basis is also new. Previously, it only worked on volumes. 4) Added two new functions: is_migration_history_done() and is_migration_history_closed(). These functions return True if all source and destination pairs have their entries in the migration_history table. The _done() function only makes sure that all the entries exist. The _closed() function additional makes sure all the "closed_time" fields are also filled in. (bugzilla #772, review board #153) 

1) To fix two --status bugs. 2) To give a better error message when a ghost file is found during migration. 3) To prevent the full path look up information was then being dropped without using it, since it was already migrated. 4) Catch errors updating migration_history. 

========== migration_summary_plotter_module.py ====================================================================================

Corrected the migration accounting to handle: 1) Destination tapes that were determined to be bad during scanning. They had partial migration_history table records that were not properly being ignored. 2) Shelved-tapes with incomplete migration_history table records were getting included in the total tape count, but were not included in the remaining tape list. 

========== mover.py ====================================================================================

Bug: Code updates file clerk and volume clerk dictionaries in transfer setup. So if the preemting request comes some key:value pairs may not get updated, leaving them unchanged from the previous request. This change fixes this problem (bz 870). 

1. The mover currently records error count since tape mount in per file transaction. It must record deltas - errors related to this file transfer. 2. Drive rates must be calculated as file_size/io_time 3. Mover checks the drive rates: file_size/block_rw_time and compares it with a specified threshold per file transfer. If drive rate is lower than the threshold mover makes a record in suspect drives table in accounting db and sends an alarm. (bz 391) 

If dismount fails close net_driver (data connection). If there is a preemptive dismount and net_driver is not closed, the client (encp) port does not get disconnected. This resulted in 15 min timeout for encp retry. When fixed, encp retries immediately.(bz #767) 

========== mover_summary_plotter_module.py ====================================================================================

avoid histogram overflows, use solid lines to draw histograms 

========== namespace.py ====================================================================================

These patches are all related to modifying find_pnfs_file.py to support Chimera instead of just PNFS. Also, modify encp to use the new functionality. (Bugzilla #839, review board #196) 

========== option.py ====================================================================================

Added the --match-directory-file-family and --match-volume-file-family switches for enmv. (bugzilla #838, review board #195) 

1) Deep in option.py processing, the list of arguements not consumed by a switch needs to be updated. There were some cases were this was happening incorrectly. This was resulting in a confusing warning message to the user. 2) Some arguements were not in alphabetical order. (bugzilla #836, review board #193) 

Avoid possibily reference to undefined variable, new_index. (bugzilla #829, review board #186). 

The patch adds --make-copies to duplicate.py: 1) Add support for --make-copies in option.py. This includes fixing an arguement processing bug with a required arguement first appearing in the extra values section of the switch definition. 2) Added make_copies() in migrate.py based on make_failed_copies(). 3) Reworked migrate.migrate() when --with-final-scan is used to join all read and write threads, then sort all the destination files by destination location, then start the final_scan threads. The old way worked, but proved to be very inefficent with tape access. An unrelated item also fixed: CDMS122444004900000 on VOB738 had multiple migrations run simultaneously. One set completed successfully, while the other did not. The code that determines if a source file is all done returns True, because it found a set of successful destination files. The Total done check fails because it finds the unsuccessful set of destination files. This patch gives the user the error, while previously the users only got "failed from previous errors" without there being a previous error. For all: bugzilla #791, review board #166 

New switches for migration: --migration-only and --multiple-copy-only (bugzilla #772). 

1) Added the "systems" drop down menu. This provides the found selection of Enstore systems to display. 2) Fixed the --generate-messages-file switch to output consistent information. 3) Handle adding new movers on the fly to the display. 4) Removed --movers-file switch. With #2 and #3 this is obsolete. 5) Have --messages-file use the time information to space the replayed display updates in real time. 

Address printing help_strings with embedded newlines. (bugzilla bug #605, review board #48.) 

Patch to keep the code from confusing arguments and switches with the same string values (without any leading - or --). (bugzilla bug #600, review board #46) Also, add the new fs.py switches for extended attributes. (--xattr, --xattrs, --xattrrm, --xattrchmod --xattrchown) 

========== plotter_main.py ====================================================================================

added module that plots mount/dismount latencies per robot per drive type RB http://uqbar/reviews/r/147/ Bugzilla http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=765 

========== plotter.py ====================================================================================

BUG FIX: fix make_sg_plot after changes to option.py plotter.py fails. This patch fixes the problem. http://uqbar/reviews/r/194/ 

added module that plots mount/dismount latencies per robot per drive type RB http://uqbar/reviews/r/147/ Bugzilla http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=765 

========== pnfs_agent_client.py ====================================================================================

These patches are all related to modifying find_pnfs_file.py to support Chimera instead of just PNFS. Also, modify encp to use the new functionality. (Bugzilla #839, review board #196) 

========== pnfs.py ====================================================================================

Additional patch for bugzilla #856 and review board #204. The addressed use case prevents a traceback when obtaining the path of a PNFS ID that belongs to a tag or layer file. 

Added feature for tag and layer PNFS IDs to work with --showid and --path. (bugzilla #856, review board #204) 

These patches are all related to modifying find_pnfs_file.py to support Chimera instead of just PNFS. Also, modify encp to use the new functionality. (Bugzilla #839, review board #196) 

========== scanfiles.py ====================================================================================

Added support for scanning Chimera filesystems instead of just PNFS. (Bugzilla #840, review board #197) 

Fixed issue with check() needing the Interface object to be available globally. (bugzilla #850, review board #202) 

========== tapes_burn_rate_plotter_module.py ====================================================================================

add slope in MB/s to burn rate plots 

========== volume_clerk.py ====================================================================================

pass database name to edb.FileDB and edb.VolumeDB constructors RB : http://uqbar/reviews/r/172 Bugzilla : http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=800 

========== web_server.py ====================================================================================

get rid of interface usage (to play nice with option.py) http://uqbar/reviews/r/184/ 

Always work with copy of the original httpd.conf 

./tools
========== encp_test_functions ====================================================================================

Changed use of "enstore pnfs" to "enstore sfs" to support encp testing of Chimera filesystems. (bugzilla #844, review board #199) 

========== encp_test_script ====================================================================================

Use `which` to force absolute path of encp when -e is used. (bugzilla #861, review board #209) 

Changed use of "enstore pnfs" to "enstore sfs" to support encp testing of Chimera filesystems. (bugzilla #844, review board #199) 

./doc/WWW
========== index-bottom.html ====================================================================================

use correct syntax for comment in html document http://uqbar/reviews/r/214/ http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=865 

get rid of obsolete media types in main hml ("Ingest rate") http://uqbar/reviews/r/182/ 

./spec
========== enstore.spec ====================================================================================

Version 2.1.0 Release 1 

using python with enabled ssl 

========== python_enstore2.6.3.spec ====================================================================================

added ssl support 

========== swig_enstore.spec ====================================================================================

Replaced legacy statement

./etc
========== config_params.html ====================================================================================

Modified description of "use_threads" in library manager keys. 

./sbin
========== backup2Tape ====================================================================================

http://uqbar/reviews/r/217/ http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=864 

remove execution of "ls -l" on find result b/c it may lead to filtering out of useful files that have "today"'s timestamp http://uqbar/reviews/r/217/ http://www-ccf.fnal.gov/Bugzilla/show_bug.cgi?id=864 

========== choose_ran_file ====================================================================================

If the randomly chosen file is also the first or the last file, only try reading the file once. (bugzilla #414, review board #140) 

========== cleaning_report ====================================================================================

Include traps for temporary files. Also, include the process ID in the temporary file path in case multiple instances are run simultaneously. (bugzilla #862, review board #210) 

========== cms_volume_with_only_deleted_files ====================================================================================

Include traps for temporary files. Also, include the process ID in the temporary file path in case multiple instances are run simultaneously. (bugzilla #862, review board #210) 

========== create_remedy_ticket.py ====================================================================================

IMPROVEMENT: add "CI" name ("configuration item") to remedy ticket summary - John Hendry wants to see it in a page http://uqbar/reviews/r/181/ 

========== duplication_summary ====================================================================================

The LTO4 and LTO3 totals were not adding up before even starting to migrate them. Determined there were two classifications of tapes that were not accounted for. One, unrecycled cloned tapes. Two, tapes containing multiple copies. Now these have their own columns in the summary output. (bugzilla #833, review board #189) 

========== install_enstore_rpm.sh ====================================================================================

Default enstore rpm is set to 2.1.0-1 

========== make-enstore-html-rpm ====================================================================================

check out enstore "production" release from cvs 

========== make_failed_copies ====================================================================================

Added --with-final-scan to the duplicate.py command line. (bugzilla #841, review board #198) 

========== migration_common ====================================================================================

The LTO4 and LTO3 totals were not adding up before even starting to migrate them. Determined there were two classifications of tapes that were not accounted for. One, unrecycled cloned tapes. Two, tapes containing multiple copies. Now these have their own columns in the summary output. (bugzilla #833, review board #189) 

1) Skip counting multiple copy tapes as originals to be migrated. 2) Include all migrating/duplicating tapes for the remaining counts. Migrating tapes that were ejected from the robot were not being counted correctly. A similar patch was just added for the "Migration/Duplication Remaining" section. 3) Only include tapes with missing migration_history table information if the system_inhibit is migrated, dupcated or cloned. (bugzilla #814, review board #177) 

1) Remove the "Destination tapes not yet finished." output. I can't make it accurate without using the migration table. If I use the migration table it won't complete in a reasonable amount of time. 2) Tapes that have as many write failures as write attempts are empty. If the difference between these values is greater than zero, we know there is something written on the tape. (All bugzilla #804, review board #173) 

Include tapes in the 'migrating' and 'duplicating' states in the remaining output section, even if ejected from the robot. These volumes are still counted in the summary section, so now the remaining tape list and the summary counts can agree. (bugzilla #797, review board #170) 

1) Blank source tapes, like PRL700, were keeping a destination tape from being closed. 2) Tapes like PSA429 that have a D0 assigned file family datalogger_mezsilo_copy1 were tripping up duplication matches for _copy_#, because the underscore has special meaing similar to how the % character does. Now that these file_families are not matching additional tapes are being kept off the remaining lists. 3) Destination tapes like PSA425 and PSA428 originally had files migrated to them from tapes like: PRL641, PRL644, PRL645, PRL646, PRL648 and PRL649. Then these migrations were restored, but PSA425 and PSA428 still contain destination files from other tapes. Ultimately, this left un-closed records in the migration_history table. These soure-to-destination volume pairs are now confirmed by verifying the existance of at least one corresponding record in the migration table. (All 3: Bugzilla #796, review board #169) 

Ignore negative src_vol_id values in the migration_history table. (bugzilla #795, review board #168) 

1) Added a migrated_to column for the list of source tapes remaining. 2) Added a remaining section for destination tapes waiting to be scanning, including the source tapes these files are from. (bugzilla #784, review board #159) 

Corrected the migration accounting to handle: 1) Destination tapes that were determined to be bad during scanning. They had partial migration_history table records that were not properly being ignored. 2) Shelved-tapes with incomplete migration_history table records were getting included in the total tape count, but were not included in the remaining tape list. 

Group volumes with the same media type, but different capacity bytes, together on one line in the summary output. (bugzilla #764, review board #145) 

========== migration_summary ====================================================================================

The LTO4 and LTO3 totals were not adding up before even starting to migrate them. Determined there were two classifications of tapes that were not accounted for. One, unrecycled cloned tapes. Two, tapes containing multiple copies. Now these have their own columns in the summary output. (bugzilla #833, review board #189) 

========== multiple_copy_summary ====================================================================================

1) Added skipped reason "original migrated" if a multiple copy is supposed to have its own failed copy made, but the original copy has already been migrated. 2) Added skipped reason, "deleted volume" if the system_inhibit_0 value for the volume is set to DELETED. (bugzilla #834, review board #190) 

The multiple copy summary is currently including deleted files and files located on shelved tapes in the summary counts. This patch removes those files from the counts. (bugzilla #793, review board #167) 

1) Added failures_made, failures_skipped and failure_remaining to the "Failed Multiple Copies per Day" section. 2) Modified the Skipped Files section description. 3) Removed the "remaining" column in the Skipped Files section. 4) Added a case field to "Failed Multiple Copies Skipped" section. The cases are failed and migrated. (bugzilla #762, review board #144) 

========== noaccess-tapes ====================================================================================

Include traps for temporary files. Also, include the process ID in the temporary file path in case multiple instances are run simultaneously. (bugzilla #862, review board #210) 

./modules
========== Setup ====================================================================================

This is the first patch for doing historically PNFS operations, but instead in a regular file system (like ext2 or ext3). 

</pre></body></html>
